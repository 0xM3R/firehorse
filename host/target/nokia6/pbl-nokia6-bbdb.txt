j_reset_real 0 00100000 B               reset; Branch
j_reset_real 1 00100090 LDR             PC, =init; Indirect Jump
infinite_loop 0 00100020 B               infinite_loop; Branch
sub_100040 0 00100040 B               sub_100040; Branch
temporary_vector_table 0 00100060 B               temporary_vector_table; Branch
reset 0 00100090 LDR             PC, =init; Indirect Jump
reset 1 00100094 MCR             p15, 0, R0,c13,c0, 2; Move from ARM to Coprocessor Register
init 0 00100094 MCR             p15, 0, R0,c13,c0, 2; Move from ARM to Coprocessor Register
init 1 001000ac MOV             R0, #0x100000; Rd = Op2
init 2 001000c4 BIC             R0, R0, #1; Rd = Op1 & ~Op2
init 3 001000dc LDR             R0, =0xA606C; Load from Memory
init 4 00100100 LDR             R0, =dword_205400; Load from Memory
init 5 00100198 LDR             R0, =0x100060; vbase
init 6 001001a4 LDR             R0, =loc_105910; Load from Memory
init 7 00105910 LDR             R0, =off_110000; Load from Memory
init 8 00105970 LDR             R1, [R6,R4,LSL#2]; Load from Memory
init 9 0010597c LDR             R0, =pblStruct; Load from Memory
init 10 00105988 CMP             R5, #0; Set cond. codes on Op1 - Op2
init 11 00105990 MOV             R3, R5; a4
init 12 001059a4 B               loc_1059A4; Branch
init 13 001059a8 ADD             R4, R4, #1; Rd = Op1 + Op2
init 14 001059b4 B               loc_1059A4; Branch
init 15 00100290 B               loc_100290; Branch
init 16 00100258 MOV             R0, #0; Rd = Op2
fake_reset 0 001001b8 ANDEQ           R0, R0, R0; Rd = Op1 & Op2
fake_reset 1 001001cc LDR             PC, =loc_1001D0; Indirect Jump
fake_reset 2 001001d0 MCR             p15, 0, R0,c13,c0, 2; Move from ARM to Coprocessor Register
fake_reset 3 00100294 LDR             R0, =dword_205400; Load from Memory
fake_reset 4 001002a4 BX              R3; loc_108D40
fake_reset 5 001002ec LDR             R0, =unk_205608; Load from Memory
fake_reset 6 00108d40 LDR             R3, =unk_205600; a4
fake_reset 7 00100258 MOV             R0, #0; Rd = Op2
fake_reset 8 00103e8c STMFD           SP!, {R4-R10,LR}; Store Block to Memory
sub_1001E4 0 001001e4 MCR             p15, 0, R0,c13,c0, 2; Move from ARM to Coprocessor Register
sub_1001E4 1 001002ec LDR             R0, =unk_205608; Load from Memory
sub_1001E4 2 00100294 LDR             R0, =dword_205400; Load from Memory
sub_10020C 0 0010020c MCR             p15, 0, R0,c13,c0, 2; Move from ARM to Coprocessor Register
sub_10020C 1 001002ec LDR             R0, =unk_205608; Load from Memory
sub_10020C 2 00100294 LDR             R0, =dword_205400; Load from Memory
infinite_loop_2 0 00100258 MOV             R0, #0; Rd = Op2
infinite_loop_2 1 00100290 B               loc_100290; Branch
some_stack_arrangements 0 001002a8 STMFD           SP!, {R4,LR}; Store Block to Memory
some_stack_arrangements 1 001002c0 SUB             R0, R0, R2; Rd = Op1 - Op2
some_stack_arrangements 2 001002d8 LDMFD           SP!, {R4,PC}; Load Block from Memory
sub_1002DC 0 001002dc LDR             SP, =unk_2053E0; Load from Memory
set_vbar 0 001002e4 MCR             p15, 0, R0,c12,c0, 0; Move from ARM to Coprocessor Register
sub_1003FC 0 001003fc STMFD           SP!, {R4-R11,LR}; Store Block to Memory
sub_1003FC 1 00100430 LDR             R1, [R0,#4]; Load from Memory
sub_1003FC 2 0010044c LDR             R3, [R0,#0]; Load from Memory
sub_1003FC 3 0010046c TST             R4, #3; Set cond. codes on Op1 & Op2
sub_1003FC 4 00100488 LDR             R0, [R11,#0x100]; Load from Memory
sub_1003FC 5 00100494 CMP             R9, #0; Set cond. codes on Op1 - Op2
sub_1003FC 6 001004a0 MOV             R2, #4; Rd = Op2
sub_1003FC 7 001004b4 STR             R0, [R11,#0x10]; Store to Memory
sub_1003FC 8 001004c8 CMP             R7, #0; Set cond. codes on Op1 - Op2
sub_1003FC 9 001004d8 LDR             R0, [R11,#0x100]; Load from Memory
sub_1003FC 10 001004e4 ADD             R1, R5, R4,LSL#2; Rd = Op1 + Op2
sub_1003FC 11 00100508 LDR             R0, [R11,#0x100]; Load from Memory
sub_1003FC 12 00100514 LDR             R0, [R11,#0x100]; Load from Memory
sub_1003FC 13 00100520 LDR             R0, [SP,#0x18]; Load from Memory
sub_1003FC 14 0010052c ADD             SP, SP, #0x1C; Rd = Op1 + Op2
sub_1003FC 15 0010f0d4 B               loc_10F0D4; Branch
sub_100548 0 00100548 MOV             R1, #0; Rd = Op2
sub_100548 1 0010055c LDRB            R2, [R0,#0]; Load from Memory
sub_100548 2 00100570 CMP             R2, #2; Set cond. codes on Op1 - Op2
sub_100548 3 00100580 MOV             R0, #2; Rd = Op2
sub_100548 4 0010058c LDR             R12, [R0,#0x2D]; Load from Memory
sub_100548 5 001005a4 ADD             R5, R0, R1,LSL#2; Rd = Op1 + Op2
sub_100548 6 001005c0 STR             R2, [R12,#0x300]; Store to Memory
sub_100548 7 001005f4 AND             R1, R0, #0xF; Rd = Op1 & Op2
sub_100548 8 00100604 MOV             R0, #1; Rd = Op2
sub_100548 9 0010060c LDR             R0, [R12,#0x100]; Load from Memory
sub_100548 10 0010061c MOV             R0, R4; Rd = Op2
sub_100634 0 00100634 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_100634 1 00100640 LDR             R1, =0x73A000; Load from Memory
sub_100634 2 00100654 BX              LR; Branch to/from Thumb mode
sub_10065C 0 0010065c CMP             R1, #0; Set cond. codes on Op1 - Op2
sub_10065C 1 00100670 CMP             R3, #6; switch 6 cases
sub_10065C 2 0010067c B               loc_1006AC; jumptable 00100678 default case
sub_10065C 3 00100698 MOV             R2, #0xD; jumptable 00100678 case 2
sub_10065C 4 001006a0 MOV             R2, #0xE; jumptable 00100678 case 3
sub_10065C 5 001006a4 STR             R2, [R1,#0]; jumptable 00100678 cases 0,1,4,5
sub_10065C 6 001006a8 BX              LR; Branch to/from Thumb mode
sub_10065C 7 001006ac MOV             R0, #1; jumptable 00100678 default case
sub_1006B4 0 001006b4 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_1006B4 1 001006d8 B               loc_100834; jumptable 001006D4 default case
sub_1006B4 2 001006fc CMP             R3, #0; jumptable 001006D4 case 1
sub_1006B4 3 00100708 CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_1006B4 4 00100718 LDMFD           SP!, {R4-R6,PC}; Load Block from Memory
sub_1006B4 5 0010071c CMP             R1, #0; jumptable 001006D4 case 2
sub_1006B4 6 00100724 CMP             R2, #0x35; Set cond. codes on Op1 - Op2
sub_1006B4 7 0010072c MOV             R0, R1; Rd = Op2
sub_1006B4 8 00100738 CMP             R3, #0; jumptable 001006D4 case 3
sub_1006B4 9 00100740 CMP             R12, #0x35; Set cond. codes on Op1 - Op2
sub_1006B4 10 00100748 CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_1006B4 11 00100750 LDRB            R2, [R3,#0]; Load from Memory
sub_1006B4 12 0010076c LDR             R2, =0x73A000; Load from Memory
sub_1006B4 13 00100780 ADD             R12, R2, R1,LSL#2; Rd = Op1 + Op2
sub_1006B4 14 0010079c MOV             R1, #0x35; Rd = Op2
sub_1006B4 15 001007a4 CMP             R1, #0; jumptable 001006D4 case 4
sub_1006B4 16 001007ac CMP             R2, #8; Set cond. codes on Op1 - Op2
sub_1006B4 17 001007b4 CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_1006B4 18 001007bc MOV             R0, R1; Rd = Op2
sub_1006B4 19 001007c8 STR             R1, [R4,#0]; Store to Memory
sub_1006B4 20 001007d0 CMP             R1, #0; jumptable 001006D4 case 5
sub_1006B4 21 001007d8 CMP             R2, R5; Set cond. codes on Op1 - Op2
sub_1006B4 22 001007e4 B               loc_100834; jumptable 001006D4 default case
sub_1006B4 23 001007e8 CMP             R3, #0; jumptable 001006D4 case 6
sub_1006B4 24 001007f0 CMP             R5, R12; Set cond. codes on Op1 - Op2
sub_1006B4 25 001007f8 CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_1006B4 26 00100808 B               loc_100834; jumptable 001006D4 default case
sub_1006B4 27 0010080c CMP             R1, #0; jumptable 001006D4 case 7
sub_1006B4 28 00100814 CMP             R2, #0xC; Set cond. codes on Op1 - Op2
sub_1006B4 29 0010081c CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_1006B4 30 00100824 MOV             R1, #0xC; Rd = Op2
sub_1006B4 31 00100834 MOV             R0, #1; jumptable 001006D4 default case
sub_1006B4 32 00100548 MOV             R1, #0; Rd = Op2
sub_100840 0 00100840 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_100840 1 0010084c LDR             R1, =0x73A400; Load from Memory
sub_100840 2 0010085c BX              LR; Branch to/from Thumb mode
sub_100874 0 00100874 STR             LR, [SP,#-4]!; Store to Memory
sub_1008D4 0 001008d4 STMFD           SP!, {R3,LR}; Store Block to Memory
sub_1008F8 0 001008f8 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_1008F8 1 00100904 LDR             R2, [R1,#0]; Load from Memory
sub_1008F8 2 00100910 MOV             R0, #1; Rd = Op2
sub_1008F8 3 00100918 MOV             R2, #0; Rd = Op2
sub_100930 0 00100930 CMP             R1, #0; Set cond. codes on Op1 - Op2
sub_100930 1 0010093c CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_100930 2 00100950 BX              LR; Branch to/from Thumb mode
sub_100970 0 00100970 STMFD           SP!, {R4,LR}; Store Block to Memory
memset2 0 00100988 STMFD           SP!, {R4,LR}; Store Block to Memory
sub_1009B0 0 001009b0 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_1009B0 1 001009c4 LDR             R0, [R0,#0]; Load from Memory
sub_1009B0 2 001009d8 CMP             R2, #1; Set cond. codes on Op1 - Op2
sub_1009B0 3 001009e0 B               loc_100A04; Branch
sub_1009B0 4 001009e4 MOV             R0, #2; Rd = Op2
sub_1009B0 5 001009ec LDR             R3, [R1,#4]; Load from Memory
sub_1009B0 6 00100a04 MOV             R0, R3; Rd = Op2
sub_100A2C 0 00100a2c STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_100A2C 1 00100a38 LDR             R0, [R5,#0x104]; Load from Memory
sub_100A2C 2 00100a44 MOV             R0, #0x3E8; Rd = Op2
sub_100A2C 3 00100a54 LDR             R0, [R5,#0x104]; Load from Memory
sub_100A2C 4 00100a64 LDR             R0, [R5,#0x104]; Load from Memory
sub_100A2C 5 00100a70 LDMFD           SP!, {R4-R6,PC}; Load Block from Memory
sub_100AA0 0 00100aa0 MOV             R0, #0; Rd = Op2
sub_100AA8 0 00100aa8 STMFD           SP!, {R4-R8,LR}; Store Block to Memory
sub_100AA8 1 00100ac4 LDR             R0, [R5,#4]; Load from Memory
sub_100AA8 2 00100ad0 LDR             R0, [R5,#0]; Load from Memory
sub_100AA8 3 00100adc CMP             R2, #1; Set cond. codes on Op1 - Op2
sub_100AA8 4 00100ae4 CMP             R1, #0; Set cond. codes on Op1 - Op2
sub_100AA8 5 00100aec LDRB            R2, [R8,#0]; Load from Memory
sub_100AA8 6 00100afc CMP             R2, #2; Set cond. codes on Op1 - Op2
sub_100AA8 7 00100b08 LDR             R0, [R0,#4]; Load from Memory
sub_100AA8 8 00100b1c MOV             R0, #2; Rd = Op2
sub_100AA8 9 00100b20 LDMFD           SP!, {R4-R8,PC}; Load Block from Memory
sub_100AA8 10 00100b24 CMN             R4, #4; Set cond. codes on Op1 + Op2
sub_100AA8 11 00100b2c MOV             R3, #0; Rd = Op2
sub_100AA8 12 00100b48 ADDS            R4, R4, #4; Rd = Op1 + Op2
sub_100AA8 13 00100b54 B               loc_100B6C; Branch
sub_100AA8 14 00100b58 MOV             R3, #1; Rd = Op2
sub_100AA8 15 00100b6c LDR             R0, [R5,#0]; Load from Memory
sub_100AA8 16 00100b88 MOV             R1, #1; Rd = Op2
sub_100B9C 0 00100b9c CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_100B9C 1 00100bb0 MOV             R2, #0; Rd = Op2
sub_100B9C 2 00100bc0 BX              LR; Branch to/from Thumb mode
sub_100BC4 0 00100bc4 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_100BC4 1 00100be0 LDR             R0, [R5,#4]; Load from Memory
sub_100BC4 2 00100bec LDR             R1, [R5,#0]; Load from Memory
sub_100BC4 3 00100bf8 LDRB            R0, [R4,#0]; Load from Memory
sub_100BC4 4 00100c08 CMP             R0, #2; Set cond. codes on Op1 - Op2
sub_100BC4 5 00100c14 LDR             R0, [R1,#4]; Load from Memory
sub_100BC4 6 00100c20 MOV             R0, #2; Rd = Op2
sub_100BC4 7 00100c24 LDMFD           SP!, {R4-R6,PC}; Load Block from Memory
sub_100BC4 8 00100c28 LDR             R0, [R4,#0x75]; Load from Memory
sub_100BC4 9 00100c34 CMP             R0, #0x40; Set cond. codes on Op1 - Op2
sub_100BC4 10 00100c40 ADD             R1, R4, #0x35; Rd = Op1 + Op2
sub_100BC4 11 00100c5c LDR             R2, [R4,#0x75]; Load from Memory
sub_100BC4 12 00100c78 LDR             R0, [R5,#0]; Load from Memory
sub_100BC4 13 00100c94 MOV             R1, #1; Rd = Op2
sub_100CA8 0 00100ca8 CMP             R1, #1; Set cond. codes on Op1 - Op2
sub_100CA8 1 00100cb8 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_100CA8 2 00100cc8 LDR             R0, [R0,#0]; Load from Memory
sub_100CA8 3 00100cd4 CMP             R1, #1; Set cond. codes on Op1 - Op2
sub_100CA8 4 00100ce0 MOV             R0, #2; Rd = Op2
sub_100CA8 5 00100ce8 MOV             R2, #0; Rd = Op2
sub_100CA8 6 00100d08 CMP             R1, #2; Set cond. codes on Op1 - Op2
sub_100CA8 7 00100d10 B               loc_100D8C; Branch
sub_100CA8 8 00100d14 LDR             R1, =0x1234567; Load from Memory
sub_100CA8 9 00100d44 MOV             R1, #2; Rd = Op2
sub_100CA8 10 00100d8c MOV             R0, R3; Rd = Op2
sub_100DC8 0 00100dc8 STMFD           SP!, {R4-R10,LR}; Store Block to Memory
sub_100DC8 1 00100ddc CMP             R2, #1; Set cond. codes on Op1 - Op2
sub_100DC8 2 00100de4 CMP             R1, #0; Set cond. codes on Op1 - Op2
sub_100DC8 3 00100dec LDR             R5, [R1,#4]; Load from Memory
sub_100DC8 4 00100e04 MOV             R0, #1; Rd = Op2
sub_100DC8 5 00100e08 LDMFD           SP!, {R4-R10,PC}; Load Block from Memory
sub_100DC8 6 00100e0c MOV             R0, #2; Rd = Op2
sub_100DC8 7 00100e14 CMP             R1, #0x40; Set cond. codes on Op1 - Op2
sub_100DC8 8 00100e1c ADD             R1, R4, #0x35; Rd = Op1 + Op2
sub_100DC8 9 00100e38 LDR             R1, [R4,#0x75]; Load from Memory
sub_100DC8 10 00100e48 CMP             R0, #0x40; Set cond. codes on Op1 - Op2
sub_100DC8 11 00100e54 CMP             R7, #0x40; Set cond. codes on Op1 - Op2
sub_100DC8 12 00100e5c CMP             R0, #0x40; Set cond. codes on Op1 - Op2
sub_100DC8 13 00100e64 ADD             R1, R4, #0x35; Rd = Op1 + Op2
sub_100DC8 14 00100e80 MOV             R2, #0x40; Rd = Op2
sub_100DC8 15 00100ea0 CMP             R7, R5; Set cond. codes on Op1 - Op2
sub_100DC8 16 00100ea8 SUB             R0, R5, R7; Rd = Op1 - Op2
sub_100DC8 17 00100edc CMP             R8, #0; Set cond. codes on Op1 - Op2
sub_100DC8 18 00100ef0 CMN             R5, #4; Set cond. codes on Op1 + Op2
sub_100DC8 19 00100efc MOV             R2, #0xFFFFFFFC
sub_100DC8 20 00100f14 ADDS            R5, R5, #4; Rd = Op1 + Op2
sub_100DC8 21 00100f20 LDMFD           SP!, {R4-R10,PC}; Load Block from Memory
sub_100DC8 22 00100f24 MOV             R2, R5; Rd = Op2
sub_100DC8 23 00100fd0 STMFD           SP!, {R4-R9,LR}; Store Block to Memory
sub_100F40 0 00100f40 LDR             R0, =dword_10F75C; Load from Memory
sub_100F40 1 00100f80 MOV             R1, SP; Rd = Op2
sub_100F40 2 00100f94 LDR             R0, [SP,#0]; Load from Memory
sub_100F40 3 00100fa0 LDRB            R0, [SP,#8]; Load from Memory
sub_100F40 4 00100fa8 MOV             R5, R0; Rd = Op2
sub_100F40 5 00100fb8 ADD             SP, SP, #0x14; Rd = Op1 + Op2
sub_100F40 6 00100fc4 MOV             R0, #1; Rd = Op2
sub_100F40 7 0010f0d4 B               loc_10F0D4; Branch
sub_100FD0 0 00100fd0 STMFD           SP!, {R4-R9,LR}; Store Block to Memory
sub_100FD0 1 0010100c CMP             R3, #1; Set cond. codes on Op1 - Op2
sub_100FD0 2 00101048 TST             R5, #0xF; Set cond. codes on Op1 & Op2
sub_100FD0 3 00101050 AND             R0, R5, #0xF; Rd = Op1 & Op2
sub_100FD0 4 0010105c ADD             R0, SP, #0x18; Rd = Op1 + Op2
sub_100FD0 5 00101094 CMP             R0, #2; Set cond. codes on Op1 - Op2
sub_100FD0 6 001010a0 STR             R0, [SP,#0xC]; Store to Memory
sub_100FD0 7 001010a4 ADD             R1, SP, #0x28; Rd = Op1 + Op2
sub_100FD0 8 001010b8 LDR             R0, [SP,#0x28]; Load from Memory
sub_100FD0 9 001010c8 LDRB            R0, [SP,#0x34]; Load from Memory
sub_100FD0 10 001010dc LDR             R3, [SP,#0x30]; Load from Memory
sub_100FD0 11 001010f8 MOV             R0, #0x35; Rd = Op2
sub_100FD0 12 0010111c MOV             R6, R0; Rd = Op2
sub_100FD0 13 00101120 LDR             R0, [SP,#0x38]; Load from Memory
sub_100FD0 14 0010112c ADD             SP, SP, #0x3C; Rd = Op1 + Op2
sub_100FD0 15 0010f0d4 B               loc_10F0D4; Branch
sub_10113C 0 0010113c LDR             R2, =0x118600; a3
sub_10113C 1 00103e8c STMFD           SP!, {R4-R10,LR}; Store Block to Memory
sub_101170 0 00101170 MOV             R3, R0; Rd = Op2
sub_101170 1 00101188 LDR             R4, [R3,#0]; Load from Memory
sub_101170 2 001011b0 LDMFD           SP!, {R4,R5}; Load Block from Memory
sub_1011B8 0 001011b8 LDR             R2, =byte_80034B0; Load from Memory
sub_1011B8 1 001011d0 LDR             R0, [R0,#4]; Load from Memory
sub_1011B8 2 001011dc BL              sub_1012B0; Branch with Link
sub_1011B8 3 001011e8 MOV             R0, R1; Rd = Op2
sub_1011F4 0 001011f4 STMFD           SP!, {R3-R7,LR}; Store Block to Memory
sub_1011F4 1 0010126c CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_1011F4 2 00101278 LDR             R0, [R4,#4]; Load from Memory
sub_1011F4 3 00101284 ORRS            R0, R6, R5; Rd = Op1 | Op2
sub_1011F4 4 00101298 LDR             R0, [R7,#4]; Load from Memory
sub_1011F4 5 001012a4 LDMFD           SP!, {R3-R7,PC}; Load Block from Memory
sub_1011F4 6 00102470 LDR             R5, =byte_80034B0; Load from Memory
sub_1012B0 0 001012b0 STMFD           SP!, {R3-R7,LR}; Store Block to Memory
sub_1012B0 1 0010130c MOV             R2, #0; Rd = Op2
sub_1012B0 2 0010133c CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_1012B0 3 00101344 LDR             R0, [R4,#4]; Load from Memory
sub_1012B0 4 00101350 STRB            R6, [R5,#0]; Store to Memory
sub_101360 0 00101360 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_101360 1 0010139c LDR             R0, [R5,#0x30]; Load from Memory
sub_101360 2 001013b4 LDRD            R0, [R5,#0x50]; Load pair of registers
sub_1013C8 0 001013c8 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_1013C8 1 001013e4 LDR             R2, [R1,#8]; Load from Memory
sub_1013C8 2 00101400 STR             R0, [R5,#0x30]; Store to Memory
sub_1013C8 3 0010141c LDR             R6, [R0,#8]; Load from Memory
sub_1013C8 4 00101430 LDR             R6, [R0,#0x10]; Load from Memory
sub_1013C8 5 00101444 LDR             R6, [R0,#0x18]; Load from Memory
sub_1013C8 6 00101458 LDR             R6, [R0,#0x20]; Load from Memory
sub_1013C8 7 0010146c LDR             R6, [R0,#0x24]; Load from Memory
sub_1013C8 8 00101480 LDR             R6, [R0,#0x2C]; Load from Memory
sub_1013C8 9 00101494 STR             R12, [R5,#0x5C]; Store to Memory
sub_1013C8 10 001014b0 LDR             R12, [R1,#0]; Load from Memory
sub_1013C8 11 001014c4 LDR             R12, [R1,#0x10]; Load from Memory
sub_1013C8 12 001014d8 LDR             R12, [R1,#0xC]; Load from Memory
sub_1013C8 13 001014ec LDR             R1, [R1,#0x18]; Load from Memory
sub_1013C8 14 00101500 LDR             R1, [R2,#4]; Load from Memory
sub_1013C8 15 0010150c STR             R3, [R5,#0xC]; Store to Memory
sub_1013C8 16 0010151c STR             R6, [R3,#0]; Store to Memory
sub_1013C8 17 001015ac CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_1013C8 18 001015b8 MOV             R0, R4; Rd = Op2
sub_1013C8 19 001015c0 MOV             R4, #0; Rd = Op2
sub_1013C8 20 001015c4 LDR             R1, [R5,#4]; Load from Memory
sub_1015D8 0 001015d8 LDR             R12, =byte_80034B0; Load from Memory
sub_10163C 0 0010163c STMFD           SP!, {R4-R11,LR}; Store Block to Memory
sub_10163C 1 00101664 MOV             R7, #0; Rd = Op2
sub_10163C 2 0010169c SUB             R0, R5, R1; Rd = Op1 - Op2
sub_10163C 3 001016b4 STR             R9, [R8,#0x44]; Store to Memory
sub_10163C 4 001016ec LDR             R0, [R8,#0x30]; Load from Memory
sub_10163C 5 00101704 LDR             R0, [R8,#0x48]; Load from Memory
sub_10163C 6 00101710 CMP             R5, #0; Set cond. codes on Op1 - Op2
sub_10163C 7 00101718 MOV             R2, #1; Rd = Op2
sub_10163C 8 0010173c B               loc_101D70; jumptable 00101738 default case
sub_10163C 9 00101778 LDRB            R0, [R8,#0]; jumptable 00101738 case 0
sub_10163C 10 00101784 CMP             R5, #0x30; Set cond. codes on Op1 - Op2
sub_10163C 11 00101790 CMP             R5, #0x14; Set cond. codes on Op1 - Op2
sub_10163C 12 001017a0 B               loc_1017B8; Branch
sub_10163C 13 001017a4 LDR             R0, [R1,#4]; Load from Memory
sub_10163C 14 001017b0 MOV             R0, #5; Rd = Op2
sub_10163C 15 001017b8 LDR             R0, [R1,#0x10]; Load from Memory
sub_10163C 16 001017c4 LDR             R0, [R1,#8]; Load from Memory
sub_10163C 17 001017d8 LDR             R2, [R8,#0x34]; Load from Memory
sub_10163C 18 001017f0 CMP             R5, #0x14; Set cond. codes on Op1 - Op2
sub_10163C 19 001017fc LDR             R0, [R1,#0x14]; Load from Memory
sub_10163C 20 00101810 CMP             R0, #2; Set cond. codes on Op1 - Op2
sub_10163C 21 00101818 CMP             R0, #3; Set cond. codes on Op1 - Op2
sub_10163C 22 00101820 LDR             R0, [R8,#8]; Load from Memory
sub_10163C 23 00101834 BL              sub_1011F4; Branch with Link
sub_10163C 24 00101844 LDR             R0, [R8,#8]; Load from Memory
sub_10163C 25 00101850 STRB            R0, [R8,#0]; Store to Memory
sub_10163C 26 00101858 LDR             R0, [R8,#0x2C]; Load from Memory
sub_10163C 27 00101864 LDR             R0, [R8,#0x28]; Load from Memory
sub_10163C 28 00101878 STR             R9, [SP,#0]; Store to Memory
sub_10163C 29 001018ec CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_10163C 30 001018f4 B               loc_101960; Branch
sub_10163C 31 001018f8 MOV             R0, #0x1B; Rd = Op2
sub_10163C 32 00101900 LDR             R0, [R4,#4]; Load from Memory
sub_10163C 33 00101910 B               loc_101850; Branch
sub_10163C 34 00101914 LDR             R4, =dword_80037A8; Load from Memory
sub_10163C 35 00101958 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_10163C 36 00101960 MOV             R0, #0xC; Rd = Op2
sub_10163C 37 00101968 MOV             R0, #0x17; Rd = Op2
sub_10163C 38 00101970 LDR             R0, [R4,#4]; Load from Memory
sub_10163C 39 00101980 MOV             R0, #0xA; Rd = Op2
sub_10163C 40 00101988 BL              sub_102130; Branch with Link
sub_10163C 41 00101998 B               loc_101CDC; Branch
sub_10163C 42 0010199c LDRB            R0, [R8,#0]; jumptable 00101738 case 3
sub_10163C 43 001019a8 CMP             R5, #8; Set cond. codes on Op1 - Op2
sub_10163C 44 001019bc MOV             R0, #6; Rd = Op2
sub_10163C 45 001019dc MOV             R2, #0; Rd = Op2
sub_10163C 46 00101a0c CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_10163C 47 00101a14 LDR             R0, [R4,#4]; Load from Memory
sub_10163C 48 00101a20 LDR             R0, [R8,#0x14]; Load from Memory
sub_10163C 49 00101a2c B               loc_101A74; Branch
sub_10163C 50 00101a30 MOV             R0, #2; Rd = Op2
sub_10163C 51 00101a58 CMP             R0, #0xA; Set cond. codes on Op1 - Op2
sub_10163C 52 00101a64 STRB            R9, [R8,#0]; Store to Memory
sub_10163C 53 00101a70 B               loc_101A70; Branch
sub_10163C 54 00101a74 LDR             R0, [R8,#0x30]; Load from Memory
sub_10163C 55 00101a8c CMP             R0, #1; Set cond. codes on Op1 - Op2
sub_10163C 56 00101a98 CMP             R0, #0xB; Set cond. codes on Op1 - Op2
sub_10163C 57 00101aa0 STRB            R9, [R8,#0]; Store to Memory
sub_10163C 58 00101aa8 STR             R10, [R8,#0x10]; Store to Memory
sub_10163C 59 00101ab0 LDRB            R0, [R8,#0]; jumptable 00101738 case 5
sub_10163C 60 00101ac0 CMP             R0, #0xA; Set cond. codes on Op1 - Op2
sub_10163C 61 00101acc CMP             R5, #8; Set cond. codes on Op1 - Op2
sub_10163C 62 00101ae0 STR             R9, [SP,#0]; Store to Memory
sub_10163C 63 00101b14 LDRB            R0, [R8,#0]; jumptable 00101738 case 8
sub_10163C 64 00101b20 CMP             R5, #0x10; Set cond. codes on Op1 - Op2
sub_10163C 65 00101b3c LDRD            R0, [R4,#8]; Load pair of registers
sub_10163C 66 00101b58 LDRD            R0, [R4,#8]; Load pair of registers
sub_10163C 67 00101b78 CMP             R5, #0; Set cond. codes on Op1 - Op2
sub_10163C 68 00101b80 LDR             R0, [R8,#0x28]; Load from Memory
sub_10163C 69 00101bac MOV             R6, #0x19; Rd = Op2
sub_10163C 70 00101bb8 LDR             R0, [R8,#0x24]; Load from Memory
sub_10163C 71 00101bd8 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_10163C 72 00101be0 MOV             R6, #0xC; Rd = Op2
sub_10163C 73 00101be8 MOV             R6, #0x17; Rd = Op2
sub_10163C 74 00101bf0 CMP             R1, R4; Set cond. codes on Op1 - Op2
sub_10163C 75 00101bf8 MOV             R6, #0xA; Rd = Op2
sub_10163C 76 00101bfc MOV             R0, R6; Rd = Op2
sub_10163C 77 00101c04 CMP             R6, #0; Set cond. codes on Op1 - Op2
sub_10163C 78 00101c14 B               loc_101BFC; Branch
sub_10163C 79 00101c18 LDRD            R0, [R4,#8]; Load pair of registers
sub_10163C 80 00101c30 CMP             R1, #0; Set cond. codes on Op1 - Op2
sub_10163C 81 00101c38 LDR             R1, [R4,#0xC]; Load from Memory
sub_10163C 82 00101c44 B               loc_101CDC; Branch
sub_10163C 83 00101c48 LDRB            R0, [R8,#0]; jumptable 00101738 case 10
sub_10163C 84 00101c58 CMP             R5, #0xC; Set cond. codes on Op1 - Op2
sub_10163C 85 00101c6c LDR             R0, [R0,#8]; Load from Memory
sub_10163C 86 00101c7c LDRB            R0, [R8,#0]; jumptable 00101738 case 11
sub_10163C 87 00101c88 CMP             R5, #0xC; Set cond. codes on Op1 - Op2
sub_10163C 88 00101ca8 LDR             R1, [R8,#0x30]; Load from Memory
sub_10163C 89 00101cd8 BL              sub_1011F4; Branch with Link
sub_10163C 90 00101cdc LDRB            R0, [R8,#0]; Load from Memory
sub_10163C 91 00101ce8 B               loc_101E88; Branch
sub_10163C 92 00101cec LDR             R4, =dword_80037A8; Load from Memory
sub_10163C 93 00101d3c CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_10163C 94 00101d44 LDR             R0, [R4,#4]; Load from Memory
sub_10163C 95 00101d50 LDR             R0, [R8,#0x1C]; Load from Memory
sub_10163C 96 00101d60 B               loc_101CDC; Branch
sub_10163C 97 00101d64 LDRB            R0, [R8,#0]; jumptable 00101738 case 13
sub_10163C 98 00101d70 CMP             R7, #0; jumptable 00101738 default case
sub_10163C 99 00101d7c B               loc_101CD8; Branch
sub_10163C 100 00101d80 LDR             R0, =dword_80037A8; Load from Memory
sub_10163C 101 00101d98 LDR             R0, [R0,#8]; Load from Memory
sub_10163C 102 00101dac LDR             R0, [R8,#0x20]; Load from Memory
sub_10163C 103 00101dd8 CMP             R1, #0; Set cond. codes on Op1 - Op2
sub_10163C 104 00101de0 LDR             R1, [R8,#0x1C]; Load from Memory
sub_10163C 105 00101df0 B               loc_101850; Branch
sub_10163C 106 00101df4 LDR             R4, =dword_80037A8; Load from Memory
sub_10163C 107 00101e40 MOV             R2, #0; Rd = Op2
sub_10163C 108 00101e70 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_10163C 109 00101e78 LDR             R0, [R4,#4]; Load from Memory
sub_10163C 110 00101e84 STRB            R10, [R8,#0]; Store to Memory
sub_10163C 111 00101e88 LDR             R0, [R8,#0x10]; Load from Memory
sub_10163C 112 00101e94 STRB            R9, [R8,#0]; Store to Memory
sub_10163C 113 00102470 LDR             R5, =byte_80034B0; Load from Memory
sub_101EB0 0 00101eb0 STMFD           SP!, {R4-R11,LR}; Store Block to Memory
sub_101EB0 1 00101ed4 CMP             R6, #0; Set cond. codes on Op1 - Op2
sub_101EB0 2 00101edc LDR             R5, =byte_80034B0; Load from Memory
sub_101EB0 3 00101ef8 LDR             R0, [R5,#0x30]; Load from Memory
sub_101EB0 4 00101f08 LDR             R0, =byte_80034B0; Load from Memory
sub_101EB0 5 00101f68 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_101EB0 6 00101f74 BL              sub_1011F4; Branch with Link
sub_101EB0 7 00101f78 LDR             R0, =byte_80034B0; Load from Memory
sub_101EB0 8 00101f88 ADD             R1, SP, #4; Rd = Op1 + Op2
sub_101EB0 9 00101fc0 LDR             R0, [SP,#0]; Load from Memory
sub_101EB0 10 00101fcc CMP             R5, R9; Set cond. codes on Op1 - Op2
sub_101EB0 11 00101fd4 MOV             R0, #8; Rd = Op2
sub_101EB0 12 00101fe4 LDR             R0, [R5,#4]; Load from Memory
sub_101EB0 13 00101ff4 B               loc_101F74; Branch
sub_101EB0 14 00101ff8 LDR             R0, =byte_80034B0; Load from Memory
sub_101EB0 15 00102044 LDR             R0, [R5,#0x30]; Load from Memory
sub_101EB0 16 0010205c LDR             R1, =byte_80034B0; Load from Memory
sub_101EB0 17 00102070 MOV             R3, #1; Rd = Op2
sub_101EB0 18 001020cc CMP             R1, #0; Set cond. codes on Op1 - Op2
sub_101EB0 19 001020d4 MOV             R7, #0xC; Rd = Op2
sub_101EB0 20 001020dc MOV             R7, #0x16; Rd = Op2
sub_101EB0 21 001020e4 CMP             R0, R4; Set cond. codes on Op1 - Op2
sub_101EB0 22 001020ec MOV             R7, #8; Rd = Op2
sub_101EB0 23 001020f4 MOV             R7, #0xD; Rd = Op2
sub_101EB0 24 001020f8 ADD             SP, SP, #0x14; Rd = Op1 + Op2
sub_101EB0 25 00102104 CMP             R7, #0; Set cond. codes on Op1 - Op2
sub_101EB0 26 0010211c B               loc_1020F8; Branch
sub_102130 0 00102130 STMFD           SP!, {R4-R11,LR}; Store Block to Memory
sub_102130 1 00102170 MOV             R0, #6; Rd = Op2
sub_102130 2 001021a4 LDR             R0, [R11,#0x30]; Load from Memory
sub_102130 3 001021d8 MOV             R0, #7; Rd = Op2
sub_102130 4 00102208 ADD             R10, R5, #0x14; Rd = Op1 + Op2
sub_102130 5 00102240 CMP             R0, R6; Set cond. codes on Op1 - Op2
sub_102130 6 00102248 ADD             R1, R10, R6,LSL#5; Rd = Op1 + Op2
sub_102130 7 0010225c CMP             R8, #0; Set cond. codes on Op1 - Op2
sub_102130 8 00102268 B               loc_102278; Branch
sub_102130 9 0010226c CMP             R8, #0; Set cond. codes on Op1 - Op2
sub_102130 10 00102278 ADD             R0, R10, R8,LSL#5; Rd = Op1 + Op2
sub_102130 11 0010229c LDR             R0, [SP,#0]; Load from Memory
sub_102130 12 001022b4 LDR             R0, [R11,#0x30]; Load from Memory
sub_102130 13 001022d4 LDR             R0, [R11,#0xC]; Load from Memory
sub_102130 14 001022e4 CMP             R6, #0; Set cond. codes on Op1 - Op2
sub_102130 15 001022ec MOV             R2, R5; Rd = Op2
sub_102130 16 00102304 B               loc_102428; Branch
sub_102130 17 00102308 MOV             R8, R6; Rd = Op2
sub_102130 18 00102320 MOV             R4, #0x26; Rd = Op2
sub_102130 19 00102328 LDR             R0, [R11,#0x5C]; Load from Memory
sub_102130 20 00102348 B               loc_1023F8; Branch
sub_102130 21 0010234c CMP             R8, R5; Set cond. codes on Op1 - Op2
sub_102130 22 00102354 LDR             R0, [R11,#0x5C]; Load from Memory
sub_102130 23 00102370 LDR             R0, [R6,#4]; Load from Memory
sub_102130 24 0010239c LDR             R0, [SP,#0]; Load from Memory
sub_102130 25 001023b0 MOV             R4, #0x12; Rd = Op2
sub_102130 26 001023b8 LDR             R0, [R11,#0x30]; Load from Memory
sub_102130 27 001023d8 LDR             R0, [SP,#8]; Load from Memory
sub_102130 28 001023f4 ADD             R5, R5, #1; Rd = Op1 + Op2
sub_102130 29 001023f8 LDRH            R0, [R7,#0x2C]; Load from Memory
sub_102130 30 00102404 CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_102130 31 0010240c LDR             R0, [R11,#0x5C]; Load from Memory
sub_102130 32 00102428 CMP             R4, #0x16; Set cond. codes on Op1 - Op2
sub_102130 33 00102430 CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_102130 34 00102438 B               loc_102454; Branch
sub_102130 35 0010243c MOV             R0, #2; Rd = Op2
sub_102130 36 00102448 LDR             R1, [R11,#0xC]; Load from Memory
sub_102130 37 00102454 ADD             SP, SP, #0x14; Rd = Op1 + Op2
sub_102130 38 00102470 LDR             R5, =byte_80034B0; Load from Memory
sub_102130 39 00102498 CMP             R0, #0xA; Set cond. codes on Op1 - Op2
sub_102130 40 001024a4 MOV             R0, #1; Rd = Op2
sub_102130 41 001024b4 B               loc_1024B4; Branch
sub_1024BC 0 001024bc LDR             R2, =byte_80034B0; Load from Memory
sub_1024D4 0 001024d4 LDR             R2, =byte_80034B0; Load from Memory
sub_1024EC 0 001024ec STMFD           SP!, {R4-R12,LR}; Store Block to Memory
sub_1024EC 1 0010250c BNE             loc_1025EC; Branch
sub_1024EC 2 00102510 LDR             R0, [R4,#4]; Load from Memory
sub_1024EC 3 00102520 CMN             R2, #1; Set cond. codes on Op1 + Op2
sub_1024EC 4 0010252c CMP             R2, #0; Set cond. codes on Op1 - Op2
sub_1024EC 5 00102538 CMP             R6, R2; Set cond. codes on Op1 - Op2
sub_1024EC 6 00102544 LDR             R1, [R4,#4]; Load from Memory
sub_1024EC 7 0010255c LDR             R2, [R5,#0]; Load from Memory
sub_1024EC 8 00102568 LDR             R1, [R4,#0]; Load from Memory
sub_1024EC 9 00102580 BL              sub_10F760; Branch with Link
sub_1024EC 10 00102584 LDR             R2, [R5,#0]; Load from Memory
sub_1024EC 11 001025e8 B               loc_10266C; Branch
sub_1024EC 12 001025ec MOV             R0, #0xFFFFFFFF
sub_1024EC 13 001025f4 LDR             R3, [R4,#0]; Load from Memory
sub_1024EC 14 0010263c MOVS            R2, R1; Rd = Op2
sub_1024EC 15 00102644 LDR             R1, [R4,#4]; Load from Memory
sub_1024EC 16 00102654 BNE             loc_1026BC; Branch
sub_1024EC 17 00102658 LDR             R1, [R4,#0]; Load from Memory
sub_1024EC 18 00102668 B               loc_1025F4; Branch
sub_1024EC 19 0010266c LDR             R2, [R4,#0]; Load from Memory
sub_1024EC 20 001026bc STR             R0, [R7,#0]; Store to Memory
sub_10270C 0 0010270c CMN             R1, #0xFC000001; Set cond. codes on Op1 + Op2
sub_10270C 1 00102718 CMP             R1, #0; Set cond. codes on Op1 - Op2
sub_10270C 2 00102720 ADD             R2, R0, R1,LSL#2; Rd = Op1 + Op2
sub_10270C 3 00102734 MOV             R2, #0; Rd = Op2
sub_10270C 4 00102780 BX              LR; Branch to/from Thumb mode
sub_10270C 5 00102784 MOV             R0, #0xFFFFFFFF
sub_10278C 0 0010278c TST             R0, #2; Set cond. codes on Op1 & Op2
sub_10278C 1 001027b4 TST             R0, R1; Set cond. codes on Op1 & Op2
sub_10278C 2 001027e4 LDMFD           SP!, {R4,R5}; Load Block from Memory
sub_1027F0 0 001027f0 STMFD           SP!, {R0-R11,LR}; Store Block to Memory
sub_1027F0 1 00102810 LDR             R1, [SP,#0x28]; Load from Memory
sub_1027F0 2 00102828 LDR             R0, [SP,#0x28]; Load from Memory
sub_1027F0 3 0010283c LDR             R0, [SP,#0x24]; Load from Memory
sub_1027F0 4 00102850 MOV             R1, R8,LSL#2; Rd = Op2
sub_1027F0 5 00102864 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_1027F0 6 0010286c MOV             R1, #0; Rd = Op2
sub_1027F0 7 001028b0 ADD             SP, SP, #0x2C; Rd = Op1 + Op2
sub_1027F0 8 001028bc LDR             R0, [SP,#0x1C]; Load from Memory
sub_1027F0 9 001028d8 LDR             R0, [SP,#0x1C]; Load from Memory
sub_1027F0 10 001028e8 ADD             SP, SP, #0x2C; Rd = Op1 + Op2
sub_1027F0 11 001028f4 LDR             R0, [SP,#0xC]; Load from Memory
sub_1027F0 12 0010293c AND             R0, R4, #1; Rd = Op1 & Op2
sub_1027F0 13 0010294c LDR             R3, [R2,R1,LSL#2]; Load from Memory
sub_1027F0 14 0010295c ADD             R1, R1, #1; Rd = Op1 + Op2
sub_1027F0 15 00102968 CMP             R0, R4; Set cond. codes on Op1 - Op2
sub_1027F0 16 00102970 LDR             R1, [R2,R0,LSL#2]; Load from Memory
sub_1027F0 17 00102980 ADD             R1, R2, R0,LSL#2; Rd = Op1 + Op2
sub_1027F0 18 00102994 LDR             R0, [R7,#0xC]; Load from Memory
sub_1027F0 19 001029b4 MOV             R0, R10,ASR#31; Rd = Op2
sub_1027F0 20 001029f8 B               loc_102AB4; Branch
sub_1027F0 21 001029fc ADD             R0, R0, #2; Rd = Op1 + Op2
sub_1027F0 22 00102a08 B               loc_1029B4; Branch
sub_1027F0 23 00102a0c MOV             R0, R10,ASR#31; Rd = Op2
sub_1027F0 24 00102a38 LDR             R6, [R7,#0]; Load from Memory
sub_1027F0 25 00102a6c CMP             R11, #0; Set cond. codes on Op1 - Op2
sub_1027F0 26 00102a74 LDR             R6, [R7,#0]; Load from Memory
sub_1027F0 27 00102aa8 SUBS            R10, R10, #2; Rd = Op1 - Op2
sub_1027F0 28 00102ab4 STR             R9, [SP,#0]; Store to Memory
sub_1027F0 29 00102ad0 LDR             R0, [SP,#0x1C]; Load from Memory
sub_1027F0 30 00102ae0 ADD             SP, SP, #0x2C; Rd = Op1 + Op2
sub_102AF0 0 00102af0 STMFD           SP!, {R0-R11,LR}; Store Block to Memory
sub_102AF0 1 00102b20 LDR             R1, [SP,#4]; Load from Memory
sub_102AF0 2 00102b50 LDR             R0, [SP,#0x10]; Load from Memory
sub_102AF0 3 00102b64 MOV             R7, #0; Rd = Op2
sub_102AF0 4 00102b80 LDR             R0, [SP,#0]; Load from Memory
sub_102AF0 5 00102b8c LDR             R9, [R12,#4]; Load from Memory
sub_102AF0 6 00102bcc LDR             R0, [SP,#0x10]; Load from Memory
sub_102AF0 7 00102bd0 ADD             R3, R3, #1; Rd = Op1 + Op2
sub_102AF0 8 00102bec LDR             R0, [SP,#4]; Load from Memory
sub_102AF0 9 00102c08 LDR             R0, [SP,#4]; Load from Memory
sub_102AF0 10 00102c1c ADD             SP, SP, #0x14; Rd = Op1 + Op2
sub_102C28 0 00102c28 STMFD           SP!, {R0-R11,LR}; Store Block to Memory
sub_102C28 1 00102c60 LDR             R0, [SP,#0x70]; Load from Memory
sub_102C28 2 00102cb8 LDR             R0, [SP,#0x44]; Load from Memory
sub_102C28 3 00102cd8 MOV             R10, #0; Rd = Op2
sub_102C28 4 00102d44 LDR             R0, [SP,#0x70]; Load from Memory
sub_102C28 5 00102d48 ADDS            R3, R12, R4; Rd = Op1 + Op2
sub_102C28 6 00102d8c LDR             R0, [SP,#0]; Load from Memory
sub_102C28 7 00102d98 LDR             R0, [SP,#0x3C]; Load from Memory
sub_102C28 8 00102dbc ADD             SP, SP, #0x4C; Rd = Op1 + Op2
sub_102DC8 0 00102dc8 STMFD           SP!, {R0-R11,LR}; Store Block to Memory
sub_102DC8 1 00102e08 LDREQ           R0, [R9,#0]; Load from Memory
sub_102DC8 2 00102e14 MOV             R0, #0x40000000; Rd = Op2
sub_102DC8 3 00102e54 LDR             R1, [SP,#0x18]; Load from Memory
sub_102DC8 4 00102e80 LDR             R0, [SP,#0x24]; Load from Memory
sub_102DC8 5 00102e8c MOV             R5, #0; Rd = Op2
sub_102DC8 6 00102f24 LDR             R0, [SP,#4]; Load from Memory
sub_102DC8 7 00102f38 LDR             R1, [R11],#4; Load from Memory
sub_102DC8 8 00102f78 MOV             R1, R6; Rd = Op2
sub_102DC8 9 00102f7c LDR             R0, [SP,#0]; Load from Memory
sub_102DC8 10 00102fa0 BLE             loc_102FDC; Branch
sub_102DC8 11 00102fa4 MOV             R2, R6; Rd = Op2
sub_102DC8 12 00102fc0 CMP             R5, #0; Set cond. codes on Op1 - Op2
sub_102DC8 13 00102fc8 B               loc_103000; Branch
sub_102DC8 14 00102fcc MOV             R0, #0; Rd = Op2
sub_102DC8 15 00102fdc LDRD            R0, [SP,#0]; Load pair of registers
sub_102DC8 16 00102ff8 CMP             R5, #0; Set cond. codes on Op1 - Op2
sub_102DC8 17 00103000 CMP             R4, #0x10; Set cond. codes on Op1 - Op2
sub_102DC8 18 00103008 MOV             R1, #0xFFFFFFFF
sub_102DC8 19 00103010 LDRD            R0, [SP,#0]; Load pair of registers
sub_102DC8 20 00103024 MOV             R2, R6; Rd = Op2
sub_102DC8 21 00103034 MOV             R1, #0; Rd = Op2
sub_102DC8 22 00103038 LDR             R0, [SP,#0x20]; Load from Memory
sub_102DC8 23 00103060 LDR             R0, [SP,#8]; Load from Memory
pbl_load_elf_sahara_stuff 0 0010306c STMFD           SP!, {R4-R6,LR}; Store Block to Memory
pbl_load_elf_sahara_stuff 1 0010307c MOV             R3, #0; a4
pbl_load_elf_sahara_stuff 2 00103090 LDR             R0, [R4,#0x28]; Load from Memory
pbl_load_elf_sahara_stuff 3 0010309c MOV             R3, #0; a4
pbl_load_elf_sahara_stuff 4 001030b0 LDR             R0, [R4,#0x28]; Load from Memory
pbl_load_elf_sahara_stuff 5 001030cc CMP             R6, #0xA; Set cond. codes on Op1 - Op2
pbl_load_elf_sahara_stuff 6 001030d4 MOV             R3, #0; a4
pbl_load_elf_sahara_stuff 7 001030e8 MOV             R0, R5; Rd = Op2
pbl_load_elf_sahara_stuff 8 001030f0 ADD             R0, R4, #0x44; Rd = Op1 + Op2
pbl_load_elf_sahara_stuff 9 00103108 B               loc_10312C; Branch
pbl_load_elf_sahara_stuff 10 0010310c MOV             R0, R4; a1
pbl_load_elf_sahara_stuff 11 0010311c LDR             R0, [R4,#0x40]; Load from Memory
pbl_load_elf_sahara_stuff 12 0010312c STR             R0, [R4,#0x24]; Store to Memory
sub_103148 0 00103148 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_103148 1 00103150 CMP             R1, #0x60; Set cond. codes on Op1 - Op2
sub_103148 2 00103158 MOV             R0, #2; Rd = Op2
sub_103148 3 00103160 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_103148 4 00103178 MOV             R3, R5; a4
sub_103148 5 0010318c MOV             R1, R4; Rd = Op2
sub_103148 6 001031a0 ADD             R4, R4, #0x20; Rd = Op1 + Op2
sub_103148 7 001031b8 ADD             R1, R4, #0x20; Rd = Op1 + Op2
sub_103148 8 001031c8 LDMFD           SP!, {R4-R6,PC}; Load Block from Memory
sub_103148 9 0010b784 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_1031E4 0 001031e4 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_1031E4 1 001031ec CMP             R1, #0x18; Set cond. codes on Op1 - Op2
sub_1031E4 2 001031f4 MOV             R0, #2; Rd = Op2
sub_1031E4 3 001031fc STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_1031E4 4 00103218 MOV             R3, R4; a4
sub_1031E4 5 0010322c MOV             R4, #1; Rd = Op2
sub_1031E4 6 00103230 LDR             R0, =unk_8004080; Load from Memory
sub_1031E4 7 00103244 MOV             R3, #0x20; a4
sub_1031E4 8 00103258 LDR             R1, =unk_8004080; Load from Memory
sub_1031E4 9 0010326c MOV             R2, R5; Rd = Op2
sub_1031E4 10 00103284 ADD             R4, R4, #1; Rd = Op1 + Op2
sub_1031E4 11 00103294 LDMFD           SP!, {R4-R6,PC}; Load Block from Memory
sub_1032B4 0 001032b4 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_1032B4 1 001032bc CMP             R1, #4; Set cond. codes on Op1 - Op2
sub_1032B4 2 001032c4 MOV             R0, #2; Rd = Op2
sub_1032B4 3 001032cc STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_1032B4 4 001032e4 B               loc_1032E8; Branch
sub_1032B4 5 001032e8 LDR             R2, =0x10500; a3
sub_1032B4 6 001032fc MOV             R0, R4; Rd = Op2
sub_1032B4 7 0010b8b4 CMP             R0, #0; Set cond. codes on Op1 - Op2
inner_inner_auth 0 00103320 STMFD           SP!, {R4-R9,LR}; Store Block to Memory
inner_inner_auth 1 0010333c MOV             R3, #0; a4
inner_inner_auth 2 00103350 CMP             R7, #0; Set cond. codes on Op1 - Op2
inner_inner_auth 3 00103358 MOV             R3, #0; a4
inner_inner_auth 4 0010336c CMP             R8, #0; Set cond. codes on Op1 - Op2
inner_inner_auth 5 00103374 MOV             R3, #0; a4
inner_inner_auth 6 00103388 MOV             R1, #0xC; Rd = Op2
inner_inner_auth 7 001033a0 MOV             R3, #0xC; a4
inner_inner_auth 8 001033b4 LDR             R0, =dword_8004118; Load from Memory
inner_inner_auth 9 001033c8 MOV             R3, #0x10; a4
inner_inner_auth 10 001033dc LDR             R0, =dword_800351C; Load from Memory
inner_inner_auth 11 001033f0 MOV             R3, #8; a4
inner_inner_auth 12 00103404 BL              get_pbl_struct_ptr; Branch with Link
inner_inner_auth 13 00103420 ADD             R0, R4, R4,LSL#1; Rd = Op1 + Op2
inner_inner_auth 14 00103448 LDR             R0, =dword_800351C; Load from Memory
inner_inner_auth 15 0010347c LDR             R3, [R9,#0]; a4
inner_inner_auth 16 00103490 BL              get_timer; Branch with Link
inner_inner_auth 17 001034a8 CMP             R0, #3; Set cond. codes on Op1 - Op2
inner_inner_auth 18 001034b4 BL              sub_105404; Branch with Link
inner_inner_auth 19 001034b8 ADD             SP, SP, #0xC; Rd = Op1 + Op2
pbl_auth 0 001034e8 STMFD           SP!, {R4,LR}; Store Block to Memory
pbl_auth 1 001034fc MOV             R3, #0; a4
pbl_auth 2 00103510 LDR             R0, [R4,#0x2C]; Load from Memory
pbl_auth 3 0010352c MOV             R3, R0; a4
pbl_auth 4 00103540 ADD             R0, R4, #0x60; Rd = Op1 + Op2
pbl_auth 5 00103550 MOV             R3, R0; a4
pbl_auth 6 00103564 LDR             R1, =unk_80040C8; Load from Memory
pbl_auth 7 0010357c MOV             R3, #0x58; a4
pbl_auth 8 00103590 MOV             R0, #0; Rd = Op2
sub_1035BC 0 001035bc STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_1035BC 1 001035e0 CMP             R1, #3; Set cond. codes on Op1 - Op2
sub_1035BC 2 001035ec LDR             R5, =off_10CE5C; Load from Memory
sub_1035BC 3 001035f8 LDR             R1, [R5,R4,LSL#2]; Load from Memory
sub_1035BC 4 00103610 MOV             R3, R0; a4
sub_1035BC 5 00103624 LDR             R0, [R6,#0x24]; Load from Memory
sub_1035BC 6 00103630 B               loc_103644; Branch
sub_1035BC 7 00103634 ADD             R4, R4, #1; Rd = Op1 + Op2
sub_1035BC 8 00103640 B               loc_103624; Branch
sub_1035BC 9 00103644 MOV             R3, #0; a4
sub_1035BC 10 00103658 LDR             R0, =infinite_loop; vbase
sub_1035BC 11 0010366c B               loc_10366C; Branch
sub_1035BC 12 00103670 LDMFD           SP!, {R4-R6,PC}; Load Block from Memory
pbl_initialize_pagetables 0 00103694 LDR             R1, =off_110400; Load from Memory
pbl_initialize_pagetables 1 001036ac ORR             R2, R4, #0x20000; a3
pbl_initialize_pagetables 2 001036c0 MOV             R0, R4; Rd = Op2
sub_1036DC 0 001036dc LDR             R3, =0xFFDF69C3; Load from Memory
sub_1036DC 1 001036ec MVN             R12, R3; Rd = ~Op2
sub_1036DC 2 001036fc ADD             R1, R1, R3; Rd = Op1 + Op2
sub_1036DC 3 00103710 MOV             R0, R2; Rd = Op2
sub_10371C 0 0010371c STMFD           SP!, {R4-R8,LR}; Store Block to Memory
sub_10371C 1 00103734 ADD             R5, R4, R1; Rd = Op1 + Op2
sub_10371C 2 00103744 MOV             R3, #0; a4
sub_10371C 3 00103758 LDR             R0, =unk_8005000; Load from Memory
sub_10371C 4 00103768 LDR             R0, [R6,#0x10]; Load from Memory
sub_10371C 5 00103778 LDR             R0, =unk_2186FC; Load from Memory
sub_10371C 6 00103788 LDR             R0, [R6,#0x1C]; Load from Memory
sub_10371C 7 00103798 MOV             R7, #1; Rd = Op2
sub_10371C 8 0010379c MOV             R0, R7; Rd = Op2
pbl_hw_init 0 0010398c STMFD           SP!, {R4-R6,LR}; Store Block to Memory
pbl_hw_init 1 001039b4 MOV             R3, R4; a4
pbl_hw_init 2 001039c8 CMP             R4, #0; Set cond. codes on Op1 - Op2
pbl_hw_init 3 001039d4 MOV             R0, #1; Rd = Op2
pbl_hw_init 4 001039e4 MOV             R3, #1; a4
pbl_hw_init 5 001039fc MOV             R0, #0; Rd = Op2
pbl_hw_init 6 00103a0c MOV             R3, #0; a4
pbl_hw_init 7 00103a20 MOV             R0, #0; Rd = Op2
sub_103A44 0 00103a44 STMFD           SP!, {R4,LR}; Store Block to Memory
sub_103A44 1 00103a6c ORR             R2, R0, #0xA0000; a3
sub_103A44 2 00103a84 MOV             R0, #0; Rd = Op2
sub_103AA4 0 00103aa4 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_103AA4 1 00103aac CMP             R0, #1; Set cond. codes on Op1 - Op2
sub_103AA4 2 00103ab4 LDR             R0, =0x1109000; Load from Memory
sub_103AA4 3 00103ac8 BX              LR; Branch to/from Thumb mode
sub_103AA4 4 00103acc LDR             R0, =0x110A000; Load from Memory
pbl_copy_some_data 0 00103b38 LDR             R0, =off_10D5CC; Load from Memory
pbl_copy_some_data 1 00103b60 LDR             R3, [R4,#0]; a4
pbl_copy_some_data 2 00103b74 LDR             R0, =loc_10D5D8; Load from Memory
pbl_copy_some_data 3 00103b94 LDR             R3, [R4,#0]; a4
pbl_copy_some_data 4 00103ba8 LDR             R0, =loc_10D5B8; Load from Memory
pbl_copy_some_data 5 00103bcc LDR             R3, [R4,#0]; a4
pbl_copy_some_data 6 00103be0 LDR             R0, =loc_10D5C4; Load from Memory
pbl_copy_some_data 7 00103bfc LDR             R3, [R4,#0]; a4
pbl_copy_some_data 8 00103c10 MOV             R0, #0; Rd = Op2
pbl_flash_init 0 00103c5c STMFD           SP!, {R4-R6,LR}; Store Block to Memory
pbl_flash_init 1 00103c6c MOV             R3, #0; a4
pbl_flash_init 2 00103c80 LDR             R6, =dword_8003524; Load from Memory
pbl_flash_init 3 00103c9c BGE             loc_103CB8; Branch
pbl_flash_init 4 00103ca0 CMP             R3, #0; Set cond. codes on Op1 - Op2
pbl_flash_init 5 00103ca8 CMP             R3, #1; Set cond. codes on Op1 - Op2
pbl_flash_init 6 00103cb4 B               loc_103CC8; Branch
pbl_flash_init 7 00103cb8 CMP             R3, #0x80; Set cond. codes on Op1 - Op2
pbl_flash_init 8 00103cc0 CMP             R3, #0x81; Set cond. codes on Op1 - Op2
pbl_flash_init 9 00103cc8 MOV             R1, #0x81; a2
pbl_flash_init 10 00103cd8 LDR             R2, =0x10200; a3
pbl_flash_init 11 00103cec LDR             R3, [R6,#0]; a4
pbl_flash_init 12 00103cf8 B               loc_103D50; Branch
pbl_flash_init 13 00103cfc MOV             R0, R4; a1
pbl_flash_init 14 00103d10 B               loc_103CD8; Branch
pbl_flash_init 15 00103d14 MOV             R0, R4; a1
pbl_flash_init 16 00103d28 MOV             R0, R4; a1
pbl_flash_init 17 00103d38 B               loc_103CD8; Branch
pbl_flash_init 18 00103d3c MOV             R0, R4; a1
pbl_flash_init 19 00103d4c B               loc_103CEC; Branch
pbl_flash_init 20 00103d50 LDR             R2, =0x10300; a3
pbl_flash_init 21 00103d60 BL              get_timer; Branch with Link
pbl_mc_init7 0 00103d94 LDR             R1, =off_110400; Load from Memory
pbl_mc_init7 1 00103dac ORR             R2, R4, #0x20000; a3
pbl_mc_init7 2 00103dc0 MOV             R0, R4; Rd = Op2
memzero_some_address 0 00103ddc LDR             R0, =dword_205400; Load from Memory
memzero_some_address 1 00103df8 MOV             R3, #0x100; a4
memzero_some_address 2 00103e0c LDR             R0, =unk_205500; Load from Memory
memzero_some_address 3 00103e20 MOV             R3, #0x100; a4
memzero_some_address 4 00103e34 LDR             R0, =unk_205600; Load from Memory
memzero_some_address 5 00103e48 MOV             R2, R4; a3
memzero_some_address 6 00103e60 LDMFD           SP!, {R4,PC}; Load Block from Memory
memzero_some_address 7 00103e8c STMFD           SP!, {R4-R10,LR}; Store Block to Memory
pbl_error_handler 0 00103e8c STMFD           SP!, {R4-R10,LR}; Store Block to Memory
pbl_error_handler 1 00103eb4 BL              sub_10F204; Branch with Link
pbl_error_handler 2 00103ec0 LDR             R0, [R8,#0]; Load from Memory
pbl_error_handler 3 00103f28 AND             R0, R4, #0xFF0000; Rd = Op1 & Op2
pbl_error_handler 4 00103f38 LDR             R0, [R8,#0]; Load from Memory
pbl_error_handler 5 00103f54 LDR             R2, [R5,#0]; Load from Memory
pbl_error_handler 6 00103f68 AND             R0, R4, #0xFF00; Rd = Op1 & Op2
pbl_error_handler 7 00103f74 BL              sub_1053B8; Branch with Link
pbl_error_handler 8 00103f80 BL              get_pbl_struct_ptr; Branch with Link
pbl_error_handler 9 00103f94 LDR             R0, =dword_10D5D0; Load from Memory
pbl_error_handler 10 00103fb8 MOV             R3, R5; a4
pbl_error_handler 11 00103fcc LDR             R1, [R4,#0x14]; Load from Memory
pbl_error_handler 12 00103fe0 LDR             R3, [R4,#0x14]; a4
pbl_error_handler 13 00103ff4 LDR             R0, =loc_111000; Load from Memory
pbl_error_handler 14 00104008 MOV             R3, #0x4000; a4
pbl_error_handler 15 0010401c LDR             R0, =unk_2186FC; Load from Memory
pbl_error_handler 16 00104030 LDR             R3, [R4,#0x20]; a4
pbl_error_handler 17 00104044 LDR             R0, =unk_20963C; Load from Memory
pbl_error_handler 18 00104058 MOV             R3, #0xF000; a4
pbl_error_handler 19 0010406c LDR             R1, =dword_10D5F8; Load from Memory
pbl_error_handler 20 00104098 MOV             R3, R4; a4
pbl_error_handler 21 001040ac LDR             R0, =dword_205000; Load from Memory
pbl_error_handler 22 001040b4 STR             R6, [R0],#4; Store to Memory
pbl_error_handler 23 001040c0 MOV             R0, #0x8000000; Rd = Op2
pbl_error_handler 24 001040c8 STR             R6, [R0],#4; Store to Memory
pbl_error_handler 25 001040d4 LDMFD           SP!, {R4-R10,LR}; Load Block from Memory
pbl_error_handler 26 00100258 MOV             R0, #0; Rd = Op2
pbl_jmp_to_sbl 0 00104130 STMFD           SP!, {R4,LR}; Store Block to Memory
pbl_jmp_to_sbl 1 00104144 MOV             R3, #0; a4
pbl_jmp_to_sbl 2 00104158 BL              get_timer; Branch with Link
pbl_jmp_to_sbl 3 00104188 ORR             R2, R0, #0x20000; a3
pbl_jmp_to_sbl 4 0010419c LDR             R1, [R4,#0x24]!; Load from Memory
sub_104200 0 00104200 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_104200 1 00104218 MOV             R3, #0; a4
sub_104200 2 0010422c LDR             R2, [R4,#0x18]; Load from Memory
sub_104254 0 00104254 STMFD           SP!, {R4-R8,LR}; Store Block to Memory
sub_104254 1 00104270 MOV             R3, #0; a4
sub_104254 2 00104284 CMP             R6, #2; Set cond. codes on Op1 - Op2
sub_104254 3 0010428c MOV             R3, R6; a4
sub_104254 4 001042a0 LDR             R0, [R7,#0x28]; Load from Memory
sub_104254 5 0010432c STR             R2, [R0,#0x28]; Store to Memory
sub_104254 6 00104340 LDR             R1, [R0,#0x2C]; Load from Memory
sub_104254 7 0010434c LDR             R1, [R0,#0x2C]; Load from Memory
sub_104254 8 00104368 MOV             R0, #0; Rd = Op2
sub_104254 9 00104370 LDR             R1, [R4,#0x34]; Load from Memory
sub_104254 10 00104384 LDR             R0, [R4,#0x34]; Load from Memory
sub_104404 0 00104404 STMFD           SP!, {R3-R9,LR}; Store Block to Memory
sub_104404 1 00104418 MOV             R3, #0; a4
sub_104404 2 0010442c ADD             R5, R5, #0x24; Rd = Op1 + Op2
sub_104404 3 0010444c MOV             R3, #0; a4
sub_104404 4 00104460 LDR             R0, [R4,#0]; Load from Memory
sub_104404 5 0010446c CMP             R0, #1; Set cond. codes on Op1 - Op2
sub_104404 6 00104478 LDR             R0, [R4,#4]; Load from Memory
sub_104404 7 00104494 TST             R6, #3; Set cond. codes on Op1 & Op2
sub_104404 8 0010449c LDRB            R3, [R6,#0]; a4
sub_104404 9 001044b0 STR             R6, [SP,#0]; Store to Memory
sub_104404 10 001044d0 LDMFD           SP!, {R3-R9,PC}; Load Block from Memory
sub_104404 11 001044d4 LDR             R0, [R4,#4]; Load from Memory
sub_104510 0 00104510 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_104510 1 00104528 LDR             R2, =0xB0700; a3
sub_104510 2 00104538 LDR             R0, =dword_8003590; Load from Memory
sub_104510 3 0010454c MOV             R2, #0x50; Rd = Op2
sub_104510 4 00104570 MOV             R0, R4; Rd = Op2
sub_10459C 0 0010459c STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_10459C 1 001045b0 MOV             R3, #0; a4
sub_10459C 2 001045c4 LDR             R2, [R4,#0x24]; Load from Memory
pbl_flash_sdcc 0 00104668 STMFD           SP!, {R4,LR}; Store Block to Memory
pbl_flash_sdcc 1 00104674 MOV             R3, #0; a4
pbl_flash_sdcc 2 00104688 LDR             R0, [R4,#4]; Load from Memory
pbl_flash_sdcc 3 00104694 BGT             loc_1046B0; Branch
pbl_flash_sdcc 4 00104698 CMP             R0, #0; Set cond. codes on Op1 - Op2
pbl_flash_sdcc 5 001046a0 CMP             R0, #1; Set cond. codes on Op1 - Op2
pbl_flash_sdcc 6 001046a8 MOV             R0, #4; Rd = Op2
pbl_flash_sdcc 7 001046ac LDMFD           SP!, {R4,PC}; Load Block from Memory
pbl_flash_sdcc 8 001046b0 CMP             R0, #0x80; Set cond. codes on Op1 - Op2
pbl_flash_sdcc 9 001046bc B               loc_1046A8; Branch
pbl_flash_sdcc 10 001046c0 MOV             R1, #0; a2
pbl_flash_sdcc 11 001046d4 MOV             R0, R4; Rd = Op2
pbl_flash_sdcc 12 001046e4 MOV             R1, #1; a2
pbl_flash_sdcc 13 001046f8 MOV             R0, R4; Rd = Op2
pbl_flash_sdcc 14 00104d8c STMFD           SP!, {R4-R11,LR}; Store Block to Memory
pbl_flash_sdcc 15 001047f4 STMFD           SP!, {R4-R11,LR}; Store Block to Memory
sub_104720 0 00104720 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_104720 1 0010473c MOV             R3, #0; a4
sub_104720 2 00104750 LDR             R0, [R4,#0x28]; Load from Memory
sub_104720 3 001047b8 CMP             R1, #0x800; Set cond. codes on Op1 - Op2
sub_104720 4 001047c8 LDR             R0, =sub_104C9C; Load from Memory
sub_104720 5 001047d8 STR             R1, [R0,#0x10]; Store to Memory
pbl_flash_sdcc3 0 001047f4 STMFD           SP!, {R4-R11,LR}; Store Block to Memory
pbl_flash_sdcc3 1 00104814 CMP             R5, #2; Set cond. codes on Op1 - Op2
pbl_flash_sdcc3 2 0010481c MOV             R3, #0; a4
pbl_flash_sdcc3 3 00104830 LDR             R0, [R7,#0x28]; Load from Memory
pbl_flash_sdcc3 4 00104864 LDR             R0, [R4,#0]; Load from Memory
pbl_flash_sdcc3 5 00104870 STR             R11, [SP,#8]; Store to Memory
pbl_flash_sdcc3 6 00104898 LDR             R0, =0x40FF8080; Load from Memory
pbl_flash_sdcc3 7 001048bc CMP             R0, #2; Set cond. codes on Op1 - Op2
pbl_flash_sdcc3 8 001048c4 B               loc_104904; Branch
pbl_flash_sdcc3 9 001048c8 LDR             R0, [SP,#0xC]; Load from Memory
pbl_flash_sdcc3 10 001048d4 LDR             R0, [SP,#0xC]; Load from Memory
pbl_flash_sdcc3 11 001048e4 LDR             R0, [SP,#0xC]; Load from Memory
pbl_flash_sdcc3 12 001048fc CMP             R5, #2; Set cond. codes on Op1 - Op2
pbl_flash_sdcc3 13 00104904 MOV             R0, #0x1388; Rd = Op2
pbl_flash_sdcc3 14 00104918 STR             R6, [R4,#0]; Store to Memory
pbl_flash_sdcc3 15 0010491c LDR             R0, [R4,#0]; Load from Memory
pbl_flash_sdcc3 16 00104930 MOV             R0, R4; Rd = Op2
pbl_flash_sdcc3 17 00104948 MOV             R2, #1; Rd = Op2
pbl_flash_sdcc3 18 001049a4 MOV             R0, #1; Rd = Op2
pbl_flash_sdcc3 19 001049dc LDR             R1, [SP,#0xC]; Load from Memory
pbl_flash_sdcc3 20 001049ec MOV             R1, #9; Rd = Op2
pbl_flash_sdcc3 21 00104a0c MOV             R5, R0; Rd = Op2
pbl_flash_sdcc3 22 00104a20 LDR             R3, [R4,#0x20]; a4
pbl_flash_sdcc3 23 00104a2c MOV             R1, #0x81D; a2
pbl_flash_sdcc3 24 00104a3c MOV             R0, #6; Rd = Op2
pbl_flash_sdcc3 25 00104a7c MOV             R5, R8; Rd = Op2
pbl_flash_sdcc3 26 00104a88 MOV             R0, #0xD; Rd = Op2
pbl_flash_sdcc3 27 00104acc MOV             R0, #0x64; Rd = Op2
pbl_flash_sdcc3 28 00104ae4 MOVS            R5, R9; Rd = Op2
pbl_flash_sdcc3 29 00104aec B               loc_104AF8; Branch
pbl_flash_sdcc3 30 00104af0 MOV             R9, #0; Rd = Op2
pbl_flash_sdcc3 31 00104af8 LDR             R3, [R8,#0x30]; a4
pbl_flash_sdcc3 32 00104b08 CMP             R3, #1; Set cond. codes on Op1 - Op2
pbl_flash_sdcc3 33 00104b14 CMP             R3, #2; Set cond. codes on Op1 - Op2
pbl_flash_sdcc3 34 00104b20 CMP             R3, #3; Set cond. codes on Op1 - Op2
pbl_flash_sdcc3 35 00104b28 MOV             R1, #0x6B4; a2
pbl_flash_sdcc3 36 00104b38 LDR             R0, [R8,#0x34]; Load from Memory
pbl_flash_sdcc3 37 00104b54 CMP             R5, #0; Set cond. codes on Op1 - Op2
pbl_flash_sdcc3 38 00104b5c MOV             R0, R4; Rd = Op2
pbl_flash_sdcc3 39 00104b6c CMP             R5, #0; Set cond. codes on Op1 - Op2
pbl_flash_sdcc3 40 00104b74 LDR             R0, =dword_10F75C; Load from Memory
pbl_flash_sdcc3 41 00104bbc LDRB            R0, [SP,#0xFB]; Load from Memory
pbl_flash_sdcc3 42 00104bf4 AND             R1, R0, #0x38; Rd = Op1 & Op2
pbl_flash_sdcc3 43 00104c04 CMP             R1, #1; Set cond. codes on Op1 - Op2
pbl_flash_sdcc3 44 00104c10 CMP             R1, #2; Set cond. codes on Op1 - Op2
pbl_flash_sdcc3 45 00104c1c LDR             R0, [R4,#0]; Load from Memory
pbl_flash_sdcc3 46 00104c28 B               loc_104C4C; Branch
pbl_flash_sdcc3 47 00104c2c STR             R0, [R4,#0x40]; Store to Memory
pbl_flash_sdcc3 48 00104c3c LDRB            R1, [SP,#0x11F]; Load from Memory
pbl_flash_sdcc3 49 00104c48 STR             R0, [R4,#0x24]; Store to Memory
pbl_flash_sdcc3 50 00104c4c LDR             R0, [R7,#0x10]; Load from Memory
pbl_flash_sdcc3 51 00104c68 LDR             R0, [SP,#0x248]; Load from Memory
pbl_flash_sdcc3 52 00104c74 CMN             R4, #1; Set cond. codes on Op1 + Op2
pbl_flash_sdcc3 53 00104c80 MOV             R2, #5; Rd = Op2
pbl_flash_sdcc3 54 00104c90 MOV             R0, R10; Rd = Op2
pbl_flash_sdcc3 55 00104c94 ADD             SP, SP, #0x24C; Rd = Op1 + Op2
pbl_flash_sdcc3 56 0010f0d4 B               loc_10F0D4; Branch
sub_104C9C 0 00104c9c STMFD           SP!, {R4-R7,LR}; Store Block to Memory
sub_104C9C 1 00104cb4 MOV             R3, #0; a4
sub_104C9C 2 00104cc8 BL              get_pbl_struct_ptr; Branch with Link
sub_104C9C 3 00104ce4 MOV             R3, #0; a4
sub_104C9C 4 00104cf8 MOV             R1, #0x10; Rd = Op2
sub_104C9C 5 00104d0c MOV             R3, #0x10; a4
sub_104C9C 6 00104d20 MOV             R0, #1; Rd = Op2
sub_104C9C 7 00104d4c MOV             R3, R0; a4
sub_104C9C 8 00104d60 ADD             SP, SP, #0x14; Rd = Op1 + Op2
pbl_flash_sdcc2 0 00104d8c STMFD           SP!, {R4-R11,LR}; Store Block to Memory
pbl_flash_sdcc2 1 00104dac MOV             R3, #0; a4
pbl_flash_sdcc2 2 00104dc0 MOV             R0, #1; Rd = Op2
pbl_flash_sdcc2 3 00104e1c MOV             R0, #8; Rd = Op2
pbl_flash_sdcc2 4 00104e48 MOV             R0, #0x3E8; Rd = Op2
pbl_flash_sdcc2 5 00104e5c LDR             R0, [SP,#0]; Load from Memory
pbl_flash_sdcc2 6 00104e68 MOV             R5, #0; Rd = Op2
pbl_flash_sdcc2 7 00104e6c MOV             R0, #0x37; Rd = Op2
pbl_flash_sdcc2 8 00104e90 B               loc_104EF4; Branch
pbl_flash_sdcc2 9 00104e94 LDR             R1, [SP,#0x10]; Load from Memory
pbl_flash_sdcc2 10 00104ea8 MOV             R11, R10; Rd = Op2
pbl_flash_sdcc2 11 00104eb0 MOV             R0, #0x29; Rd = Op2
pbl_flash_sdcc2 12 00104ed4 LDR             R0, [SP,#0x10]; Load from Memory
pbl_flash_sdcc2 13 00104ee0 LDR             R0, [SP,#0x10]; Load from Memory
pbl_flash_sdcc2 14 00104ef4 MOV             R0, #0x1388; Rd = Op2
pbl_flash_sdcc2 15 00104f08 CMP             R11, #1; Set cond. codes on Op1 - Op2
pbl_flash_sdcc2 16 00104f1c MOV             R0, R4; Rd = Op2
pbl_flash_sdcc2 17 00104f2c MOV             R0, R4; Rd = Op2
pbl_flash_sdcc2 18 00104f3c MOV             R2, #1; Rd = Op2
pbl_flash_sdcc2 19 00104f9c MOV             R0, #1; Rd = Op2
pbl_flash_sdcc2 20 00104fd8 LDR             R1, [SP,#0xC]; Load from Memory
pbl_flash_sdcc2 21 00104fe8 MOV             R1, #9; Rd = Op2
pbl_flash_sdcc2 22 00105008 MOV             R5, R0; Rd = Op2
pbl_flash_sdcc2 23 0010501c MOV             R0, #0x33; Rd = Op2
pbl_flash_sdcc2 24 0010506c LDRB            R1, [R7,#0]; Load from Memory
pbl_flash_sdcc2 25 00105084 MOV             R5, R0; Rd = Op2
pbl_flash_sdcc2 26 0010508c LDR             R0, [SP,#0x28]; Load from Memory
pbl_flash_sdcc2 27 00105098 MOV             R3, R0; a4
pbl_flash_sdcc2 28 001050ac LDR             R0, [SP,#0x2C]; Load from Memory
pbl_flash_sdcc2 29 001050b8 LDR             R0, [R4,#0x34]; Load from Memory
pbl_flash_sdcc2 30 001050cc MOV             R0, R4; Rd = Op2
pbl_flash_sdcc2 31 001050dc CMP             R5, #0; Set cond. codes on Op1 - Op2
pbl_flash_sdcc2 32 001050e4 B               loc_105180; Branch
pbl_flash_sdcc2 33 00105108 MOV             R0, #0; Rd = Op2
pbl_flash_sdcc2 34 0010515c LDR             R1, [R7,#0x34]; Load from Memory
pbl_flash_sdcc2 35 00105174 MOV             R5, R0; Rd = Op2
pbl_flash_sdcc2 36 0010517c B               loc_1050CC; Branch
pbl_flash_sdcc2 37 00105180 LDR             R0, [R6,#0x10]; Load from Memory
pbl_flash_sdcc2 38 0010519c MOV             R1, R0; Rd = Op2
pbl_flash_sdcc2 39 001051b0 CMP             R9, #3; Set cond. codes on Op1 - Op2
pbl_flash_sdcc2 40 001051b8 MOV             R0, #0; Rd = Op2
pbl_flash_sdcc2 41 001051c0 ADD             SP, SP, #0x34; Rd = Op1 + Op2
sub_1051CC 0 001051cc STMFD           SP!, {R4,LR}; Store Block to Memory
sub_1051CC 1 001051e8 MOV             R3, #0; a4
sub_1051CC 2 001051fc LDR             R0, [R4,#0x2C]; Load from Memory
get_pbl_struct_ptr 0 00105260 LDR             R0, =pblStruct; Load from Memory
sub_10526C 0 0010526c MOV             R0, #0xA6000; Rd = Op2
pbl_sense_jtag 0 0010527c STMFD           SP!, {R4-R6,LR}; Store Block to Memory
pbl_sense_jtag 1 00105288 MOV             R3, #0; a4
pbl_sense_jtag 2 0010529c MOV             R0, #0; Rd = Op2
pbl_sense_jtag 3 001052b4 LDR             R0, [R3,#0x2C]; Load from Memory
pbl_sense_jtag 4 001052c4 MOV             R3, R5; a4
pbl_sense_jtag 5 001052d8 STR             R5, [R4,#4]; Store to Memory
pbl_sense_jtag 6 001052dc MOV             R0, #0; Rd = Op2
pbl_sense_jtag 7 001052e4 LDR             R0, [R3,#0x6C]; Load from Memory
pbl_sense_jtag 8 001052f4 STR             R2, [R4,#4]!; Store to Memory
pbl_sense_jtag 9 00105304 LDR             R12, =0x193D000; Load from Memory
pbl_sense_jtag 10 00105320 CMP             R0, #2; Set cond. codes on Op1 - Op2
pbl_sense_jtag 11 00105328 CMP             R0, #3; Set cond. codes on Op1 - Op2
pbl_sense_jtag 12 00105330 B               loc_105344; Branch
pbl_sense_jtag 13 00105334 MOV             R0, #0x80; Rd = Op2
pbl_sense_jtag 14 00105344 MOV             R0, #0x81; Rd = Op2
pbl_sense_jtag 15 00105350 STR             R0, [R4,#0x30]; Store to Memory
pbl_sense_jtag 16 00105354 MOV             R0, #0xFFF0; Rd = Op2
pbl_sense_jtag 17 0010536c B               loc_1052DC; Branch
sub_105390 0 00105390 MOV             R0, #0xA6000; Rd = Op2
sub_1053A8 0 001053a8 MOV             R0, #0xA6000; Rd = Op2
sub_1053A8 1 0010f1c8 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_1053B8 0 001053b8 MOV             R0, #0xA6000; Rd = Op2
sub_105404 0 00105404 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_10542C 0 0010542c LDR             R1, =0x119D000; Load from Memory
pbl_elf_loader 0 00105488 STMFD           SP!, {R4-R12,LR}; Store Block to Memory
pbl_elf_loader 1 001054a8 MOV             R3, #0x2C0; a4
pbl_elf_loader 2 001054bc CMP             R4, #0; Set cond. codes on Op1 - Op2
pbl_elf_loader 3 001054c4 MOV             R3, #0; a4
pbl_elf_loader 4 001054d8 LDR             R0, [R4,#4]; Load from Memory
pbl_elf_loader 5 001054e4 MOV             R3, #0; a4
pbl_elf_loader 6 001054f8 LDR             R0, [R4,#8]; Load from Memory
pbl_elf_loader 7 00105504 MOV             R3, #0; a4
pbl_elf_loader 8 00105518 BL              sub_10A040; Branch with Link
pbl_elf_loader 9 00105524 MOV             R3, R0; a4
pbl_elf_loader 10 00105538 LDR             R9, =unk_8003DC0; Load from Memory
pbl_elf_loader 11 00105560 MOV             R3, #0x34; a4
pbl_elf_loader 12 00105574 LDR             R0, =unk_8003DC0; Load from Memory
pbl_elf_loader 13 00105584 ORR             R2, R0, #0xA0000; a3
pbl_elf_loader 14 00105598 LDRH            R0, [R9,#0x2C]; Load from Memory
pbl_elf_loader 15 001055b8 LDRH            R0, [R9,#0x2C]; Load from Memory
pbl_elf_loader 16 001055d0 LDRH            R0, [R9,#0x2C]; Load from Memory
pbl_elf_loader 17 001055e4 ADD             R1, R9, R5,LSL#5; Rd = Op1 + Op2
pbl_elf_loader 18 001055f8 ADD             R5, R5, #1; Rd = Op1 + Op2
pbl_elf_loader 19 00105604 LDR             R0, [R9,#0x2B8]; Load from Memory
pbl_elf_loader 20 00105610 B               loc_105744; Branch
pbl_elf_loader 21 00105614 STR             R5, [R9,#0x2B4]; Store to Memory
pbl_elf_loader 22 00105634 LDR             R3, [R5,#0x48]; a4
pbl_elf_loader 23 00105648 LDR             R0, [R4,#0]; Load from Memory
pbl_elf_loader 24 00105654 MOV             R3, #0; a4
pbl_elf_loader 25 00105668 LDR             R6, [R4,#0]; Load from Memory
pbl_elf_loader 26 00105678 LDR             R0, =loc_10D33C; a1
pbl_elf_loader 27 0010568c CMP             R5, #0; Set cond. codes on Op1 - Op2
pbl_elf_loader 28 00105694 MOV             R3, #0; a4
pbl_elf_loader 29 001056a8 CMP             R6, #0; Set cond. codes on Op1 - Op2
pbl_elf_loader 30 001056b0 MOV             R3, #0; a4
pbl_elf_loader 31 001056c4 LDR             R0, [R5,#0x14]; Load from Memory
pbl_elf_loader 32 001056d4 MOV             R2, R10; a3
pbl_elf_loader 33 001056e4 TST             R6, #3; Set cond. codes on Op1 & Op2
pbl_elf_loader 34 001056ec MOV             R3, R6; a4
pbl_elf_loader 35 00105700 LDR             R2, [R5,#0x10]; Load from Memory
pbl_elf_loader 36 0010570c LDR             R3, [R4,#4]; Load from Memory
pbl_elf_loader 37 00105724 LDR             R3, [R5,#0x10]; a4
pbl_elf_loader 38 00105738 LDR             R0, [R4,#0]; Load from Memory
pbl_elf_loader 39 00105744 LDR             R2, =0x120200; a3
pbl_elf_loader 40 00105758 LDR             R3, [R4,#8]; Load from Memory
pbl_elf_loader 41 00105774 MOV             R3, R0; a4
pbl_elf_loader 42 00105788 LDRH            R0, [R9,#0x2C]; Load from Memory
pbl_elf_loader 43 00105798 ADD             R6, R9, R7,LSL#5; Rd = Op1 + Op2
pbl_elf_loader 44 001057ac LDR             R0, [R6,#0x3C]; Load from Memory
pbl_elf_loader 45 001057c0 ADD             R5, R6, #0x34; Rd = Op1 + Op2
pbl_elf_loader 46 001057d0 MOV             R3, #0; a4
pbl_elf_loader 47 001057e4 CMP             R5, #0; Set cond. codes on Op1 - Op2
pbl_elf_loader 48 001057ec MOV             R3, #0; a4
pbl_elf_loader 49 00105800 CMP             R6, #0; Set cond. codes on Op1 - Op2
pbl_elf_loader 50 00105808 MOV             R3, #0; a4
pbl_elf_loader 51 0010581c LDR             R0, [R5,#0x14]; Load from Memory
pbl_elf_loader 52 0010582c MOV             R2, R10; a3
pbl_elf_loader 53 0010583c TST             R6, #3; Set cond. codes on Op1 & Op2
pbl_elf_loader 54 00105844 MOV             R3, R6; a4
pbl_elf_loader 55 00105858 B               loc_105898; Branch
pbl_elf_loader 56 00105898 LDR             R2, [R5,#0x10]; Load from Memory
pbl_elf_loader 57 001058a4 LDR             R3, [R4,#4]; Load from Memory
pbl_elf_loader 58 001058bc LDR             R3, [R5,#0x10]; a4
pbl_elf_loader 59 001058d0 LDRH            R0, [R9,#0x2C]; Load from Memory
pbl_elf_loader 60 001058e0 LDR             R0, [R4,#0xC]; Load from Memory
pbl_elf_loader 61 001058f0 MOV             R3, R0; a4
pbl_elf_loader 62 00105904 MOV             R0, #0; Rd = Op2
init_pblStruct 0 001059e0 LDR             R0, =dword_10D5F0; Load from Memory
init_pblStruct 1 00105a08 LDR             R3, [R4,#0]; a4
init_pblStruct 2 00105a1c LDR             R0, =dword_10D5FC; Load from Memory
init_pblStruct 3 00105a38 LDR             R3, [R4,#0]; a4
init_pblStruct 4 00105a50 LDMFD           SP!, {R4,PC}; Load Block from Memory
init_pblStruct 5 00103e8c STMFD           SP!, {R4-R10,LR}; Store Block to Memory
pbl_stack_init 0 00105a84 LDR             R1, =dword_205400; Load from Memory
pbl_stack_init 1 00105aa0 LDR             R0, =dword_205000; Load from Memory
pbl_stack_init 2 00105ab4 MOV             R3, #0x400; a4
pbl_stack_init 3 00105ac8 MOV             R0, #0; Rd = Op2
pbl_stack_init 4 00105acc LDMFD           SP!, {R4,PC}; Load Block from Memory
pbl_mc_init5 0 00105af0 STMFD           SP!, {R4-R8,LR}; Store Block to Memory
pbl_mc_init5 1 00105afc MOV             R3, #0; a4
pbl_mc_init5 2 00105b10 LDR             R0, =dword_8003100; Load from Memory
pbl_mc_init5 3 00105bac MOV             R3, #0x20; a4
pbl_mc_init5 4 00105bc0 LDR             R0, [R4,#0x28]; Load from Memory
pbl_mc_init5 5 00105bcc MOV             R0, R4; a1
pbl_mc_init5 6 00105bdc MOV             R0, R4; a1
pbl_mc_init5 7 00105bec MOV             R0, R4; Rd = Op2
pbl_mc_init5 8 00105c04 ORR             R2, R5, #0x20000; a3
pbl_mc_init5 9 00105c18 MOV             R0, R5; Rd = Op2
pbl_mc_init5 10 00105c1c LDMFD           SP!, {R4-R8,PC}; Load Block from Memory
pbl_sahara2 0 00105cbc STMFD           SP!, {R4-R6,LR}; Store Block to Memory
pbl_sahara2 1 00105ccc MOV             R3, #0; a4
pbl_sahara2 2 00105ce0 LDR             R1, [R4,#0x38]; Load from Memory
pbl_sahara3 0 00105d18 STMFD           SP!, {R4,LR}; Store Block to Memory
pbl_sahara3 1 00105d30 BL              0x11705C; Branch with Link
pbl_sahara3 2 00105d3c MOV             R3, #0; a4
pbl_sahara3 3 00105d50 LDR             R0, =loc_111000; Load from Memory
pbl_sahara3 4 00105d68 LDMFD           SP!, {R4,PC}; Load Block from Memory
sub_105D8C 0 00105d8c MOV             R0, #0x200; Rd = Op2
sub_105D94 0 00105d94 LDR             R0, =loc_111000; Load from Memory
sub_105D94 1 00111bc0 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_105D94 2 00111bd0 LDR             R0, =dword_20563C; Load from Memory
sub_105D94 3 00111be0 LDMFD           SP!, {R4,PC}; Load Block from Memory
sub_105DAC 0 00105dac LDR             R12, =loc_111000; Load from Memory
sub_105DAC 1 00111cb4 STMFD           SP!, {R4-R10,LR}; Store Block to Memory
sub_105DBC 0 00105dbc LDR             R0, =loc_111000; Load from Memory
sub_105DE8 0 00105de8 LDR             R12, =loc_111000; Load from Memory
sub_105DE8 1 00111e2c STMFD           SP!, {R4-R8,LR}; Store Block to Memory
sub_105DF8 0 00105df8 STMFD           SP!, {R4,LR}; Store Block to Memory
pbl_sahara 0 00105e14 CMP             R0, #0; Set cond. codes on Op1 - Op2
pbl_sahara 1 00105e20 MOV             R3, #0; a4
pbl_sahara 2 00105e34 LDR             R0, =unk_800305C; Load from Memory
pbl_sahara 3 00105e44 MOV             R3, R0; a4
pbl_sahara 4 00105e58 LDR             R0, =loc_111000; Load from Memory
sub_105E90 0 00105e90 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_105E90 1 00105eb0 CMP             R3, #8; switch 8 cases
sub_105E90 2 00105ec0 B               loc_105F8C; jumptable 00105EBC default case
sub_105E90 3 00105ee4 CMP             R5, #0; Set cond. codes on Op1 - Op2
sub_105E90 4 00105ef0 B               loc_105F94; Branch
sub_105E90 5 00105ef4 STR             R12, [R1,#0]; jumptable 00105EBC case 0
sub_105E90 6 00105efc LDR             R0, =unk_8003514; jumptable 00105EBC case 1
sub_105E90 7 00105f1c MOV             R0, #0x18; jumptable 00105EBC case 2
sub_105E90 8 00105f40 MOV             R0, #0x60; jumptable 00105EBC case 3
sub_105E90 9 00105f64 MOV             R0, #0x100; jumptable 00105EBC case 6
sub_105E90 10 00105f74 STR             R2, [R1,#0]; jumptable 00105EBC case 7
sub_105E90 11 00105f8c MOV             R4, #0x1F; jumptable 00105EBC default case
sub_105E90 12 00105f94 STR             R4, [R5,#0]; Store to Memory
sub_105E90 13 00105f98 LDMFD           SP!, {R4-R6,PC}; Load Block from Memory
sub_105FB0 0 00105fb0 MOV             R0, #0x1000; Rd = Op2
some_sahara_stuff 0 00105fb8 STMFD           SP!, {R4-R8,LR}; Store Block to Memory
some_sahara_stuff 1 00105fc4 MOV             R3, #0; a4
some_sahara_stuff 2 00105fd8 LDR             R0, [R6,#0x28]; Load from Memory
some_sahara_stuff 3 00105fe4 MOV             R3, #0; a4
some_sahara_stuff 4 00105ff8 LDR             R0, =loc_111000; Load from Memory
some_sahara_stuff 5 0010600c MOV             R3, #0x4000; a4
some_sahara_stuff 6 00106020 LDR             R1, =unk_8003154; Load from Memory
some_sahara_stuff 7 00106054 MOV             R3, R5; a4
some_sahara_stuff 8 00106068 BL              get_pbl_struct_ptr; Branch with Link
some_sahara_stuff 9 00106078 CMP             R5, #3; Set cond. codes on Op1 - Op2
some_sahara_stuff 10 00106080 B               loc_1060E0; Branch
some_sahara_stuff 11 00106084 LDR             R0, [R0,#0x30]; Load from Memory
some_sahara_stuff 12 00106090 CMP             R0, #2; Set cond. codes on Op1 - Op2
some_sahara_stuff 13 00106098 CMP             R5, #3; Set cond. codes on Op1 - Op2
some_sahara_stuff 14 001060a0 CMP             R5, #0; Set cond. codes on Op1 - Op2
some_sahara_stuff 15 001060a8 MOV             R3, R4; a4
some_sahara_stuff 16 001060bc LDR             R0, [R7,#8]; Load from Memory
some_sahara_stuff 17 001060d4 B               loc_1060E8; Branch
some_sahara_stuff 18 001060d8 CMP             R5, #3; Set cond. codes on Op1 - Op2
some_sahara_stuff 19 001060e0 MOV             R4, #0xD; Rd = Op2
some_sahara_stuff 20 001060e8 LDR             R2, =0xC8300; a3
some_sahara_stuff 21 001060fc LDR             R1, [R6,#0x28]; Load from Memory
sub_10613C 0 0010613c B               sub_10F450; Branch
sub_10613C 1 0010f450 CMP             R2, #0; Set cond. codes on Op1 - Op2
j_memset 0 00106140 B               memset; Branch
j_memset 1 0010f660 CMP             R2, #0; Set cond. codes on Op1 - Op2
sub_106144 0 00106144 MOV             R3, #0; a4
sub_106144 1 00103e8c STMFD           SP!, {R4-R10,LR}; Store Block to Memory
sub_10616C 0 0010616c B               sub_10371C; Branch
sub_10616C 1 0010371c STMFD           SP!, {R4-R8,LR}; Store Block to Memory
sub_106170 0 00106170 B               sub_1036DC; Branch
sub_106170 1 001036dc LDR             R3, =0xFFDF69C3; Load from Memory
sub_106174 0 00106174 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_106174 1 00106184 MOV             R3, #0; a4
sub_106174 2 00106198 MOV             R0, R5; Rd = Op2
sub_1061C4 0 001061c4 STMFD           SP!, {R0-R11,LR}; Store Block to Memory
sub_1061C4 1 001061f0 MOV             R3, #0; a4
sub_1061C4 2 00106204 LDR             R0, [R4,#0]; Load from Memory
sub_1061C4 3 00106214 LDR             R0, [R4,#0x40]; Load from Memory
sub_1061C4 4 00106224 CMP             R1, #1; Set cond. codes on Op1 - Op2
sub_1061C4 5 0010622c CMP             R1, #2; Set cond. codes on Op1 - Op2
sub_1061C4 6 00106234 B               loc_106268; Branch
sub_1061C4 7 00106238 ORR             R0, R0, #1; Rd = Op1 | Op2
sub_1061C4 8 00106248 ORR             R0, R0, #2; Rd = Op1 | Op2
sub_1061C4 9 00106254 MOV             R1, #1; Rd = Op2
sub_1061C4 10 00106268 LDR             R0, [SP,#0x54]; Load from Memory
sub_1061C4 11 00106298 LDR             R0, [R4,#0x14]; Load from Memory
sub_1061C4 12 001062dc LDR             R0, [R4,#0x18]; Load from Memory
sub_1061C4 13 001062e8 LDR             R0, [R4,#0x34]; Load from Memory
sub_1061C4 14 00106308 STR             R8, [SP,#0]; Store to Memory
sub_1061C4 15 00106328 CMP             R7, #0; Set cond. codes on Op1 - Op2
sub_1061C4 16 00106334 MOV             R0, #0xC; Rd = Op2
sub_1061C4 17 0010635c LDR             R0, [R4,#0x34]; Load from Memory
sub_1061C4 18 00106370 LDR             R0, [R4,#0]; Load from Memory
sub_1061C4 19 00106380 CMP             R6, #0; Set cond. codes on Op1 - Op2
sub_1061C4 20 00106388 MOV             R1, #0; Rd = Op2
sub_1061C4 21 00106398 ORRS            R0, R5, R9; Rd = Op1 | Op2
sub_1061C4 22 001063a0 MOV             R0, #1; Rd = Op2
sub_1061C4 23 001063a4 ADD             SP, SP, #0x5C; Rd = Op1 + Op2
sub_1063C4 0 001063c4 CMP             R1, #0; Set cond. codes on Op1 - Op2
sub_1063C4 1 001063dc LDR             R3, [R1,#8]; Load from Memory
sub_1063C4 2 001063e8 LDR             R1, [R1,#0]; Load from Memory
sub_1063C4 3 001063f8 MOV             R0, #3; Rd = Op2
sub_1063C4 4 001063fc BX              LR; Branch to/from Thumb mode
sub_106400 0 00106400 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_106400 1 0010641c LDR             R1, [R4,#8]; Load from Memory
sub_106400 2 00106430 ADD             R1, R1, R0; Rd = Op1 + Op2
sub_106400 3 00106444 BL              sub_10F154; Branch with Link
sub_106400 4 00106454 LDR             R1, [R4,#8]; Load from Memory
sub_106400 5 00106460 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_106400 6 00106468 MOV             R5, #3; Rd = Op2
sub_106400 7 00106470 STR             R0, [R6,#8]; Store to Memory
sub_106400 8 0010648c MOV             R0, R5; Rd = Op2
sub_106494 0 00106494 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_106494 1 001064b0 LDR             R1, [R0,#8]; Load from Memory
sub_106494 2 001064bc LDR             R1, [R0,#0]; Load from Memory
sub_106494 3 001064c8 ADD             R2, R1, #1; Rd = Op1 + Op2
sub_106494 4 001064dc MOV             R4, #3; Rd = Op2
sub_106494 5 001064e4 MOV             R0, R1; Rd = Op2
sub_106494 6 001064f8 MOV             R0, R4; Rd = Op2
sub_106500 0 00106500 STMFD           SP!, {R4-R10,LR}; Store Block to Memory
sub_106500 1 0010652c MOV             R0, #0; Rd = Op2
sub_106500 2 00106548 MOV             R0, R4; Rd = Op2
sub_106500 3 0010655c BL              sub_10F154; Branch with Link
sub_106500 4 00106574 ADD             R0, R4, #1; Rd = Op1 + Op2
sub_106500 5 00106588 MOV             R0, R4; Rd = Op2
sub_106500 6 0010659c MOV             R7, #3; Rd = Op2
sub_106500 7 001065a4 SUBS            R6, R6, #1; Rd = Op1 - Op2
sub_106500 8 001065b0 CMP             R7, #0; Set cond. codes on Op1 - Op2
sub_106500 9 001065b8 MOV             R0, R7; Rd = Op2
sub_106500 10 001065bc LDMFD           SP!, {R4-R10,PC}; Load Block from Memory
sub_106500 11 001065c0 BL              sub_10F154; Branch with Link
sub_106500 12 001065cc ADD             R0, R4, R5; Rd = Op1 + Op2
sub_106500 13 001065e4 B               loc_10659C; Branch
sub_1065E8 0 001065e8 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_1065E8 1 00106608 ADD             R2, R0, #1; Rd = Op1 + Op2
sub_1065E8 2 00106618 BL              sub_10F154; Branch with Link
sub_1065E8 3 00106638 ANDS            R1, R0, #0xC0; Rd = Op1 & Op2
sub_1065E8 4 00106648 CMP             R1, #0x80; Set cond. codes on Op1 - Op2
sub_1065E8 5 00106650 STR             R2, [R4,#0]; Store to Memory
sub_1065E8 6 00106654 MOV             R0, R6; Rd = Op2
sub_1065E8 7 0010665c MOV             R6, #3; Rd = Op2
sub_106664 0 00106664 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_106664 1 00106684 LDR             R1, [R0,#8]; Load from Memory
sub_106664 2 001066a0 CMP             R2, #0; Set cond. codes on Op1 - Op2
sub_106664 3 001066a8 CMP             R1, #0xD; Set cond. codes on Op1 - Op2
sub_106664 4 001066b4 MOV             R0, R5; Rd = Op2
sub_106664 5 00106704 CMP             R1, #0xF; Set cond. codes on Op1 - Op2
sub_106664 6 0010670c MOV             R0, R5; Rd = Op2
sub_106664 7 00106790 MOV             R0, R5; Rd = Op2
sub_106664 8 001068b4 MOV             R4, #3; Rd = Op2
sub_106664 9 001068bc MOV             R0, SP; Rd = Op2
sub_106664 10 001068c8 MOV             R0, R4; Rd = Op2
sub_106664 11 001068cc ADD             SP, SP, #0x18; Rd = Op1 + Op2
sub_1068DC 0 001068dc CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_1068DC 1 001068ec LDR             R2, [R0,#8]; Load from Memory
sub_1068DC 2 001068f8 LDR             R2, [R0,#0]; Load from Memory
sub_1068DC 3 00106908 MOV             R1, #3; Rd = Op2
sub_1068DC 4 0010690c MOV             R0, R1; Rd = Op2
sub_106914 0 00106914 STMFD           SP!, {R3-R9,LR}; Store Block to Memory
sub_106914 1 0010692c LDR             R8, [R4,#8]; Load from Memory
sub_106914 2 00106938 LDR             R7, [R4,#0]; Load from Memory
sub_106914 3 00106948 LDR             R1, [R4,#4]; Load from Memory
sub_106914 4 00106954 MOV             R0, #4; Rd = Op2
sub_106914 5 00106958 LDMFD           SP!, {R3-R9,PC}; Load Block from Memory
sub_106914 6 0010695c CMP             R8, #0; Set cond. codes on Op1 - Op2
sub_106914 7 0010696c MOV             R2, SP; Rd = Op2
sub_106914 8 00106980 STR             R7, [R4],#4; Store to Memory
sub_106914 9 00106990 CMP             R9, #0; Set cond. codes on Op1 - Op2
sub_106914 10 00106998 LDR             R0, [SP,#0]; Load from Memory
sub_106914 11 001069a4 STR             R7, [R4],#4; Store to Memory
sub_106914 12 001069b8 LDR             R1, [R4,#4]; Load from Memory
sub_106914 13 001069d0 LDR             R1, [R4,#0]; Load from Memory
sub_106914 14 001069f4 MOV             R0, #3; Rd = Op2
sub_106914 15 001069fc STR             R1, [R4,#0]; Store to Memory
sub_106914 16 00106a34 LDR             R12, [R4,#0]; Load from Memory
sub_106914 17 00106a44 LDR             R12, [R4,#4]; Load from Memory
sub_106914 18 00106a54 CMP             R1, R2; Set cond. codes on Op1 - Op2
sub_106914 19 00106a5c CMP             R6, R1; Set cond. codes on Op1 - Op2
sub_106914 20 00106a64 LDMFD           SP!, {R3-R9,PC}; Load Block from Memory
sub_106A68 0 00106a68 STMFD           SP!, {R0-R2,R4,R5,LR}; Store Block to Memory
sub_106A68 1 00106a8c CMP             R1, R5; Set cond. codes on Op1 - Op2
sub_106A68 2 00106a94 MOV             R2, SP; Rd = Op2
sub_106A68 3 00106aac LDR             R0, [SP,#0]; Load from Memory
sub_106A68 4 00106abc ADD             R2, R4, #8; Rd = Op1 + Op2
sub_106A68 5 00106ad4 LDR             R2, [R4,#8]; Load from Memory
sub_106A68 6 00106ae0 MOV             R0, #3; Rd = Op2
sub_106A68 7 00106ae4 ADD             SP, SP, #0x14; Rd = Op1 + Op2
sub_106A68 8 00106aec LDR             R1, [SP,#8]; Load from Memory
sub_106A68 9 00106b04 CMP             R5, R2; Set cond. codes on Op1 - Op2
sub_106A68 10 00106b0c ADD             SP, SP, #0x14; Rd = Op1 + Op2
sub_106B14 0 00106b14 STMFD           SP!, {R4-R8,LR}; Store Block to Memory
sub_106B14 1 00106b2c LDR             R0, [R5,#0x384]; Load from Memory
sub_106B14 2 00106b3c BLS             loc_106C08; Branch
sub_106B14 3 00106b40 LDR             R1, [R6,#0]; Load from Memory
sub_106B14 4 00106b4c LDR             R0, [R6,#8]; Load from Memory
sub_106B14 5 00106b58 RSB             R0, R4, R4,LSL#4; Rd = Op2 - Op1
sub_106B14 6 00106b6c CMN             R1, #1; Set cond. codes on Op1 + Op2
sub_106B14 7 00106b7c LDR             R0, [R0,#0xC4]; Load from Memory
sub_106B14 8 00106b90 CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_106B14 9 00106b98 RSB             R0, R4, R4,LSL#4; Rd = Op2 - Op1
sub_106B14 10 00106bb8 B               loc_106BC4; Branch
sub_106B14 11 00106bbc MOV             R0, #3; Rd = Op2
sub_106B14 12 00106bc4 MOV             R7, #3; Rd = Op2
sub_106B14 13 00106bcc LDR             R0, [R5,#0x384]; Load from Memory
sub_106B14 14 00106bdc RSB             R0, R4, R4,LSL#4; Rd = Op2 - Op1
sub_106B14 15 00106bf8 LDR             R0, [R5,#0x384]; Load from Memory
sub_106B14 16 00106c08 MOV             R0, R7; Rd = Op2
sub_106C10 0 00106c10 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_106C10 1 00106c24 ADDS            R0, R4, #0x5C; Rd = Op1 + Op2
sub_106C10 2 00106c38 LDR             R2, [R1,#0xC]; Load from Memory
sub_106C10 3 00106c4c LDR             R3, [R1,#4]; Load from Memory
sub_106C10 4 00106c60 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_106C10 5 00106c68 LDR             R0, [R5,#0x88]; Load from Memory
sub_106C10 6 00106c74 LDR             R0, [R5,#0x94]; Load from Memory
sub_106C10 7 00106c88 LDR             R2, [R4,#0xC0]; Load from Memory
sub_106C10 8 00106c94 LDR             R1, [R4,#0xB8]; Load from Memory
sub_106C10 9 00106ca8 LDR             R0, [R5,#0xB0]; Load from Memory
sub_106C10 10 00106cb4 LDR             R2, [R4,#0x18]; Load from Memory
sub_106C10 11 00106cc0 MOV             R0, #1; Rd = Op2
sub_106C10 12 00106cc4 LDMFD           SP!, {R4-R6,PC}; Load Block from Memory
sub_106C10 13 00106cc8 LDR             R1, [R4,#0x10]; Load from Memory
sub_106C10 14 00106cdc LDR             R0, [R5,#0x98]; Load from Memory
sub_106C10 15 00106ce8 ADDS            R0, R4, #0x2C; Rd = Op1 + Op2
sub_106C10 16 00106cfc LDR             R2, [R3,#0xC]; Load from Memory
sub_106C10 17 00106d10 LDR             R1, [R0,#4]; Load from Memory
sub_106C10 18 00106d1c CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_106C10 19 00106d24 LDR             R0, [R4,#0xC8]; Load from Memory
sub_106C10 20 00106d30 LDR             R0, [R4,#0xC4]; Load from Memory
sub_106C10 21 00106d40 MOV             R0, #0; Rd = Op2
sub_106D7C 0 00106d7c STMFD           SP!, {R4-R7,LR}; Store Block to Memory
sub_106D7C 1 00106d9c CMP             R4, R7; Set cond. codes on Op1 - Op2
sub_106D7C 2 00106da4 ADD             SP, SP, #0xC; Rd = Op1 + Op2
sub_106D7C 3 00106db0 MOV             R2, SP; Rd = Op2
sub_106D7C 4 00106dc0 LDR             R0, [SP,#0]; Load from Memory
sub_106D7C 5 00106dd0 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_106D7C 6 00106dd8 LDR             R1, [SP,#8]; Load from Memory
sub_106D7C 7 00106dec ADD             R0, R0, R4; Rd = Op1 + Op2
sub_106D7C 8 00106df8 CMP             R7, R0; Set cond. codes on Op1 - Op2
sub_106D7C 9 00106e00 MOV             R5, #3; Rd = Op2
sub_106D7C 10 00106e04 ADD             SP, SP, #0xC; Rd = Op1 + Op2
sub_106E48 0 00106e48 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_106E48 1 00106e64 CMP             R5, #0; Set cond. codes on Op1 - Op2
sub_106E48 2 00106e6c MOV             R0, #1; Rd = Op2
sub_106E48 3 00106e8c MOV             R2, #0x80; Rd = Op2
sub_106E48 4 00106ea4 MOV             R2, #0xA1; Rd = Op2
sub_106E48 5 00106ebc CMP             R0, #3; Set cond. codes on Op1 - Op2
sub_106E48 6 00106ec8 B               loc_106EE0; Branch
sub_106E48 7 00106ecc ADD             R1, R5, #0x10; Rd = Op1 + Op2
sub_106E48 8 00106ee0 MOV             R2, #0x82; Rd = Op2
sub_106E48 9 00106ef8 MOV             R1, SP; Rd = Op2
sub_106E48 10 00106f0c MOV             R4, #3; Rd = Op2
sub_106E48 11 00106f10 MOV             R0, R4; Rd = Op2
sub_106E48 12 00106f14 ADD             SP, SP, #0x18; Rd = Op1 + Op2
sub_106F1C 0 00106f1c STMFD           SP!, {R4-R9,LR}; Store Block to Memory
sub_106F1C 1 00106f3c MOV             R2, #0x10; Rd = Op2
sub_106F1C 2 00106f50 LDR             R0, [SP,#8]; Load from Memory
sub_106F1C 3 00106f68 MOV             R2, #1; Rd = Op2
sub_106F1C 4 00106f80 CMP             R0, #1; Set cond. codes on Op1 - Op2
sub_106F1C 5 00106f8c B               loc_107018; Branch
sub_106F1C 6 00106f90 STR             R7, [R4,#0x50]!; Store to Memory
sub_106F1C 7 00106fa0 ADD             R1, SP, #0x18; Rd = Op1 + Op2
sub_106F1C 8 00106fb4 STR             R9, [R4,#0x54]; Store to Memory
sub_106F1C 9 00106fd8 CMP             R0, #1; Set cond. codes on Op1 - Op2
sub_106F1C 10 00106fe8 B               loc_107018; Branch
sub_106F1C 11 00106fec LDR             R0, [SP,#0x14]; Load from Memory
sub_106F1C 12 00106ff8 LDR             R0, [SP,#0xC]; Load from Memory
sub_106F1C 13 00107004 MOV             R1, SP; Rd = Op2
sub_106F1C 14 00107018 MOV             R5, #3; Rd = Op2
sub_106F1C 15 0010701c MOV             R0, R5; Rd = Op2
sub_106F1C 16 00107020 ADD             SP, SP, #0x1C; Rd = Op1 + Op2
sub_107028 0 00107028 STMFD           SP!, {R0-R11,LR}; Store Block to Memory
sub_107028 1 00107058 CMP             R1, #0; Set cond. codes on Op1 - Op2
sub_107028 2 00107068 ADD             R9, R0, R1; Rd = Op1 + Op2
sub_107028 3 00107074 CMP             R10, #0; Set cond. codes on Op1 - Op2
sub_107028 4 0010707c STR             R0, [SP,#4]; Store to Memory
sub_107028 5 001070a0 MOV             R2, #1; Rd = Op2
sub_107028 6 001070b8 CMP             R5, #0; Set cond. codes on Op1 - Op2
sub_107028 7 001070c8 CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_107028 8 001070d0 B               loc_107108; Branch
sub_107028 9 001070d4 ADD             SP, SP, #0x1C; Rd = Op1 + Op2
sub_107028 10 001070e0 LDR             R0, =0x2FFFD; Load from Memory
sub_107028 11 001070ec B               loc_10711C; Branch
sub_107028 12 001070f0 ADD             R0, R5, #1; Rd = Op1 + Op2
sub_107028 13 00107100 MOV             R4, #1; Rd = Op2
sub_107028 14 00107108 LDR             R0, [SP,#0]; Load from Memory
sub_107028 15 00107114 CMP             R8, #0x10; Set cond. codes on Op1 - Op2
sub_107028 16 0010711c MOV             R0, #0; Rd = Op2
sub_107028 17 00107128 CMP             R10, #1; Set cond. codes on Op1 - Op2
sub_107028 18 00107130 LDR             R0, [SP,#0]; Load from Memory
sub_107028 19 00107140 AND             R2, R11, #0xFF; Rd = Op1 & Op2
sub_107028 20 00107158 LDR             R0, [R6,#0x384]; Load from Memory
sub_107028 21 00107184 MOV             R0, #0; Rd = Op2
sub_107028 22 001071a4 MOV             R4, #1; Rd = Op2
sub_107028 23 001071ac STR             R0, [SP,#0xC]; Store to Memory
sub_107028 24 001071cc LDR             R0, [R5,#0x30]!; Load from Memory
sub_107028 25 001071e0 ADD             R7, R7, #1; Rd = Op1 + Op2
sub_107028 26 001071ec LDR             R0, [R6,#0x384]; Load from Memory
sub_107028 27 001071f8 CMP             R10, #1; Set cond. codes on Op1 - Op2
sub_107028 28 00107200 SUB             R0, R8, R11; Rd = Op1 - Op2
sub_107028 29 00107210 MOV             R4, #3; Rd = Op2
sub_107028 30 00107218 AND             R2, R0, #0xFF; Rd = Op1 & Op2
sub_107028 31 00107230 LDR             R0, [SP,#0xC]; Load from Memory
sub_107028 32 0010723c BL              sub_10F154; Branch with Link
sub_107028 33 0010725c ADD             SP, SP, #0x1C; Rd = Op1 + Op2
sub_107270 0 00107270 STMFD           SP!, {R4-R10,LR}; Store Block to Memory
sub_107270 1 00107290 CMP             R8, R1; Set cond. codes on Op1 - Op2
sub_107270 2 00107298 ADD             SP, SP, #0x28; Rd = Op1 + Op2
sub_107270 3 001072a4 ADD             R2, SP, #0xC; Rd = Op1 + Op2
sub_107270 4 001072b4 LDR             R0, [SP,#0xC]; Load from Memory
sub_107270 5 001072c8 LDR             R1, [SP,#0x14]; Load from Memory
sub_107270 6 001072e0 CMP             R0, #0x10000; Set cond. codes on Op1 - Op2
sub_107270 7 001072e8 MOV             R2, #0x10; Rd = Op2
sub_107270 8 00107300 MOV             R0, SP; Rd = Op2
sub_107270 9 0010732c CMP             R7, #0; Set cond. codes on Op1 - Op2
sub_107270 10 00107334 B               loc_107378; Branch
sub_107270 11 00107338 MOV             R2, #2; Rd = Op2
sub_107270 12 00107358 MOV             R7, #3; Rd = Op2
sub_107270 13 00107360 LDR             R0, [R6,#4]; Load from Memory
sub_107270 14 00107374 B               loc_107358; Branch
sub_107270 15 00107378 MOV             R2, #2; Rd = Op2
sub_107270 16 00107390 ADD             R1, R5, #0x1C; Rd = Op1 + Op2
sub_107270 17 001073a4 MOV             R2, #0; Rd = Op2
sub_107270 18 001073bc MOV             R1, R5; Rd = Op2
sub_107270 19 001073d0 MOV             R2, R9; Rd = Op2
sub_107270 20 001073e8 ADD             R1, R5, #0xEC; Rd = Op1 + Op2
sub_107270 21 001073fc LDR             R0, [R5,#0xEC]; Load from Memory
sub_107270 22 00107408 MOV             R1, #0xFFFFFFFF
sub_107270 23 00107420 MOV             R0, SP; Rd = Op2
sub_107270 24 0010743c CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_107270 25 00107444 MOV             R1, R6; Rd = Op2
sub_107270 26 00107458 MOV             R0, SP; Rd = Op2
sub_107270 27 00107474 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_107270 28 0010747c MOV             R1, R6; Rd = Op2
sub_107270 29 00107490 LDR             R0, [R5,#0]; Load from Memory
sub_107270 30 0010749c MOV             R2, #0xA3; Rd = Op2
sub_107270 31 001074b4 MOV             R1, SP; Rd = Op2
sub_107270 32 001074c8 LDR             R0, [SP,#0xC]; Load from Memory
sub_107270 33 001074d4 LDR             R1, [R5,#0xE0]; Load from Memory
sub_107270 34 001074e4 SUB             R0, R0, R1; Rd = Op1 - Op2
sub_107270 35 001074f8 ADD             R0, SP, #0xC; Rd = Op1 + Op2
sub_107270 36 00107508 LDR             R0, [R5,#0x1C]; Load from Memory
sub_107270 37 00107514 MOV             R4, #9; Rd = Op2
sub_107270 38 0010751c ADD             R0, SP, #0xC; Rd = Op1 + Op2
sub_107270 39 0010752c MOV             R4, #3; Rd = Op2
sub_107270 40 00107530 ADD             SP, SP, #0x28; Rd = Op1 + Op2
sub_10753C 0 0010753c STMFD           SP!, {R0-R2,R4-R11,LR}; Store Block to Memory
sub_10753C 1 0010757c CMP             R10, #0; Set cond. codes on Op1 - Op2
sub_10753C 2 00107584 MOV             R0, #2; Rd = Op2
sub_10753C 3 00107590 MOV             R2, #0x10; Rd = Op2
sub_10753C 4 001075a8 MOV             R0, #3; Rd = Op2
sub_10753C 5 001075b4 LDR             R0, [SP,#0x64]; Load from Memory
sub_10753C 6 001075d4 LDR             R11, [SP,#8]; Load from Memory
sub_10753C 7 001075e8 B               loc_10766C; Branch
sub_10753C 8 001075ec CMP             R4, #0x11; Set cond. codes on Op1 - Op2
sub_10753C 9 001075f4 ADD             R0, R4, #0xA; Rd = Op1 + Op2
sub_10753C 10 00107600 MOV             R2, #0xA; Rd = Op2
sub_10753C 11 00107618 ADD             R0, R4, #5; Rd = Op1 + Op2
sub_10753C 12 00107624 MOV             R2, #5; Rd = Op2
sub_10753C 13 0010763c MOV             R2, #5; Rd = Op2
sub_10753C 14 00107654 MOV             R2, #5; Rd = Op2
sub_10753C 15 0010766c ADD             R0, R4, #4; Rd = Op1 + Op2
sub_10753C 16 00107678 MOV             R2, #4; Rd = Op2
sub_10753C 17 00107694 ADD             R0, R4, #6; Rd = Op1 + Op2
sub_10753C 18 001076a0 MOV             R2, #6; Rd = Op2
sub_10753C 19 001076bc B               loc_107AA8; Branch
sub_10753C 20 001076c0 MOV             R9, #0; Rd = Op2
sub_10753C 21 001076d8 LDR             R0, [SP,#0]; Load from Memory
sub_10753C 22 00107714 LDR             R0, [SP,#0xC]; Load from Memory
sub_10753C 23 00107724 LDR             R0, [SP,#0xC]; Load from Memory
sub_10753C 24 0010773c LDR             R0, [SP,#0xC]; Load from Memory
sub_10753C 25 0010774c LDR             R0, [SP,#0xC]; Load from Memory
sub_10753C 26 0010775c LDR             R0, [SP,#0xC]; Load from Memory
sub_10753C 27 00107770 LDR             R0, [SP,#0xC]; Load from Memory
sub_10753C 28 001077b0 STR             R8, [R10,#0x24]; Store to Memory
sub_10753C 29 001077bc MOV             R8, #0; Rd = Op2
sub_10753C 30 001077d4 LDR             R0, [SP,#0]; Load from Memory
sub_10753C 31 00107810 LDR             R0, [SP,#0xC]; Load from Memory
sub_10753C 32 00107820 LDR             R0, [SP,#0xC]; Load from Memory
sub_10753C 33 00107838 LDR             R0, [SP,#0xC]; Load from Memory
sub_10753C 34 00107848 LDR             R0, [SP,#0xC]; Load from Memory
sub_10753C 35 00107858 LDR             R0, [SP,#0xC]; Load from Memory
sub_10753C 36 0010786c LDR             R0, [SP,#0xC]; Load from Memory
sub_10753C 37 001078ac STRD            R8, [R10,#0]; Store pair of registers
sub_10753C 38 001078b4 MOV             R9, #0; Rd = Op2
sub_10753C 39 001078cc LDR             R0, [SP,#0]; Load from Memory
sub_10753C 40 00107908 LDR             R0, [SP,#0xC]; Load from Memory
sub_10753C 41 00107918 LDR             R0, [SP,#0xC]; Load from Memory
sub_10753C 42 00107930 LDR             R0, [SP,#0xC]; Load from Memory
sub_10753C 43 00107940 LDR             R0, [SP,#0xC]; Load from Memory
sub_10753C 44 00107950 LDR             R0, [SP,#0xC]; Load from Memory
sub_10753C 45 00107964 LDR             R0, [SP,#0xC]; Load from Memory
sub_10753C 46 001079a4 STR             R8, [R10,#0xC]; Store to Memory
sub_10753C 47 001079b0 MOV             R8, #0; Rd = Op2
sub_10753C 48 001079c8 LDR             R0, [SP,#0]; Load from Memory
sub_10753C 49 00107a04 LDR             R0, [SP,#0xC]; Load from Memory
sub_10753C 50 00107a14 LDR             R0, [SP,#0xC]; Load from Memory
sub_10753C 51 00107a2c LDR             R0, [SP,#0xC]; Load from Memory
sub_10753C 52 00107a3c LDR             R0, [SP,#0xC]; Load from Memory
sub_10753C 53 00107a4c LDR             R0, [SP,#0xC]; Load from Memory
sub_10753C 54 00107a60 LDR             R0, [SP,#0xC]; Load from Memory
sub_10753C 55 00107aa0 STRD            R8, [R10,#0x10]; Store pair of registers
sub_10753C 56 00107aa8 STR             R0, [R10,#0x18]; Store to Memory
sub_10753C 57 00107aac ADD             R4, R4, #1; Rd = Op1 + Op2
sub_10753C 58 00107abc LDR             R0, [SP,#8]; Load from Memory
sub_10753C 59 00107ac8 MOV             R2, #0x11; Rd = Op2
sub_10753C 60 00107ae0 MOV             R2, #0x10; Rd = Op2
sub_10753C 61 00107af8 LDR             R0, [SP,#0x30]; Load from Memory
sub_10753C 62 00107b1c MOV             R2, #0; Rd = Op2
sub_10753C 63 00107b34 ADD             R1, SP, #0x18; Rd = Op1 + Op2
sub_10753C 64 00107b48 LDR             R0, [SP,#8]; Load from Memory
sub_10753C 65 00107b54 LDR             R0, [SP,#0x14]; Load from Memory
sub_10753C 66 00107b60 LDR             R1, [SP,#0x64]; Load from Memory
sub_10753C 67 00107b7c LDR             R4, [SP,#0x14]; Load from Memory
sub_10753C 68 00107b80 LDR             R1, [SP,#0x58]; Load from Memory
sub_10753C 69 00107b90 ADD             SP, SP, #0x6C; Rd = Op1 + Op2
sub_10753C 70 00107b9c LDR             R0, [SP,#0x60]; Load from Memory
sub_10753C 71 00107bb0 LDR             R1, [SP,#0x64]; Load from Memory
sub_10753C 72 0010f0d4 B               loc_10F0D4; Branch
sub_107BDC 0 00107bdc STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_107BDC 1 00107bfc MOV             R2, #0x10; Rd = Op2
sub_107BDC 2 00107c10 MOV             R0, #0; Rd = Op2
sub_107BDC 3 00107c24 MOV             R2, #6; Rd = Op2
sub_107BDC 4 00107c3c MOV             R5, #3; Rd = Op2
sub_107BDC 5 00107c44 LDR             R0, [SP,#8]; Load from Memory
sub_107BDC 6 00107c50 LDR             R1, [SP,#0]; Load from Memory
sub_107BDC 7 00107c70 LDR             R0, [SP,#8]; Load from Memory
sub_107BDC 8 00107c7c LDR             R1, [SP,#0]; Load from Memory
sub_107BDC 9 00107c9c LDR             R0, [SP,#8]; Load from Memory
sub_107BDC 10 00107ca8 B               loc_107D2C; Branch
sub_107BDC 11 00107cac STR             R0, [R4,#0]; Store to Memory
sub_107BDC 12 00107cb4 LDR             R1, [SP,#0]; Load from Memory
sub_107BDC 13 00107cd4 LDR             R0, [SP,#8]; Load from Memory
sub_107BDC 14 00107ce0 LDR             R1, [SP,#0]; Load from Memory
sub_107BDC 15 00107d00 LDR             R0, [SP,#8]; Load from Memory
sub_107BDC 16 00107d0c LDR             R1, [SP,#0]; Load from Memory
sub_107BDC 17 00107d2c LDR             R0, [SP,#8]; Load from Memory
sub_107BDC 18 00107d38 LDR             R1, [SP,#0]; Load from Memory
sub_107BDC 19 00107d50 LDR             R0, [SP,#8]; Load from Memory
sub_107BDC 20 00107d5c LDR             R1, [SP,#0]; Load from Memory
sub_107BDC 21 00107d74 LDR             R0, [SP,#0x14]; Load from Memory
sub_107BDC 22 00107d80 CMP             R5, #0; Set cond. codes on Op1 - Op2
sub_107BDC 23 00107d88 B               loc_107D98; Branch
sub_107BDC 24 00107d8c LDR             R0, [R4,#0]; Load from Memory
sub_107BDC 25 00107d98 ADD             R1, SP, #0xC; Rd = Op1 + Op2
sub_107BDC 26 00107dac MOV             R0, R5; Rd = Op2
sub_107BDC 27 00107db0 ADD             SP, SP, #0x18; Rd = Op1 + Op2
sub_107DD4 0 00107dd4 STMFD           SP!, {R4-R11,LR}; Store Block to Memory
sub_107DD4 1 00107df4 MOV             R10, #0; Rd = Op2
sub_107DD4 2 00107e1c CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_107DD4 3 00107e24 MOV             R8, #1; Rd = Op2
sub_107DD4 4 00107e44 LDR             R0, [SP,#0x20]; Load from Memory
sub_107DD4 5 00107e54 MOV             R2, #0x10; Rd = Op2
sub_107DD4 6 00107e6c MOV             R4, #3; Rd = Op2
sub_107DD4 7 00107e74 MOV             R2, #6; Rd = Op2
sub_107DD4 8 00107e8c MOV             R2, #1; Rd = Op2
sub_107DD4 9 00107ea8 MOV             R2, #0; Rd = Op2
sub_107DD4 10 00107ec0 LDR             R0, [SP,#8]; Load from Memory
sub_107DD4 11 00107ecc B               loc_107EE8; Branch
sub_107DD4 12 00107ed0 ADD             R1, SP, #0x48; Rd = Op1 + Op2
sub_107DD4 13 00107ee4 B               loc_107EA8; Branch
sub_107DD4 14 00107ee8 LDR             R1, [SP,#0]; Load from Memory
sub_107DD4 15 00107f00 LDR             R0, [SP,#8]; Load from Memory
sub_107DD4 16 00107f0c B               loc_10836C; Branch
sub_107DD4 17 00107f10 LDR             R0, [SP,#0x48]; Load from Memory
sub_107DD4 18 00107f28 CMP             R6, #0; Set cond. codes on Op1 - Op2
sub_107DD4 19 00107f30 STR             R8, [R6,#0]; Store to Memory
sub_107DD4 20 00107f4c MOV             R5, #3; Rd = Op2
sub_107DD4 21 00107f54 MOV             R2, #0x80; Rd = Op2
sub_107DD4 22 00107f6c MOV             R2, #0xA1; Rd = Op2
sub_107DD4 23 00107f84 CMP             R0, #3; Set cond. codes on Op1 - Op2
sub_107DD4 24 00107f8c MOV             R2, #0x82; Rd = Op2
sub_107DD4 25 00107fa4 ADD             R1, SP, #0x30; Rd = Op1 + Op2
sub_107DD4 26 00107fb8 CMP             R5, #0; Set cond. codes on Op1 - Op2
sub_107DD4 27 00107fc0 B               loc_108378; Branch
sub_107DD4 28 00107fc4 ADD             R1, R6, #0x10; Rd = Op1 + Op2
sub_107DD4 29 00107fd8 B               loc_107F8C; Branch
sub_107DD4 30 00107fdc LDR             R1, [SP,#0]; Load from Memory
sub_107DD4 31 00107ff4 LDR             R0, [SP,#8]; Load from Memory
sub_107DD4 32 00108000 B               loc_10836C; Branch
sub_107DD4 33 00108004 LDR             R0, [SP,#0x48]; Load from Memory
sub_107DD4 34 0010802c B               loc_108378; Branch
sub_107DD4 35 00108030 LDR             R1, [SP,#0]; Load from Memory
sub_107DD4 36 00108048 LDR             R0, [SP,#8]; Load from Memory
sub_107DD4 37 00108054 B               loc_10836C; Branch
sub_107DD4 38 00108058 ADDS            R5, R7, #0xC4; Rd = Op1 + Op2
sub_107DD4 39 0010806c MOV             R2, #3; Rd = Op2
sub_107DD4 40 00108080 MOV             R6, #3; Rd = Op2
sub_107DD4 41 00108088 ADD             R1, SP, #0x30; Rd = Op1 + Op2
sub_107DD4 42 0010809c LDR             R0, [SP,#0x34]; Load from Memory
sub_107DD4 43 001080a8 LDR             R0, [SP,#0x30]; Load from Memory
sub_107DD4 44 001080c4 LDR             R0, [SP,#0x30]; Load from Memory
sub_107DD4 45 001080dc LDR             R0, [R5,#0]; Load from Memory
sub_107DD4 46 001080e8 CMP             R6, #0; Set cond. codes on Op1 - Op2
sub_107DD4 47 001080f0 B               loc_108378; Branch
sub_107DD4 48 001080f4 LDR             R1, [SP,#0]; Load from Memory
sub_107DD4 49 0010810c LDR             R0, [SP,#8]; Load from Memory
sub_107DD4 50 00108118 B               loc_10836C; Branch
sub_107DD4 51 0010811c STR             R8, [R7,#0xD0]; Store to Memory
sub_107DD4 52 00108134 B               loc_108378; Branch
sub_107DD4 53 00108138 LDR             R1, [SP,#0]; Load from Memory
sub_107DD4 54 00108150 LDR             R0, [SP,#8]; Load from Memory
sub_107DD4 55 0010815c B               loc_10836C; Branch
sub_107DD4 56 00108160 LDR             R0, [R7,#0x5C]; Load from Memory
sub_107DD4 57 0010816c LDR             R0, [SP,#0x48]; Load from Memory
sub_107DD4 58 00108178 ADDS            R9, R7, #0x5C; Rd = Op1 + Op2
sub_107DD4 59 00108188 LDR             R0, [SP,#0x14]; Load from Memory
sub_107DD4 60 00108194 MOV             R2, #0xA4; Rd = Op2
sub_107DD4 61 001081ac CMP             R0, #3; Set cond. codes on Op1 - Op2
sub_107DD4 62 001081b4 MOV             R5, #3; Rd = Op2
sub_107DD4 63 001081bc MOV             R2, #0; Rd = Op2
sub_107DD4 64 001081d4 LDR             R0, [R6,#8]; Load from Memory
sub_107DD4 65 001081e0 CMP             R5, #0; Set cond. codes on Op1 - Op2
sub_107DD4 66 001081e8 B               loc_108378; Branch
sub_107DD4 67 001081ec LDR             R1, [SP,#0]; Load from Memory
sub_107DD4 68 00108204 LDR             R0, [SP,#8]; Load from Memory
sub_107DD4 69 00108210 B               loc_10836C; Branch
sub_107DD4 70 00108214 ADDS            R5, R7, #0x84; Rd = Op1 + Op2
sub_107DD4 71 00108224 MOV             R2, #0x10; Rd = Op2
sub_107DD4 72 0010823c MOV             R6, #3; Rd = Op2
sub_107DD4 73 00108244 LDR             R0, [SP,#0x38]; Load from Memory
sub_107DD4 74 00108250 MOV             R2, #1; Rd = Op2
sub_107DD4 75 00108268 CMP             R0, #1; Set cond. codes on Op1 - Op2
sub_107DD4 76 00108274 STR             R8, [R5,#0x54]; Store to Memory
sub_107DD4 77 00108298 CMP             R0, #1; Set cond. codes on Op1 - Op2
sub_107DD4 78 001082a8 ADD             R1, SP, #0x30; Rd = Op1 + Op2
sub_107DD4 79 001082bc CMP             R6, #0; Set cond. codes on Op1 - Op2
sub_107DD4 80 001082c4 B               loc_108378; Branch
sub_107DD4 81 001082c8 STR             R11, [R5,#0x50]!; Store to Memory
sub_107DD4 82 001082d8 ADD             R1, SP, #0x64; Rd = Op1 + Op2
sub_107DD4 83 001082ec B               loc_108274; Branch
sub_107DD4 84 001082f0 LDR             R0, [SP,#0x44]; Load from Memory
sub_107DD4 85 001082fc LDR             R0, [SP,#0x3C]; Load from Memory
sub_107DD4 86 0010830c LDR             R1, [SP,#0]; Load from Memory
sub_107DD4 87 00108324 LDR             R0, [SP,#8]; Load from Memory
sub_107DD4 88 00108330 LDR             R1, [SP,#0]; Load from Memory
sub_107DD4 89 00108348 LDR             R0, [SP,#8]; Load from Memory
sub_107DD4 90 00108354 LDR             R1, [SP,#0]; Load from Memory
sub_107DD4 91 0010836c LDR             R0, [SP,#0x48]; Load from Memory
sub_107DD4 92 00108378 CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_107DD4 93 00108380 ADD             R1, SP, #0x24; Rd = Op1 + Op2
sub_107DD4 94 00108394 LDR             R0, [SP,#0x20]; Load from Memory
sub_107DD4 95 001083a0 ADD             R1, SP, #0x18; Rd = Op1 + Op2
sub_107DD4 96 001083b4 MOV             R0, R4; Rd = Op2
sub_107DD4 97 001083b8 ADD             SP, SP, #0x6C; Rd = Op1 + Op2
sub_1083E4 0 001083e4 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_1083E4 1 00108404 MOV             R0, #0; Rd = Op2
sub_1083E4 2 00108418 MOV             R2, #0xA4; Rd = Op2
sub_1083E4 3 00108430 CMP             R0, #3; Set cond. codes on Op1 - Op2
sub_1083E4 4 00108438 MOV             R6, #3; Rd = Op2
sub_1083E4 5 00108440 MOV             R2, #0; Rd = Op2
sub_1083E4 6 00108458 LDR             R0, [R4,#8]; Load from Memory
sub_1083E4 7 00108464 MOV             R0, R6; Rd = Op2
sub_1083E4 8 00108468 ADD             SP, SP, #0x10; Rd = Op1 + Op2
sub_108470 0 00108470 STMFD           SP!, {R4,R5,LR}; Store Block to Memory
sub_108470 1 00108490 MOV             R2, #3; Rd = Op2
sub_108470 2 001084a4 MOV             R1, SP; Rd = Op2
sub_108470 3 001084b8 LDR             R0, [SP,#4]; Load from Memory
sub_108470 4 001084c4 LDR             R0, [SP,#0]; Load from Memory
sub_108470 5 001084e0 B               loc_1084EC; Branch
sub_108470 6 001084e4 MOV             R5, #3; Rd = Op2
sub_108470 7 001084ec LDR             R0, [SP,#0]; Load from Memory
sub_108470 8 00108504 LDR             R0, [R4,#0]; Load from Memory
sub_108470 9 00108510 MOV             R0, R5; Rd = Op2
sub_108470 10 00108514 ADD             SP, SP, #0x1C; Rd = Op1 + Op2
sub_10851C 0 0010851c STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_10851C 1 0010853c MOV             R2, #0x10; Rd = Op2
sub_10851C 2 00108550 MOV             R2, #0x10; Rd = Op2
sub_10851C 3 00108568 MOV             R2, #6; Rd = Op2
sub_10851C 4 00108580 MOV             R2, #0; Rd = Op2
sub_10851C 5 00108598 ADD             R1, SP, #0xC; Rd = Op1 + Op2
sub_10851C 6 001085ac MOV             R0, #3; Rd = Op2
sub_10851C 7 001085c0 LDR             R1, [SP,#0]; Load from Memory
sub_10851C 8 001085d8 ADD             R1, SP, #0x18; Rd = Op1 + Op2
sub_10851C 9 001085ec MOV             R4, #3; Rd = Op2
sub_10851C 10 001085f0 MOV             R0, R4; Rd = Op2
sub_10851C 11 001085f4 ADD             SP, SP, #0x48; Rd = Op1 + Op2
sub_10851C 12 001085fc MOV             R2, #3; Rd = Op2
sub_10851C 13 00108614 ADD             R1, SP, #0x24; Rd = Op1 + Op2
sub_10851C 14 00108628 LDR             R0, [SP,#0x24]; Load from Memory
sub_10851C 15 00108654 STR             R0, [SP,#0x34]; Store to Memory
sub_10851C 16 00108670 MOV             R2, #2; Rd = Op2
sub_10851C 17 00108688 LDR             R0, [SP,#8]; Load from Memory
sub_10851C 18 00108694 LDR             R0, [SP,#0]; Load from Memory
sub_10851C 19 001086a4 LDR             R0, [SP,#8]; Load from Memory
sub_10851C 20 001086b0 LDR             R0, [SP,#0]; Load from Memory
sub_10851C 21 001086d8 LDR             R0, [SP,#8]; Load from Memory
sub_10851C 22 001086e4 LDR             R0, [SP,#0]; Load from Memory
sub_10851C 23 001086f4 LDR             R0, [SP,#8]; Load from Memory
sub_10851C 24 00108700 ADD             SP, SP, #0x48; Rd = Op1 + Op2
sub_10851C 25 0010870c LDR             R0, [SP,#0]; Load from Memory
sub_10851C 26 00108728 B               loc_1086B0; Branch
sub_10851C 27 0010872c LDR             R0, [SP,#0]; Load from Memory
sub_10851C 28 00108748 LDR             R0, [SP,#0]; Load from Memory
sub_10851C 29 00108770 B               loc_1085D8; Branch
sub_108778 0 00108778 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_108778 1 00108798 MOV             R2, #0x10; Rd = Op2
sub_108778 2 001087ac MOV             R2, #6; Rd = Op2
sub_108778 3 001087c4 MOV             R2, #0; Rd = Op2
sub_108778 4 001087dc LDR             R0, [SP,#8]; Load from Memory
sub_108778 5 001087e8 LDR             R1, [SP,#0]; Load from Memory
sub_108778 6 00108808 LDR             R0, [SP,#8]; Load from Memory
sub_108778 7 00108814 LDR             R1, [SP,#0]; Load from Memory
sub_108778 8 00108830 LDR             R0, [SP,#8]; Load from Memory
sub_108778 9 0010883c LDR             R1, [SP,#0]; Load from Memory
sub_108778 10 00108858 LDR             R0, [SP,#8]; Load from Memory
sub_108778 11 00108864 B               loc_1088AC; Branch
sub_108778 12 00108868 STR             R0, [R4,#0]; Store to Memory
sub_108778 13 0010886c ADD             R1, SP, #0xC; Rd = Op1 + Op2
sub_108778 14 00108880 MOV             R5, #3; Rd = Op2
sub_108778 15 00108884 MOV             R0, R5; Rd = Op2
sub_108778 16 00108888 ADD             SP, SP, #0x28; Rd = Op1 + Op2
sub_108778 17 00108890 LDR             R1, [SP,#0]; Load from Memory
sub_108778 18 001088ac MOV             R0, #4; Rd = Op2
sub_1088C4 0 001088c4 STMFD           SP!, {R4-R7,LR}; Store Block to Memory
sub_1088C4 1 001088e4 ADD             R1, R5, #0x100; Rd = Op1 + Op2
sub_1088C4 2 001088f4 LDR             R0, [R5,#0x100]; Load from Memory
sub_1088C4 3 00108904 LDR             R1, [R5,#0x1C]; Load from Memory
sub_1088C4 4 00108910 MOV             R2, #3; Rd = Op2
sub_1088C4 5 00108928 ADD             R1, SP, #0xC; Rd = Op1 + Op2
sub_1088C4 6 00108944 MOV             R7, #3; Rd = Op2
sub_1088C4 7 00108948 MOV             R0, R7; Rd = Op2
sub_1088C4 8 0010894c ADD             SP, SP, #0x1C; Rd = Op1 + Op2
sub_1088C4 9 00108954 CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_1088C4 10 0010895c MOV             R0, R6; Rd = Op2
sub_1088C4 11 00108974 STR             R4, [R5,#0x28]; Store to Memory
sub_1088C4 12 00108990 ADD             SP, SP, #0x1C; Rd = Op1 + Op2
sub_108998 0 00108998 STMFD           SP!, {R4,R5,LR}; Store Block to Memory
sub_108998 1 001089b8 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_108998 2 001089c0 MOV             R1, R5; Rd = Op2
sub_108998 3 001089d4 MOV             R4, #3; Rd = Op2
sub_108998 4 001089d8 ADD             SP, SP, #0xC; Rd = Op1 + Op2
sub_1089E4 0 001089e4 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_1089E4 1 00108a04 MOV             R2, #0x10; Rd = Op2
sub_1089E4 2 00108a18 MOV             R2, #0x17; Rd = Op2
sub_1089E4 3 00108a30 CMP             R0, #1; Set cond. codes on Op1 - Op2
sub_1089E4 4 00108a38 B               loc_108A58; Branch
sub_1089E4 5 00108a3c MOV             R2, #1; Rd = Op2
sub_1089E4 6 00108a54 B               loc_108A88; Branch
sub_1089E4 7 00108a58 MOV             R2, #0; Rd = Op2
sub_1089E4 8 00108a70 MOV             R2, #0; Rd = Op2
sub_1089E4 9 00108a88 MOV             R2, #0x17; Rd = Op2
sub_1089E4 10 00108aa0 CMP             R0, #1; Set cond. codes on Op1 - Op2
sub_1089E4 11 00108aa8 B               loc_108B0C; Branch
sub_1089E4 12 00108aac MOV             R2, #1; Rd = Op2
sub_1089E4 13 00108ac4 B               loc_108AF8; Branch
sub_1089E4 14 00108ac8 MOV             R2, #0; Rd = Op2
sub_1089E4 15 00108ae0 MOV             R2, #0; Rd = Op2
sub_1089E4 16 00108af8 MOV             R1, SP; Rd = Op2
sub_1089E4 17 00108b0c MOV             R5, #3; Rd = Op2
sub_1089E4 18 00108b10 MOV             R0, R5; Rd = Op2
sub_1089E4 19 00108b14 ADD             SP, SP, #0x10; Rd = Op1 + Op2
sub_108B1C 0 00108b1c STMFD           SP!, {R4,R5,LR}; Store Block to Memory
sub_108B1C 1 00108b3c MOV             R2, #0xA0; Rd = Op2
sub_108B1C 2 00108b50 MOV             R0, #0; Rd = Op2
sub_108B1C 3 00108b60 MOV             R2, #2; Rd = Op2
sub_108B1C 4 00108b80 LDR             R0, [R4,#4]; Load from Memory
sub_108B1C 5 00108b94 MOV             R5, #3; Rd = Op2
sub_108B1C 6 00108b98 MOV             R0, R5; Rd = Op2
sub_108B1C 7 00108b9c ADD             SP, SP, #0xC; Rd = Op1 + Op2
sub_108BA4 0 00108ba4 STMFD           SP!, {R4-R10,LR}; Store Block to Memory
sub_108BA4 1 00108bcc LDR             R4, [R7,#0]; Load from Memory
sub_108BA4 2 00108bdc CMP             R4, R8; Set cond. codes on Op1 - Op2
sub_108BA4 3 00108be8 MOV             R1, R0; Rd = Op2
sub_108BA4 4 00108c00 MOV             R5, #3; Rd = Op2
sub_108BA4 5 00108c08 LDR             R0, [SP,#0]; Load from Memory
sub_108BA4 6 00108c18 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_108BA4 7 00108c20 LDR             R1, [SP,#8]; Load from Memory
sub_108BA4 8 00108c34 ADD             R0, R0, R4; Rd = Op1 + Op2
sub_108BA4 9 00108c40 CMP             R8, R0; Set cond. codes on Op1 - Op2
sub_108BA4 10 00108c48 CMP             R5, #0; Set cond. codes on Op1 - Op2
sub_108BA4 11 00108c50 MOV             R9, #1; Rd = Op2
sub_108BA4 12 00108c58 LDR             R1, [R7,#0]; Load from Memory
sub_108BA4 13 00108c74 ADD             R6, R6, #1; Rd = Op1 + Op2
sub_108BA4 14 00108c80 ADD             SP, SP, #0x10; Rd = Op1 + Op2
initialize_some_pblstruct_callbacks 0 00108c8c STMFD           SP!, {R4,LR}; Store Block to Memory
initialize_some_pblstruct_callbacks 1 00108c98 MOV             R3, #0; a4
initialize_some_pblstruct_callbacks 2 00108cac MOV             R1, #4; Rd = Op2
initialize_some_pblstruct_callbacks 3 00108cc0 MOV             R3, #4; a4
initialize_some_pblstruct_callbacks 4 00108cd4 LDR             R0, =sub_103A44; Load from Memory
sub_108D74 0 00108d74 STMFD           SP!, {R4-R10,LR}; Store Block to Memory
sub_108D74 1 00108da0 LDR             R3, [R4,#0x34]; Load from Memory
sub_108D74 2 00108dc0 LDR             R3, [R2,#0x2C]; Load from Memory
sub_108D74 3 00108dcc LDR             R3, [R2,#0x2C]; Load from Memory
sub_108D74 4 00108de8 MOV             R3, R0; Rd = Op2
sub_108D74 5 00108df8 LDR             R3, [R4,#0xC]; Load from Memory
sub_108D74 6 00108e04 CMP             R0, #0x8000; Set cond. codes on Op1 - Op2
sub_108D74 7 00108e18 LDR             R3, [R1,#0]; Load from Memory
sub_108D74 8 00108e2c CMP             LR, #4; Set cond. codes on Op1 - Op2
sub_108D74 9 00108e38 LDR             LR, [R1,#0x1C]; Load from Memory
sub_108D74 10 00108e50 CMP             R3, #0x18; Set cond. codes on Op1 - Op2
sub_108D74 11 00108e5c ORR             R0, R0, #0x1000; Rd = Op1 | Op2
sub_108D74 12 00108e60 LDR             LR, [R4,#0x34]; Load from Memory
sub_108D74 13 00108e80 CMP             R7, #0; Set cond. codes on Op1 - Op2
sub_108D74 14 00108e88 LDR             R0, [R1,#0]; Load from Memory
sub_108D74 15 00108e98 LDR             R0, [R1,#8]; Load from Memory
sub_108D74 16 00108ea4 LDR             R5, [R4,#0x34]; Load from Memory
sub_108D74 17 00108eb0 LDR             R0, [R5,#0x28]; Load from Memory
sub_108D74 18 00108ec4 LDR             R2, [R5,#0x2C]; Load from Memory
sub_108D74 19 00108ed8 LDR             R0, [R4,#0x34]; Load from Memory
sub_108D74 20 00108ef0 MOV             R0, #0xA; Rd = Op2
sub_108D74 21 00108f08 CMP             R5, #0x320; Set cond. codes on Op1 - Op2
sub_108D74 22 00108f10 LDR             R1, [R4,#0x34]; Load from Memory
sub_108D74 23 00108f2c LDR             R0, [R4,#0x34]; Load from Memory
sub_108D74 24 00108f44 MOV             R0, #0xA; Rd = Op2
sub_108D74 25 00108f5c MOV             R0, R8; Rd = Op2
sub_108D74 26 00108f64 MOV             R8, R9; Rd = Op2
sub_108D74 27 00108f6c TST             R0, #4; Set cond. codes on Op1 & Op2
sub_108D74 28 00108f74 LDR             R0, [R5,#0x2C]; Load from Memory
sub_108D74 29 00108f84 TST             R0, #1; Set cond. codes on Op1 & Op2
sub_108D74 30 00108f8c LDR             R0, [R1,#0]; Load from Memory
sub_108D74 31 00108fb0 STR             R12, [R2,#0x28]; Store to Memory
sub_108D74 32 00108fc4 LDR             R0, [R2,#0x2C]; Load from Memory
sub_108D74 33 00108fd0 LDR             R0, [R2,#0x2C]; Load from Memory
sub_108D74 34 00108fec LDR             R0, [R4,#0xC]; Load from Memory
sub_108D74 35 00108ffc LDR             R0, [R1,#8]; Load from Memory
sub_108D74 36 0010900c CMP             R0, #4; Set cond. codes on Op1 - Op2
sub_108D74 37 00109028 LDR             R12, [R4,#0x34]; Load from Memory
sub_108D74 38 00109044 LDR             R0, [R1,#8]; Load from Memory
sub_108D74 39 00109050 LDR             R0, [R1,#0xC]; Load from Memory
sub_108D74 40 00109070 LDR             R0, [R1,#8]; Load from Memory
sub_108D74 41 0010907c LDR             R0, [R1,#0xC]; Load from Memory
sub_108D74 42 00109098 CMP             R7, #0; Set cond. codes on Op1 - Op2
sub_108D74 43 001090a0 LDR             R0, [R1,#0x1C]; Load from Memory
sub_108D74 44 001090ac LDR             R6, [R4,#0x34]; Load from Memory
sub_108D74 45 001090b8 LDR             R0, [R6,#0x28]; Load from Memory
sub_108D74 46 001090cc LDR             R1, [R6,#0x2C]; Load from Memory
sub_108D74 47 001090e0 MOV             R0, #0xA; Rd = Op2
sub_108D74 48 001090f8 MOV             R0, R7; Rd = Op2
sub_10910C 0 0010910c STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_10910C 1 00109120 CMP             R2, #1; Set cond. codes on Op1 - Op2
sub_10910C 2 00109128 MOV             R3, R4; a4
sub_10910C 3 0010913c LDR             R0, [R5,#0x28]; Load from Memory
sub_10910C 4 00109148 LDR             R0, [R5,#0x34]; Load from Memory
sub_10910C 5 00109160 B               loc_109194; Branch
sub_10910C 6 00109164 LDR             R0, [R5,#0]; Load from Memory
sub_10910C 7 00109170 CMP             R0, #6; Set cond. codes on Op1 - Op2
sub_10910C 8 00109180 BL              sub_105390; Branch with Link
sub_10910C 9 00109194 LDR             R2, =0xB8200; a3
sub_10910C 10 001091a8 STR             R4, [R5,#0x28]; Store to Memory
sub_10910C 11 001091ac LDMFD           SP!, {R4-R6,PC}; Load Block from Memory
sub_1091BC 0 001091bc STMFD           SP!, {R4-R9,LR}; Store Block to Memory
sub_1091BC 1 001091e8 MOV             R3, R7; a4
sub_1091BC 2 001091fc LDR             R0, [R4,#0x1C]; Load from Memory
sub_1091BC 3 00109228 MOV             R0, #0x37; Rd = Op2
sub_1091BC 4 00109254 MOV             R1, R5; Rd = Op2
sub_1091BC 5 00109268 STR             R8, [SP,#0]; Store to Memory
sub_1091BC 6 00109288 TST             R6, #1; Set cond. codes on Op1 & Op2
sub_1091BC 7 00109290 MOV             R1, #0; Rd = Op2
sub_1091BC 8 00109294 CMP             R1, #0; Set cond. codes on Op1 - Op2
sub_1091BC 9 001092a0 MOV             R0, #0xC; Rd = Op2
sub_1091BC 10 001092c4 LDR             R1, [R4,#0x34]; Load from Memory
sub_1091BC 11 001092d8 ADD             SP, SP, #0x24; Rd = Op1 + Op2
sub_1091BC 12 001092e0 LDR             R0, [R5,#0]; Load from Memory
sub_1091BC 13 001092f4 B               loc_109294; Branch
sub_109314 0 00109314 STMFD           SP!, {R4-R11,LR}; Store Block to Memory
sub_109314 1 00109360 MOV             R3, R10; Rd = Op2
sub_109314 2 0010937c LDR             R1, [R5,#0x44]; Load from Memory
sub_109314 3 00109388 LDR             R11, [R12,#0x50]; Load from Memory
sub_109314 4 0010939c LDR             R0, [R6,#0]; Load from Memory
sub_109314 5 001093e8 LDRH            R0, [SP,#0x14]; Load from Memory
sub_109314 6 001093f8 LDRH            R0, [SP,#0x16]; Load from Memory
sub_109314 7 0010940c ADD             R2, R10, R0; Rd = Op1 + Op2
sub_109314 8 00109424 ADD             R0, R0, #1; Rd = Op1 + Op2
sub_109314 9 00109430 CMP             R0, #8; Set cond. codes on Op1 - Op2
sub_109314 10 00109438 CMP             R3, #0; Set cond. codes on Op1 - Op2
sub_109314 11 00109440 LDR             R2, [R6,#0x20]; Load from Memory
sub_109314 12 0010945c LDR             R4, [R12,#0x28]; Load from Memory
sub_109314 13 00109470 LDR             R2, [R12,#0x30]; Load from Memory
sub_109314 14 00109484 SUBS            R1, R2, R7; Rd = Op1 - Op2
sub_109314 15 00109490 LDR             R0, [R5,#0x44]; Load from Memory
sub_109314 16 001094c8 LDR             R0, [R12,#0x54]; Load from Memory
sub_109314 17 001094dc ADD             SP, SP, #0x24; Rd = Op1 + Op2
pbl_flash_sdcc4 0 001094ec STMFD           SP!, {R4-R8,LR}; Store Block to Memory
pbl_flash_sdcc4 1 00109508 MOV             R0, #9; Rd = Op2
pbl_flash_sdcc4 2 00109540 LDR             R0, [R4,#0]; Load from Memory
pbl_flash_sdcc4 3 00109550 CMP             R0, #2; Set cond. codes on Op1 - Op2
pbl_flash_sdcc4 4 00109558 CMP             R0, #5; Set cond. codes on Op1 - Op2
pbl_flash_sdcc4 5 00109560 CMP             R0, #6; Set cond. codes on Op1 - Op2
pbl_flash_sdcc4 6 00109568 B               loc_109644; Branch
pbl_flash_sdcc4 7 0010956c LDR             R0, [SP,#0xC]; Load from Memory
pbl_flash_sdcc4 8 0010957c LDR             R1, [SP,#0x14]; Load from Memory
pbl_flash_sdcc4 9 00109594 BFC             R0, #0xA, #0x16; Bit Field Clear
pbl_flash_sdcc4 10 001095b8 MOV             R3, R5; a4
pbl_flash_sdcc4 11 001095c8 ADD             R0, R6, #1; Rd = Op1 + Op2
pbl_flash_sdcc4 12 001095dc STR             R0, [R4,#0x24]; Store to Memory
pbl_flash_sdcc4 13 001095e4 LDR             R0, [SP,#0xC]; Load from Memory
pbl_flash_sdcc4 14 00109618 MOV             R3, R5; a4
pbl_flash_sdcc4 15 00109628 ADD             R0, R6, #1; Rd = Op1 + Op2
pbl_flash_sdcc4 16 00109644 LDR             R0, [SP,#0xC]; Load from Memory
pbl_flash_sdcc4 17 00109650 STR             R5, [R4,#0x24]; Store to Memory
pbl_flash_sdcc4 18 00109654 MOV             R0, R8; Rd = Op2
pbl_flash_sdcc4 19 00109658 ADD             SP, SP, #0x28; Rd = Op1 + Op2
sub_10967C 0 0010967c STMFD           SP!, {R3-R11,LR}; Store Block to Memory
sub_10967C 1 001096ac LDR             R0, [R4,#0]; Load from Memory
sub_10967C 2 001096cc LDR             R2, [R4,#0x18]; Load from Memory
sub_10967C 3 001096e0 LDR             R0, [R4,#0xC]; Load from Memory
sub_10967C 4 001096ec CMP             R0, #0x200; Set cond. codes on Op1 - Op2
sub_10967C 5 001096f4 LDR             R0, [R4,#0x48]; Load from Memory
sub_10967C 6 00109704 SUBS            R3, R0, R5; Rd = Op1 - Op2
sub_10967C 7 00109710 LDR             R2, [R4,#0x30]; Load from Memory
sub_10967C 8 00109724 LDR             R12, [R4,#0x10]; Load from Memory
sub_10967C 9 0010974c BCC             loc_109770; Branch
sub_10967C 10 00109750 LDRB            R5, [R1],#1; Load from Memory
sub_10967C 11 00109770 MVN             R0, R0; Rd = ~Op2
sub_10967C 12 00109774 CMP             R12, R0; Set cond. codes on Op1 - Op2
sub_10967C 13 0010977c LDR             R0, [R4,#0x50]; Load from Memory
sub_10967C 14 00109790 CMP             R5, R7; Set cond. codes on Op1 - Op2
sub_10967C 15 0010979c EOR             R1, R1, R5; Rd = Op1 ^ Op2
sub_10967C 16 001097a8 STR             R6, [SP,#0]; Store to Memory
sub_10967C 17 001097c8 LDR             R0, [R8,#8]; Load from Memory
sub_10967C 18 001097d8 B               loc_109800; Branch
sub_10967C 19 001097dc RSBS            R2, R0, #1; Rd = Op2 - Op1
sub_10967C 20 001097e8 LDR             R2, [R4,#0x28]; Load from Memory
sub_10967C 21 001097fc B               loc_109724; Branch
sub_10967C 22 00109800 LDR             R2, [R4,#0x58]; Load from Memory
sub_10967C 23 00109810 CMP             R5, #0; Set cond. codes on Op1 - Op2
sub_10967C 24 00109820 LDRB            R12, [R6],#1; Load from Memory
sub_10967C 25 00109840 MVN             R0, R0; Rd = ~Op2
sub_10967C 26 0010984c CMP             R3, #0; Set cond. codes on Op1 - Op2
sub_10967C 27 00109854 MOV             R0, R4; Rd = Op2
sub_10967C 28 0010985c MOV             R0, #0; Rd = Op2
sub_109878 0 00109878 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_109878 1 001098b4 MOV             R1, #3; Rd = Op2
sub_109878 2 001098cc CMP             R0, #6; Set cond. codes on Op1 - Op2
sub_109878 3 001098d4 STR             R1, [SP,#8]; Store to Memory
sub_109878 4 001098f0 STR             R5, [R4,#0x10]; Store to Memory
sub_109878 5 001098f4 ADD             SP, SP, #0x48; Rd = Op1 + Op2
sub_109878 6 001098fc MOV             R0, #0x20000; Rd = Op2
sub_10991C 0 0010991c STMFD           SP!, {R4-R10,LR}; Store Block to Memory
sub_10991C 1 00109930 LDR             R0, [R4,#0x40]; Load from Memory
sub_10991C 2 0010993c MOV             R7, #0; Rd = Op2
sub_10991C 3 00109984 STR             R7, [SP,#0x40]; Store to Memory
sub_10991C 4 001099bc MOV             R0, #0x64; Rd = Op2
sub_10991C 5 001099d4 ADD             SP, SP, #0x48; Rd = Op1 + Op2
sub_10991C 6 001099e0 MOV             R6, #0; Rd = Op2
read_gpt 0 001099ec STMFD           SP!, {R3-R9,LR}; Store Block to Memory
read_gpt 1 00109a10 LDR             R0, [R8,#0x34]; Load from Memory
read_gpt 2 00109a24 LDR             R1, [R0,#0x34]; Load from Memory
read_gpt 3 00109a38 MOV             R3, #0; a4
read_gpt 4 00109a4c ADD             R0, R4, R5; Rd = Op1 + Op2
read_gpt 5 00109a58 MOV             R3, R9; a4
read_gpt 6 00109a6c TST             R5, #3; Set cond. codes on Op1 & Op2
read_gpt 7 00109a74 MOV             R3, R5; a4
read_gpt 8 00109a88 CMP             R9, #0; Set cond. codes on Op1 - Op2
read_gpt 9 00109a90 LDR             R1, [R8,#0x34]; Load from Memory
read_gpt 10 00109aa8 TST             R0, #pt_fl_head; Set cond. codes on Op1 & Op2
read_gpt 11 00109ab0 TST             R0, #0x8000; Set cond. codes on Op1 & Op2
read_gpt 12 00109ab8 CMP             R4, #0x20; Set cond. codes on Op1 - Op2
read_gpt 13 00109ac0 CMP             R5, #0x20; Set cond. codes on Op1 - Op2
read_gpt 14 00109ac8 CMP             R5, #0; Set cond. codes on Op1 - Op2
read_gpt 15 00109ad0 LDR             R0, [R1,#0x30]; Load from Memory
read_gpt 16 00109ae8 B               loc_109B30; Branch
read_gpt 17 00109aec LDR             R1, [R1,#0x30]; Load from Memory
read_gpt 18 00109b04 MOV             R3, #0x20; a4
read_gpt 19 00109b18 CMP             R5, #0x20; Set cond. codes on Op1 - Op2
read_gpt 20 00109b30 CMP             R4, #0; Set cond. codes on Op1 - Op2
read_gpt 21 00109b38 CMP             R4, #4; Set cond. codes on Op1 - Op2
read_gpt 22 00109b40 SUB             R4, R4, #4; Rd = Op1 - Op2
read_gpt 23 00109b4c ADDS            R0, R4, #1; Rd = Op1 + Op2
read_gpt 24 00109b54 LDRB            R1, [R7],#1; Load from Memory
read_gpt 25 00109b68 SUB             R9, R9, #4; Rd = Op1 - Op2
read_gpt 26 00109b6c CMP             R9, #0; Set cond. codes on Op1 - Op2
read_gpt 27 00109b74 LDR             R0, [R8,#0xC]; Load from Memory
read_gpt 28 00109b80 MOV             R0, #9; Rd = Op2
read_gpt 29 00109b88 LDR             R0, [R8,#0x34]; Load from Memory
read_gpt 30 00109bcc ADD             R2, R2, #1; Rd = Op1 + Op2
read_gpt 31 00109bd8 MOV             R0, #2; Rd = Op2
read_gpt 32 00109be0 STR             R3, [R0,#0x28]; Store to Memory
read_gpt 33 00109bf4 LDR             R1, [R0,#0x2C]; Load from Memory
read_gpt 34 00109c00 LDR             R1, [R0,#0x2C]; Load from Memory
read_gpt 35 00109c20 MOV             R0, #0; Rd = Op2
sub_109C50 0 00109c50 STMFD           SP!, {R4,LR}; Store Block to Memory
sub_109CA4 0 00109ca4 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_109CA4 1 00109cbc MOV             R3, #0; a4
sub_109CA4 2 00109cd0 LDR             R0, [R4,#0x28]; Load from Memory
sub_109CA4 3 00109cf8 LDR             R1, [R4,#0x34]; Load from Memory
sub_109CA4 4 00109d10 LDR             R1, [R4,#0x34]; Load from Memory
sub_109D64 0 00109d64 CMP             R1, #0; Set cond. codes on Op1 - Op2
sub_109D64 1 00109d70 CMP             R0, #1; Set cond. codes on Op1 - Op2
sub_109D64 2 00109d78 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_109D64 3 00109d8c BX              LR; Branch to/from Thumb mode
sub_109D64 4 00109d90 MOV             R0, #2; Rd = Op2
sub_109DA0 0 00109da0 CMP             R1, #0; Set cond. codes on Op1 - Op2
sub_109DA0 1 00109dac CMP             R0, #1; Set cond. codes on Op1 - Op2
sub_109DA0 2 00109db4 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_109DA0 3 00109dc8 BX              LR; Branch to/from Thumb mode
sub_109DA0 4 00109dcc MOV             R0, #1; Rd = Op2
sub_109DDC 0 00109ddc CMP             R1, #0; Set cond. codes on Op1 - Op2
sub_109DDC 1 00109de8 STMFD           SP!, {R4,LR}; Store Block to Memory
sub_109DDC 2 00109e04 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_109DDC 3 00109e10 LDR             R0, [R1,#0xB0]; Load from Memory
sub_109DDC 4 00109e28 LDMFD           SP!, {R4,PC}; Load Block from Memory
sub_109DDC 5 00109e2c LDR             R0, [R1,#0xC0]; Load from Memory
sub_109E48 0 00109e48 STMFD           SP!, {R4-R12,LR}; Store Block to Memory
sub_109E48 1 00109e68 CMP             R5, #0; Set cond. codes on Op1 - Op2
sub_109E48 2 00109e74 LDRB            R0, [R6,#0x31]; Load from Memory
sub_109E48 3 00109e84 LDR             R0, [R6,#8]; Load from Memory
sub_109E48 4 00109e98 LDR             R0, [R6,#4]; Load from Memory
sub_109E48 5 00109eac LDR             R1, [R1,#0x18]; Load from Memory
sub_109E48 6 00109eb8 UBFX            R2, R1, #0x18, #3; Unsigned Bit Field Extract
sub_109E48 7 00109ec4 UBFX            R1, R1, #0x15, #3; Unsigned Bit Field Extract
sub_109E48 8 00109ed4 MOV             R1, #0x10; Rd = Op2
sub_109E48 9 00109ef4 MOV             R2, #8; Rd = Op2
sub_109E48 10 00109f0c STR             R4, [R5,#0]; Store to Memory
sub_109E48 11 00109f18 SUB             R9, R1, R12; Rd = Op1 - Op2
sub_109E48 12 00109f34 MOV             LR, R2; Rd = Op2
sub_109E48 13 00109f44 ADD             R10, R7, R0,LSL#3; Rd = Op1 + Op2
sub_109E48 14 00109f54 CMP             R9, #0; Set cond. codes on Op1 - Op2
sub_109E48 15 00109f5c ADD             R0, LR, R12; Rd = Op1 + Op2
sub_109E48 16 00109f6c LDR             R0, [R6,#8]; Load from Memory
sub_109E48 17 00109f7c MOV             R4, #0; Rd = Op2
sub_109E48 18 00109f80 CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_109E48 19 00109f88 B               loc_109F9C; Branch
sub_109E48 20 00109f8c ADD             R0, R0, #1; Rd = Op1 + Op2
sub_109E48 21 00109f98 B               loc_109F6C; Branch
sub_109E48 22 00109f9c LDR             R1, =dword_8004128; Load from Memory
sub_109E48 23 00109fb8 CMP             R5, #0; Set cond. codes on Op1 - Op2
sub_109E48 24 00109fc0 LDRB            R0, [R6,#0x31]; Load from Memory
sub_109E48 25 00109fc8 MOV             R2, #0x3C; Rd = Op2
sub_10A004 0 0010a004 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_10A004 1 0010a014 ADD             R1, R4, #4; Rd = Op1 + Op2
sub_10A004 2 0010a024 LDR             R0, [R4,#4]; Load from Memory
sub_10A004 3 0010a038 MOV             R0, R5; Rd = Op2
sub_10A040 0 0010a040 STMFD           SP!, {R4,LR}; Store Block to Memory
sub_10A040 1 0010a050 CMP             R0, #4; Set cond. codes on Op1 - Op2
sub_10A040 2 0010a05c CMP             R0, #1; Set cond. codes on Op1 - Op2
sub_10A040 3 0010a068 MOV             R0, #0; Rd = Op2
sub_10A040 4 0010a06c LDMFD           SP!, {R4,PC}; Load Block from Memory
sub_10A070 0 0010a070 LDR             R1, [R0,#0]; Load from Memory
sub_10A070 1 0010a07c LDR             R0, [R0,#0x18]; Load from Memory
sub_10A070 2 0010a088 UBFX            R1, R0, #0x18, #3; Unsigned Bit Field Extract
sub_10A070 3 0010a094 UBFX            R0, R0, #0x15, #3; Unsigned Bit Field Extract
sub_10A070 4 0010a0a8 MOV             R0, #0; Rd = Op2
sub_10A070 5 0010a0ac BX              LR; Branch to/from Thumb mode
sub_10A0B0 0 0010a0b0 STMFD           SP!, {R4-R9}; Store Block to Memory
sub_10A0B0 1 0010a0c0 LDR             R7, [R1,#0]; Load from Memory
sub_10A0B0 2 0010a0d4 LDRH            R0, [R7,#0x2C]; Load from Memory
sub_10A0B0 3 0010a0f8 CMP             R4, #0x280; Set cond. codes on Op1 - Op2
sub_10A0B0 4 0010a100 MOV             R0, #0x117; Rd = Op2
sub_10A0B0 5 0010a104 LDMFD           SP!, {R4-R9}; Load Block from Memory
sub_10A0B0 6 0010a10c LDMFD           SP!, {R4-R9}; Load Block from Memory
sub_10A0B0 7 0010a118 LDR             R3, [R1,#4]; Load from Memory
sub_10A0B0 8 0010a128 CMP             R3, #0; Set cond. codes on Op1 - Op2
sub_10A0B0 9 0010a13c CMP             R6, #0; Set cond. codes on Op1 - Op2
sub_10A0B0 10 0010a144 CMP             R6, R3; Set cond. codes on Op1 - Op2
sub_10A0B0 11 0010a14c LDR             R0, [R3,#0x18]; Load from Memory
sub_10A0B0 12 0010a168 CMP             R5, #1; Set cond. codes on Op1 - Op2
sub_10A0B0 13 0010a174 MOV             R0, #0x126; Rd = Op2
sub_10A0B0 14 0010a178 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_10A0B0 15 0010a180 ADD             R0, R9, #0x28; Rd = Op1 + Op2
sub_10A0B0 16 0010a194 LDMFD           SP!, {R4-R9}; Load Block from Memory
sub_10A0B0 17 0010a1a0 ADD             R6, R0, R12; Rd = Op1 + Op2
sub_10A0B0 18 0010a1b0 CMP             R12, #0x280; Set cond. codes on Op1 - Op2
sub_10A0B0 19 0010a1b8 CMP             R8, #0x800; Set cond. codes on Op1 - Op2
sub_10A0B0 20 0010a1c8 ADD             R3, R8, R12; Rd = Op1 + Op2
sub_10A0B0 21 0010a1dc MOV             R0, #0x119; Rd = Op2
sub_10A0B0 22 0010a1e8 STR             R7, [R2,#0]; Store to Memory
sub_10A0B0 23 0010a21c CMP             R1, #0; Set cond. codes on Op1 - Op2
sub_10A0B0 24 0010a228 LDR             R0, [R1,#0x24]; Load from Memory
sub_10A0B0 25 0010a238 LDR             R4, [R1,#0x14]; Load from Memory
sub_10A0B0 26 0010a248 LDR             R8, [R1,#0x1C]; Load from Memory
sub_10A0B0 27 0010a258 ANDS            R4, R0, #3; Rd = Op1 & Op2
sub_10A0B0 28 0010a27c MOV             R0, #0x111; Rd = Op2
sub_10A0B0 29 0010a280 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_10A0B0 30 0010a288 LDR             R8, [R1,#0x1C]; Load from Memory
sub_10A0B0 31 0010a2a4 CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_10A0B0 32 0010a2ac ADD             R0, R6, R8; Rd = Op1 + Op2
sub_10A0B0 33 0010a2c0 STR             R0, [R2,#0x24]; Store to Memory
sub_10A0B0 34 0010a2d4 LDR             R0, [R1,#0x14]; Load from Memory
sub_10A0B0 35 0010a2e4 LDRH            R0, [R7,#0x2C]; Load from Memory
sub_10A0B0 36 0010a2f8 CMP             R3, #0; Set cond. codes on Op1 - Op2
sub_10A0B0 37 0010a308 CMP             R1, #0; Set cond. codes on Op1 - Op2
sub_10A0B0 38 0010a314 LDR             R7, [R3,#0x18]; Load from Memory
sub_10A0B0 39 0010a324 ADD             R3, R3, #0x20; Rd = Op1 + Op2
sub_10A0B0 40 0010a330 MOV             R3, R6; Rd = Op2
sub_10A0B0 41 0010a334 CMP             R3, #0; Set cond. codes on Op1 - Op2
sub_10A0B0 42 0010a33c ADD             R1, R5, R12; Rd = Op1 + Op2
sub_10A35C 0 0010a35c STMFD           SP!, {R4-R11,LR}; Store Block to Memory
sub_10A35C 1 0010a37c LDR             R1, [R5,#0x18]; Load from Memory
sub_10A35C 2 0010a390 MOV             R4, #1; Rd = Op2
sub_10A35C 3 0010a3e8 LDR             R0, [R5,#4]; Load from Memory
sub_10A35C 4 0010a3fc LDR             R0, [R5,#4]; Load from Memory
sub_10A35C 5 0010a410 MOV             R1, #8; Rd = Op2
sub_10A35C 6 0010a43c MOV             R1, #0x20; Rd = Op2
sub_10A35C 7 0010a464 B               loc_10A48C; Branch
sub_10A35C 8 0010a468 MOV             R0, #0x102; Rd = Op2
sub_10A35C 9 0010a46c ADD             SP, SP, #0x54; Rd = Op1 + Op2
sub_10A35C 10 0010a474 MOV             R2, #0x20; Rd = Op2
sub_10A35C 11 0010a48c MOV             R7, R0; Rd = Op2
sub_10A35C 12 0010a49c MOVS            R0, R7; Rd = Op2
sub_10A35C 13 0010a4a8 B               loc_10A4B0; Branch
sub_10A35C 14 0010a4ac MOV             R0, #0; Rd = Op2
sub_10A35C 15 0010a4b0 LDR             R1, [R5,#8]; Load from Memory
sub_10A35C 16 0010a4c4 ADD             SP, SP, #0x54; Rd = Op1 + Op2
sub_10A35C 17 0010f0d4 B               loc_10F0D4; Branch
sub_10A4EC 0 0010a4ec LDRB            R1, [R0,#0]; Load from Memory
sub_10A4EC 1 0010a500 LDRB            R1, [R0,#2]; Load from Memory
sub_10A4EC 2 0010a514 MOV             R0, #0x112; Rd = Op2
sub_10A4EC 3 0010a518 BX              LR; Branch to/from Thumb mode
sub_10A4EC 4 0010a51c LDRB            R1, [R0,#4]; Load from Memory
sub_10A4EC 5 0010a52c LDRB            R1, [R0,#6]; Load from Memory
sub_10A4EC 6 0010a53c LDRH            R1, [R0,#0x28]; Load from Memory
sub_10A4EC 7 0010a54c LDRH            R1, [R0,#0x2A]; Load from Memory
sub_10A4EC 8 0010a55c LDRH            R0, [R0,#0x2C]; Load from Memory
inner_inner_inner_auth 0 0010a5c0 STMFD           SP!, {R0-R12,LR}; Store Block to Memory
inner_inner_inner_auth 1 0010a5e4 CMP             R5, #0; Set cond. codes on Op1 - Op2
inner_inner_inner_auth 2 0010a5f4 LDR             R0, [R5,#4]; Load from Memory
inner_inner_inner_auth 3 0010a608 CMP             R6, #0; Set cond. codes on Op1 - Op2
inner_inner_inner_auth 4 0010a614 MOV             R2, #0x58; Rd = Op2
inner_inner_inner_auth 5 0010a66c B               loc_10A678; Branch
inner_inner_inner_auth 6 0010a670 MOV             R4, #0x102; Rd = Op2
inner_inner_inner_auth 7 0010a678 LDRB            R1, [R0,#2]; Load from Memory
inner_inner_inner_auth 8 0010a68c MOV             R4, #0x112; Rd = Op2
inner_inner_inner_auth 9 0010a690 CMP             R4, #0; Set cond. codes on Op1 - Op2
inner_inner_inner_auth 10 0010a698 B               loc_10A6F0; Branch
inner_inner_inner_auth 11 0010a69c LDRB            R1, [R0,#4]; Load from Memory
inner_inner_inner_auth 12 0010a6ac LDRB            R1, [R0,#6]; Load from Memory
inner_inner_inner_auth 13 0010a6bc LDRH            R1, [R0,#0x28]; Load from Memory
inner_inner_inner_auth 14 0010a6cc LDRH            R1, [R0,#0x2A]; Load from Memory
inner_inner_inner_auth 15 0010a6dc LDRH            R1, [R0,#0x2C]; Load from Memory
inner_inner_inner_auth 16 0010a6f0 LDRH            R10, [R0,#0x2C]; Load from Memory
inner_inner_inner_auth 17 0010a708 LDR             R0, [R1,#0]; Load from Memory
inner_inner_inner_auth 18 0010a714 LDR             R0, [R1,#0x18]; Load from Memory
inner_inner_inner_auth 19 0010a720 UBFX            R2, R0, #0x18, #3; Unsigned Bit Field Extract
inner_inner_inner_auth 20 0010a72c UBFX            R0, R0, #0x15, #3; Unsigned Bit Field Extract
inner_inner_inner_auth 21 0010a744 LDR             R0, [R1,#0x14]; Load from Memory
inner_inner_inner_auth 22 0010a754 MOV             R4, #0x11E; Rd = Op2
inner_inner_inner_auth 23 0010a760 LDR             R9, [R6,#0]; Load from Memory
inner_inner_inner_auth 24 0010a774 LDR             R11, [R2,R0,LSL#3]; Load from Memory
inner_inner_inner_auth 25 0010a780 ADD             R11, R12, R0,LSL#3; Rd = Op1 + Op2
inner_inner_inner_auth 26 0010a790 ADD             R0, R0, #1; Rd = Op1 + Op2
inner_inner_inner_auth 27 0010a79c MOV             R4, #0x11D; Rd = Op2
inner_inner_inner_auth 28 0010a7a8 ADD             R3, R3, #1; Rd = Op1 + Op2
inner_inner_inner_auth 29 0010a7b8 MOV             R4, #0; Rd = Op2
inner_inner_inner_auth 30 0010a7bc CMP             R4, #0; Set cond. codes on Op1 - Op2
inner_inner_inner_auth 31 0010a7c4 LDR             R0, [SP,#0]; Load from Memory
inner_inner_inner_auth 32 0010a7dc LDR             R0, [SP,#0]; Load from Memory
inner_inner_inner_auth 33 0010a7f4 LDR             R0, [SP,#0]; Load from Memory
inner_inner_inner_auth 34 0010a80c LDR             R10, [R8,#0]; Load from Memory
inner_inner_inner_auth 35 0010a82c LDR             R2, [R0,#0]; Load from Memory
inner_inner_inner_auth 36 0010a838 LDR             R2, [R0,#0x18]; Load from Memory
inner_inner_inner_auth 37 0010a844 UBFX            R3, R2, #0x18, #3; Unsigned Bit Field Extract
inner_inner_inner_auth 38 0010a850 UBFX            R2, R2, #0x15, #3; Unsigned Bit Field Extract
inner_inner_inner_auth 39 0010a868 MOV             R2, #8; Rd = Op2
inner_inner_inner_auth 40 0010a890 CMP             R2, R12; Set cond. codes on Op1 - Op2
inner_inner_inner_auth 41 0010a898 ADD             R2, R2, R4; Rd = Op1 + Op2
inner_inner_inner_auth 42 0010a8a4 CMP             R3, #0; Set cond. codes on Op1 - Op2
inner_inner_inner_auth 43 0010a8ac ADD             R1, R1, #1; Rd = Op1 + Op2
inner_inner_inner_auth 44 0010a8bc MOV             R4, #0x123; Rd = Op2
inner_inner_inner_auth 45 0010a8c0 CMP             R4, #0; Set cond. codes on Op1 - Op2
inner_inner_inner_auth 46 0010a8c8 MOV             R2, #0x3C; Rd = Op2
inner_inner_inner_auth 47 0010a8f8 CMP             R7, #0; Set cond. codes on Op1 - Op2
inner_inner_inner_auth 48 0010a900 LDR             R0, =dword_8004128; Load from Memory
inner_inner_inner_auth 49 0010a90c ADD             SP, SP, #0x10; Rd = Op1 + Op2
inner_inner_inner_auth 50 0010a918 MOV             R4, #0; Rd = Op2
inner_inner_inner_auth 51 0010a920 MOV             R0, #2; Rd = Op2
sub_10A934 0 0010a934 STMFD           SP!, {R4-R7,LR}; Store Block to Memory
sub_10A934 1 0010a960 LDR             R0, =sub_100AA0; Load from Memory
sub_10A934 2 0010a9a4 ADD             R1, SP, #0x10; Rd = Op1 + Op2
sub_10A934 3 0010a9b8 ADD             R1, SP, #0x254; Rd = Op1 + Op2
sub_10A934 4 0010a9cc ADD             R1, SP, #0x258; Rd = Op1 + Op2
sub_10A934 5 0010a9e0 LDR             R0, [R4,#0xC]; Load from Memory
sub_10A934 6 0010aa4c MOV             R5, R0; Rd = Op2
sub_10A934 7 0010aa5c ADD             R0, SP, #0x10; Rd = Op1 + Op2
sub_10A934 8 0010aa6c MOV             R5, R0; Rd = Op2
sub_10A934 9 0010aa70 ADD             SP, SP, #0x284; Rd = Op1 + Op2
sub_10A934 10 0010aa7c LDR             R0, =dword_10F75C; Load from Memory
sub_10A934 11 0010aaac LDR             R1, [R4,#4]; Load from Memory
sub_10A934 12 0010aae4 MOV             R2, #0x20; Rd = Op2
sub_10A934 13 0010aafc MOV             R5, R0; Rd = Op2
sub_10A934 14 0010ab0c B               loc_10AA70; Branch
sub_10A934 15 0010f0d4 B               loc_10F0D4; Branch
sub_10AB30 0 0010ab30 STMFD           SP!, {R4-R11,LR}; Store Block to Memory
sub_10AB30 1 0010ab50 LDR             R1, =0x50425342; Load from Memory
sub_10AB30 2 0010ab64 MOV             R2, #0; Rd = Op2
sub_10AB30 3 0010ab78 MOV             R0, #2; Rd = Op2
sub_10AB30 4 0010ab7c ADD             SP, SP, #0x400; Rd = Op1 + Op2
sub_10AB30 5 0010ab88 CMP             R7, #0; Set cond. codes on Op1 - Op2
sub_10AB30 6 0010ab9c LDR             R1, [R7,#4]; Load from Memory
sub_10AB30 7 0010abac LDR             R0, [R7,#8]; Load from Memory
sub_10AB30 8 0010abb8 LDR             R1, [R7,#0xC]; Load from Memory
sub_10AB30 9 0010abc8 LDR             R0, [R7,#0x10]; Load from Memory
sub_10AB30 10 0010abd4 LDR             R1, [R7,#0x14]; Load from Memory
sub_10AB30 11 0010abe4 CMP             R1, #0xD800; Set cond. codes on Op1 - Op2
sub_10AB30 12 0010abec LDR             R0, [R7,#0x18]; Load from Memory
sub_10AB30 13 0010abf8 LDR             R1, [R7,#0x1C]; Load from Memory
sub_10AB30 14 0010ac08 CMP             R1, #0x200; Set cond. codes on Op1 - Op2
sub_10AB30 15 0010ac10 MOV             R2, #0; Rd = Op2
sub_10AB30 16 0010ac2c MOV             R2, #0x50; Rd = Op2
sub_10AB30 17 0010ac8c LDR             R0, [R4,#0x68]; Load from Memory
sub_10AB30 18 0010ac98 MOV             R5, #0; Rd = Op2
sub_10AB30 19 0010acb8 MOV             R2, #0x20; Rd = Op2
sub_10AB30 20 0010acc8 ADD             R2, R6, #0x20; Rd = Op1 + Op2
sub_10AB30 21 0010ace0 MOV             R0, R4; Rd = Op2
sub_10AB30 22 0010acf0 MOV             R1, R6; Rd = Op2
sub_10AB30 23 0010ad04 MOV             R0, R4; Rd = Op2
sub_10AB30 24 0010ad10 STR             R1, [R0,#0x28]!; Store to Memory
sub_10AB30 25 0010ad20 MOV             R5, #7; Rd = Op2
sub_10AB30 26 0010ad24 MOVS            R0, R5; Rd = Op2
sub_10AB30 27 0010ad2c B               loc_10ADC0; Branch
sub_10AB30 28 0010ad30 ADD             R1, R6, #0x28; Rd = Op1 + Op2
sub_10AB30 29 0010ad44 MOV             R0, R4; Rd = Op2
sub_10AB30 30 0010ad54 ADD             R0, R6, #0x2C; Rd = Op1 + Op2
sub_10AB30 31 0010ad64 MOV             R0, R4; Rd = Op2
sub_10AB30 32 0010ad74 ADD             R3, R6, #0x3C; Rd = Op1 + Op2
sub_10AB30 33 0010ad90 LDR             R1, [SP,#0x3D8]; Load from Memory
sub_10AB30 34 0010adb0 MOV             R2, #0x40; Rd = Op2
sub_10AB30 35 0010adc0 LDR             R0, [SP,#0x3D4]; Load from Memory
sub_10AB30 36 0010adec LDR             R2, [R7,#0x14]; Load from Memory
sub_10AB30 37 0010ae14 LDR             R0, [R7,#0x20]; Load from Memory
sub_10AB30 38 0010ae24 CMP             R1, R0,LSR#16; Set cond. codes on Op1 - Op2
sub_10AB30 39 0010ae34 LDR             R2, [SP,#0x3EC]; Load from Memory
sub_10AB30 40 0010ae4c ADD             SP, SP, #0x400; Rd = Op1 + Op2
sub_10AB30 41 0010ae5c CMP             R1, R0; Set cond. codes on Op1 - Op2
sub_10AB30 42 0010ae64 MOV             R2, R1; Rd = Op2
sub_10AB30 43 0010ae84 LDR             R1, [SP,#0x3EC]; Load from Memory
sub_10AB30 44 0010ae9c LDR             R1, [SP,#0x3E8]; Load from Memory
sub_10AB30 45 0010aec8 LDR             R0, [R7,#0x14]; Load from Memory
sub_10AB30 46 0010aeec CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_10AB30 47 0010aef4 CMP             R5, #0; Set cond. codes on Op1 - Op2
sub_10AB30 48 0010aefc LDR             R0, [SP,#0x408]; Load from Memory
sub_10AB30 49 0010af0c CMP             R8, #0; Set cond. codes on Op1 - Op2
sub_10AB30 50 0010af14 LDR             R0, [R8,#0x384]; Load from Memory
sub_10AB30 51 0010af24 MOV             R0, #2; Rd = Op2
sub_10AB30 52 0010af38 STR             R9, [SP,#0x14]; Store to Memory
sub_10AB30 53 0010af54 LDR             R2, [R11,#8]; Load from Memory
sub_10AB30 54 0010af74 MOVS            R0, R4; Rd = Op2
sub_10AB30 55 0010af80 STR             R1, [R0,#0x24]; Store to Memory
sub_10AB30 56 0010af90 MOV             R0, #2; Rd = Op2
sub_10AB30 57 0010af98 RSB             R0, R6, R6,LSL#4; Rd = Op2 - Op1
sub_10AB30 58 0010afb0 LDR             R0, [SP,#0x14]; Load from Memory
sub_10AB30 59 0010afbc RSB             R0, R6, R6,LSL#4; Rd = Op2 - Op1
sub_10AB30 60 0010b000 LDR             R2, [SP,#0x10]; Load from Memory
sub_10AB30 61 0010b020 RSB             R0, R6, R6,LSL#4; Rd = Op2 - Op1
sub_10AB30 62 0010b03c CMP             R1, #3; Set cond. codes on Op1 - Op2
sub_10AB30 63 0010b048 RSB             R1, R6, R6,LSL#4; Rd = Op2 - Op1
sub_10AB30 64 0010b078 STR             R1, [SP,#0x10]; Store to Memory
sub_10AB30 65 0010b08c LDR             R1, [SP,#0x40C]; Load from Memory
sub_10AB30 66 0010b0b4 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_10AB30 67 0010b0bc ADD             R5, SP, #0x18; Rd = Op1 + Op2
sub_10AB30 68 0010b0d8 LDR             R0, [SP,#0x3C8]; Load from Memory
sub_10AB30 69 0010b0e4 LDR             R1, [SP,#0x3F0]; Load from Memory
sub_10AB30 70 0010b104 LDR             R0, [SP,#0x3F0]; Load from Memory
sub_10AB30 71 0010b11c STR             R2, [R4,#0x30]; Store to Memory
sub_10AB30 72 0010b128 ADD             SP, SP, #0x400; Rd = Op1 + Op2
sub_10AB30 73 0010b138 LDR             R0, [SP,#0x3F8]; Load from Memory
sub_10AB30 74 0010b174 LDR             R1, [SP,#0x3E8]; Load from Memory
sub_10AB30 75 0010b1ac EOR             R3, R1, #2; Rd = Op1 ^ Op2
sub_10AB30 76 0010b1c0 MOV             R0, R1; Rd = Op2
sub_10AB30 77 0010b1d8 STR             R2, [R4,#0x30]; Store to Memory
sub_10AB30 78 0010b1e4 ADD             SP, SP, #0x400; Rd = Op1 + Op2
sub_10AB30 79 0010b1f4 EOR             R3, R1, #3; Rd = Op1 ^ Op2
sub_10AB30 80 0010b200 LDR             R2, [SP,#0x3E4]; Load from Memory
sub_10AB30 81 0010b210 CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_10AB30 82 0010b224 STR             R3, [R4,#0x24]!; Store to Memory
sub_10AB30 83 0010b238 STR             R1, [R10,#0x18]; Store to Memory
sub_10AB30 84 0010b254 MOV             R0, R1; Rd = Op2
sub_10AB30 85 0010b26c STR             R2, [R4,#0x30]; Store to Memory
sub_10AB30 86 0010b278 ADD             SP, SP, #0x400; Rd = Op1 + Op2
sub_10AB30 87 0010b288 EOR             R3, R1, #1; Rd = Op1 ^ Op2
sub_10AB30 88 0010b294 LDR             R2, [SP,#0x404]; Load from Memory
sub_10AB30 89 0010b2a4 CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_10AB30 90 0010b2b8 STR             R3, [R4,#0x24]!; Store to Memory
sub_10AB30 91 0010b2cc STR             R1, [R10,#0x48]; Store to Memory
sub_10B2E4 0 0010b2e4 STMFD           SP!, {R3-R7,LR}; Store Block to Memory
sub_10B2E4 1 0010b304 CMP             R6, R0; Set cond. codes on Op1 - Op2
sub_10B2E4 2 0010b31c MOV             R0, #1; Rd = Op2
sub_10B2E4 3 0010b324 MOV             R2, #1; Rd = Op2
sub_10B2E4 4 0010b33c CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_10B2E4 5 0010b34c LDMFD           SP!, {R3-R7,PC}; Load Block from Memory
sub_10B2E4 6 0010b350 ADD             R0, R4, #1; Rd = Op1 + Op2
sub_10B2E4 7 0010b360 B               loc_10B31C; Branch
sub_10B368 0 0010b368 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_10B368 1 0010b374 STMFD           SP!, {R4,LR}; Store Block to Memory
sub_10B38C 0 0010b38c CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_10B38C 1 0010b398 LDR             R1, =sub_10B958; Load from Memory
sub_10B38C 2 0010b3bc BX              LR; Branch to/from Thumb mode
sub_10B3D0 0 0010b3d0 STMFD           SP!, {R4-R11,LR}; Store Block to Memory
sub_10B3D0 1 0010b410 LDR             R0, [R4,#0]; Load from Memory
sub_10B3D0 2 0010b424 LDR             R1, =sub_100CA8; Load from Memory
sub_10B3D0 3 0010b434 MOV             R2, #0xD8; Rd = Op2
sub_10B3D0 4 0010b450 MOV             R1, R11; Rd = Op2
sub_10B3D0 5 0010b468 MOV             R11, #1; Rd = Op2
sub_10B3D0 6 0010b494 LDR             R3, [R4,#0x10]; Load from Memory
sub_10B3D0 7 0010b4a8 B               loc_10B4C8; Branch
sub_10B3D0 8 0010b4ac LDR             R12, [R4,#0x18]; Load from Memory
sub_10B3D0 9 0010b4c4 B               loc_10B504; Branch
sub_10B3D0 10 0010b4c8 STR             R5, [SP,#0xE0]; Store to Memory
sub_10B3D0 11 0010b4ec LDR             R2, [R4,#0x14]; Load from Memory
sub_10B3D0 12 0010b504 LDR             R1, [R4,#0xC]; Load from Memory
sub_10B3D0 13 0010b51c MOV             R5, #6; Rd = Op2
sub_10B3D0 14 0010b520 LDR             R0, [R4,#4]; Load from Memory
sub_10B3D0 15 0010b534 ADD             SP, SP, #0xFC; Rd = Op1 + Op2
sub_10B540 0 0010b540 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_10B540 1 0010b54c LDR             R1, =sub_10B59C; Load from Memory
sub_10B540 2 0010b580 BX              LR; Branch to/from Thumb mode
sub_10B59C 0 0010b59c STMFD           SP!, {R4-R7,LR}; Store Block to Memory
sub_10B59C 1 0010b5c4 MOV             R7, #0xA6000; Rd = Op2
sub_10B59C 2 0010b600 LDR             R1, =(loc_10D434+2); Load from Memory
sub_10B59C 3 0010b618 LDR             R0, [R5,#0x30]; Load from Memory
sub_10B59C 4 0010b630 STR             R0, [SP,#0]; Store to Memory
sub_10B59C 5 0010b64c ADD             SP, SP, #0xC; Rd = Op1 + Op2
sub_10B59C 6 0010b654 LDR             R0, [R7,#0x80]; Load from Memory
sub_10B660 0 0010b660 STMFD           SP!, {R3-R7,LR}; Store Block to Memory
sub_10B660 1 0010b688 CMP             R5, #0; Set cond. codes on Op1 - Op2
sub_10B660 2 0010b694 MOV             R2, #0xA6000; Rd = Op2
sub_10B660 3 0010b6b0 LDR             R1, [R2,#0x1C]; Load from Memory
sub_10B660 4 0010b6c8 MOV             R0, R4; Rd = Op2
sub_10B660 5 0010b6d8 LDR             R1, [R4,#0]; Load from Memory
sub_10B660 6 0010b6e8 MOV             R1, #1; Rd = Op2
sub_10B660 7 0010b6fc EOR             R2, R1, R1,LSR#4; Rd = Op1 ^ Op2
sub_10B660 8 0010b714 STR             R7, [R4,#0]; Store to Memory
sub_10B660 9 0010b720 LDMFD           SP!, {R3-R7,PC}; Load Block from Memory
sub_10B660 10 0010b724 MOV             R0, #2; Rd = Op2
sub_10B660 11 0010b72c STR             R7, [R6,#0]; Store to Memory
sub_10B660 12 0010b73c STR             R7, [R6,#0]; Store to Memory
sub_10B660 13 0010b74c LDR             R2, [R5,#0]; Load from Memory
sub_10B660 14 0010b758 LDMFD           SP!, {R3-R7,PC}; Load Block from Memory
sub_10B75C 0 0010b75c CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_10B75C 1 0010b76c MOV             R2, #0xA6000; Rd = Op2
sub_10B75C 2 0010b780 BX              LR; Branch to/from Thumb mode
sub_10B784 0 0010b784 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_10B784 1 0010b7b8 MOV             R6, #0xA6000; Rd = Op2
sub_10B784 2 0010b7d4 LDR             R0, [R6,#0xC8]; Load from Memory
sub_10B784 3 0010b878 LDR             R0, [R0,#0x30]; Load from Memory
sub_10B784 4 0010b890 LDR             R1, =(loc_10D434+2); Load from Memory
sub_10B784 5 0010b8a0 BL              sub_10F450; Branch with Link
sub_10B784 6 0010b8a4 MOV             R0, R5; Rd = Op2
sub_10B784 7 0010b8a8 ADD             SP, SP, #0x10; Rd = Op1 + Op2
sub_10B8B4 0 0010b8b4 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_10B8B4 1 0010b8c4 MOV             R2, #0xA6000; Rd = Op2
sub_10B8B4 2 0010b8d0 MOV             R0, R1; Rd = Op2
sub_10B8D8 0 0010b8d8 CMP             R1, #0; Set cond. codes on Op1 - Op2
sub_10B8D8 1 0010b8ec MOV             R3, #0xA6000; Rd = Op2
sub_10B8D8 2 0010b900 MOV             R0, R2; Rd = Op2
sub_10B908 0 0010b908 CMP             R1, #0; Set cond. codes on Op1 - Op2
sub_10B908 1 0010b91c MOV             R12, #0xA6000; Rd = Op2
sub_10B908 2 0010b938 CMP             R0, #2; Set cond. codes on Op1 - Op2
sub_10B908 3 0010b944 LDR             R0, [R12,#0x2C]; Load from Memory
sub_10B908 4 0010b950 MOV             R0, R3; Rd = Op2
sub_10B908 5 0010b954 BX              LR; Branch to/from Thumb mode
sub_10B958 0 0010b958 CMP             R1, #0; Set cond. codes on Op1 - Op2
sub_10B958 1 0010b964 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_10B958 2 0010b990 LDR             R0, [R5,#0]; Load from Memory
sub_10B958 3 0010b9a4 LDR             R0, [R5,#8]; Load from Memory
sub_10B958 4 0010b9b8 LDR             R0, [R5,#0x14]; Load from Memory
sub_10B958 5 0010b9d4 MOV             R2, #0x1C; Rd = Op2
sub_10B958 6 0010b9e8 MOV             R2, #0x200; Rd = Op2
sub_10B958 7 0010ba00 LDR             R0, =sub_100F40; Load from Memory
sub_10B958 8 0010ba38 MOV             R0, #0; Rd = Op2
sub_10BA74 0 0010ba74 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_10BA74 1 0010ba80 STMFD           SP!, {R0-R3}; Store Block to Memory
sub_10BAB0 0 0010bab0 STMFD           SP!, {R0-R2,R4-R11,LR}; Store Block to Memory
sub_10BAB0 1 0010bad8 LDR             R0, [R9,#0x384]; Load from Memory
sub_10BAB0 2 0010bae4 CMP             R0, #3; Set cond. codes on Op1 - Op2
sub_10BAB0 3 0010baec LDR             R0, [SP,#0xA38]; Load from Memory
sub_10BAB0 4 0010bafc STR             R0, [R7,#0x30]; Store to Memory
sub_10BAB0 5 0010bb0c MOV             R11, #2; Rd = Op2
sub_10BAB0 6 0010bb14 SUB             R0, R0, #1; Rd = Op1 - Op2
sub_10BAB0 7 0010bb48 MOV             R1, #0; Rd = Op2
sub_10BAB0 8 0010bb64 LDR             R0, [R9,#0x384]; Load from Memory
sub_10BAB0 9 0010bb70 MOV             R2, #0x20; Rd = Op2
sub_10BAB0 10 0010bb90 MOV             R2, #0x14; Rd = Op2
sub_10BAB0 11 0010bbac LDR             R0, [SP,#0xA14]; Load from Memory
sub_10BAB0 12 0010bbb8 CMP             R9, #0; Set cond. codes on Op1 - Op2
sub_10BAB0 13 0010bbc8 CMP             R6, #3; Set cond. codes on Op1 - Op2
sub_10BAB0 14 0010bbd4 CMP             R7, #0; Set cond. codes on Op1 - Op2
sub_10BAB0 15 0010bbe0 STR             R0, [R7,#0x24]!; Store to Memory
sub_10BAB0 16 0010bbf4 RSB             R0, R6, R6,LSL#4; Rd = Op2 - Op1
sub_10BAB0 17 0010bc14 MOVS            R0, R7; Rd = Op2
sub_10BAB0 18 0010bc20 STR             R10, [R0,#0x28]!; Store to Memory
sub_10BAB0 19 0010bc34 LDR             R1, [R8,#0xF4]; Load from Memory
sub_10BAB0 20 0010bc4c MOVS            R1, R7; Rd = Op2
sub_10BAB0 21 0010bc58 MOV             R4, #5; Rd = Op2
sub_10BAB0 22 0010bc60 LDR             LR, [R8,#0xFC]; Load from Memory
sub_10BAB0 23 0010bc78 CMP             R1, #0; Set cond. codes on Op1 - Op2
sub_10BAB0 24 0010bc80 CMP             R2, R0; Set cond. codes on Op1 - Op2
sub_10BAB0 25 0010bc88 LDRB            R3, [R1,R0]; Load from Memory
sub_10BAB0 26 0010bc98 ADD             R3, R0, #1; Rd = Op1 + Op2
sub_10BAB0 27 0010bcac ADD             R3, R0, #3; Rd = Op1 + Op2
sub_10BAB0 28 0010bcc0 ADD             R0, R0, LR; Rd = Op1 + Op2
sub_10BAB0 29 0010bcd8 MOV             R4, #1; Rd = Op2
sub_10BAB0 30 0010bcdc CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_10BAB0 31 0010bce4 MOVS            R0, R7; Rd = Op2
sub_10BAB0 32 0010bcf0 STR             R4, [R0,#0x28]!; Store to Memory
sub_10BAB0 33 0010bd00 MOV             R4, #3; Rd = Op2
sub_10BAB0 34 0010bd08 MOV             R4, #0; Rd = Op2
sub_10BAB0 35 0010bd10 ADD             R0, SP, #0x400; Rd = Op1 + Op2
sub_10BAB0 36 0010bd2c MOVS            R1, R7; Rd = Op2
sub_10BAB0 37 0010bd38 B               loc_10BE3C; Branch
sub_10BAB0 38 0010bd3c RSB             R0, R5, R5,LSL#4; Rd = Op2 - Op1
sub_10BAB0 39 0010bd68 MOVS            R1, R7; Rd = Op2
sub_10BAB0 40 0010bd74 B               loc_10BE3C; Branch
sub_10BAB0 41 0010bd78 LDR             R0, [SP,#0xA28]; Load from Memory
sub_10BAB0 42 0010bd8c CMP             R0, #3; Set cond. codes on Op1 - Op2
sub_10BAB0 43 0010bd98 MOVS            R1, R7; Rd = Op2
sub_10BAB0 44 0010bda4 STR             R0, [R1,#0x28]!; Store to Memory
sub_10BAB0 45 0010bdb4 MOV             R4, #4; Rd = Op2
sub_10BAB0 46 0010bdbc CMP             R8, #1; Set cond. codes on Op1 - Op2
sub_10BAB0 47 0010bdc8 CMP             R8, #2; Set cond. codes on Op1 - Op2
sub_10BAB0 48 0010bdd4 LDR             R0, [SP,#0xA28]; Load from Memory
sub_10BAB0 49 0010bdec MOVS            R1, R7; Rd = Op2
sub_10BAB0 50 0010bdf8 B               loc_10BE3C; Branch
sub_10BAB0 51 0010bdfc MOV             R2, #0x200; Rd = Op2
sub_10BAB0 52 0010be30 MOVS            R1, R7; Rd = Op2
sub_10BAB0 53 0010be3c STR             R0, [R1,#0x28]!; Store to Memory
sub_10BAB0 54 0010be50 CMP             R8, #1; Set cond. codes on Op1 - Op2
sub_10BAB0 55 0010be5c CMP             R8, #2; Set cond. codes on Op1 - Op2
sub_10BAB0 56 0010be68 MOV             R1, SP; Rd = Op2
sub_10BAB0 57 0010be7c MOVS            R0, R7; Rd = Op2
sub_10BAB0 58 0010be88 STR             R4, [R0,#0x28]!; Store to Memory
sub_10BAB0 59 0010be9c CMP             R8, #1; Set cond. codes on Op1 - Op2
sub_10BAB0 60 0010beac CMP             R8, #2; Set cond. codes on Op1 - Op2
sub_10BAB0 61 0010bebc ADD             R0, R0, R1; Rd = Op1 + Op2
sub_10BAB0 62 0010bed8 LDR             R3, [R2,R0,LSL#2]; Load from Memory
sub_10BAB0 63 0010bee4 MOVS            R1, R7; Rd = Op2
sub_10BAB0 64 0010bef4 STR             R0, [R1,#0x28]!; Store to Memory
sub_10BAB0 65 0010bf04 ADD             R0, R0, #1; Rd = Op1 + Op2
sub_10BAB0 66 0010bf10 CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_10BAB0 67 0010bf18 LDR             R1, [SP,R1,LSL#2]; Load from Memory
sub_10BAB0 68 0010bf28 MOVS            R0, R7; Rd = Op2
sub_10BAB0 69 0010bf34 STR             R1, [R0,#0x28]!; Store to Memory
sub_10BAB0 70 0010bf44 MOV             R4, #9; Rd = Op2
sub_10BAB0 71 0010bf4c CMP             R8, #1; Set cond. codes on Op1 - Op2
sub_10BAB0 72 0010bf54 CMP             R8, #2; Set cond. codes on Op1 - Op2
sub_10BAB0 73 0010bf5c MOVS            R0, R7; Rd = Op2
sub_10BAB0 74 0010bf68 STR             R8, [R0,#0x28]!; Store to Memory
sub_10BAB0 75 0010bf7c LDR             R1, [SP,#0x14]; Load from Memory
sub_10BAB0 76 0010bf8c LDR             R1, [SP,#0x18]; Load from Memory
sub_10BAB0 77 0010bf9c LDR             R1, [SP,#0x1C]; Load from Memory
sub_10BAB0 78 0010bfac LDR             R1, [SP,#0x20]; Load from Memory
sub_10BAB0 79 0010bfbc LDR             R2, [SP,#0x14]; Load from Memory
sub_10BAB0 80 0010bfcc STR             R2, [R0,#0x28]!; Store to Memory
sub_10BAB0 81 0010bfe0 LDR             R1, [SP,#0x20]; Load from Memory
sub_10BAB0 82 0010bff0 LDR             R1, [SP,#0x24]; Load from Memory
sub_10BAB0 83 0010c000 LDR             R1, [SP,#0x28]; Load from Memory
sub_10BAB0 84 0010c010 LDR             R0, [SP,#0x2C]; Load from Memory
sub_10BAB0 85 0010c020 LDR             R0, [SP,#0x30]; Load from Memory
sub_10BAB0 86 0010c030 LDR             R2, [SP,#0x20]; Load from Memory
sub_10BAB0 87 0010c040 STR             R2, [R0,#0x28]!; Store to Memory
sub_10BAB0 88 0010c04c STR             R3, [R7,#0x24]; Store to Memory
sub_10BAB0 89 0010c054 CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_10BAB0 90 0010c05c MOV             R11, #0xA; Rd = Op2
sub_10BAB0 91 0010c064 LDR             R0, [SP,#0xA14]; Load from Memory
sub_10BAB0 92 0010c074 CMP             R11, #0; Set cond. codes on Op1 - Op2
sub_10BAB0 93 0010c07c ADD             SP, SP, #0x800; Rd = Op1 + Op2
sub_10BAB0 94 0010c08c LDR             R0, [R9,#0x384]; Load from Memory
sub_10C0EC 0 0010c0ec STMFD           SP!, {R4-R12,LR}; Store Block to Memory
sub_10C0EC 1 0010c1a4 CMP             R5, #0; Set cond. codes on Op1 - Op2
sub_10C0EC 2 0010c1b0 LDR             R0, [R5,#0x1C]; Load from Memory
sub_10C0EC 3 0010c1c4 LDR             R2, [R7,#0xF0]; Load from Memory
sub_10C0EC 4 0010c1e4 CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_10C0EC 5 0010c1f0 STR             R0, [R4,#0x24]!; Store to Memory
sub_10C0EC 6 0010c200 MOV             R4, #2; Rd = Op2
sub_10C0EC 7 0010c208 LDRD            R2, [R5,#8]; Load pair of registers
sub_10C0EC 8 0010c244 LDR             R1, [R5],#8; Load from Memory
sub_10C0EC 9 0010c254 MOV             R4, #6; Rd = Op2
sub_10C0EC 10 0010c25c LDR             R0, [R5,#8]; Load from Memory
sub_10C0EC 11 0010c278 CMP             R6, #2; Set cond. codes on Op1 - Op2
sub_10C0EC 12 0010c284 CMP             R2, #0x20; Set cond. codes on Op1 - Op2
sub_10C0EC 13 0010c290 MOV             R3, #0x3D4; Rd = Op2
sub_10C0EC 14 0010c2b0 ADD             R1, SP, #0x800; Rd = Op1 + Op2
sub_10C0EC 15 0010c300 ADD             R0, SP, #0x800; Rd = Op1 + Op2
sub_10C0EC 16 0010c334 CMP             R6, #1; Set cond. codes on Op1 - Op2
sub_10C0EC 17 0010c34c CMP             R6, #2; Set cond. codes on Op1 - Op2
sub_10C0EC 18 0010c358 ADD             R3, SP, #0x800; Rd = Op1 + Op2
sub_10C0EC 19 0010c394 LDR             R1, [R5],#8; Load from Memory
sub_10C0EC 20 0010c3a8 B               loc_10C450; Branch
sub_10C0EC 21 0010c3ac MOV             R2, #8; Rd = Op2
sub_10C0EC 22 0010c3c0 ADD             R0, SP, #0xA90; Rd = Op1 + Op2
sub_10C0EC 23 0010c3e8 CMP             R6, #1; Set cond. codes on Op1 - Op2
sub_10C0EC 24 0010c400 CMP             R6, #2; Set cond. codes on Op1 - Op2
sub_10C0EC 25 0010c40c ADD             R3, SP, #0x800; Rd = Op1 + Op2
sub_10C0EC 26 0010c43c LDR             R1, [R5],#8; Load from Memory
sub_10C0EC 27 0010c450 STR             R2, [R4,#0x30]; Store to Memory
sub_10C0EC 28 0010c460 LDR             R1, [R7,#0xF4]; Load from Memory
sub_10C0EC 29 0010c46c LDR             R3, [R7,#0xF0]; Load from Memory
sub_10C0EC 30 0010c47c CMP             R3, #0x200; Set cond. codes on Op1 - Op2
sub_10C0EC 31 0010c484 LDR             R0, [R7,#0xFC]; Load from Memory
sub_10C0EC 32 0010c490 LDR             R2, [R7,#0xF8]; Load from Memory
sub_10C0EC 33 0010c4a0 CMP             R2, #4; Set cond. codes on Op1 - Op2
sub_10C0EC 34 0010c4a8 MOV             R1, #0; Rd = Op2
sub_10C0EC 35 0010c4c0 STR             R2, [R4,#0x30]; Store to Memory
sub_10C0EC 36 0010c4cc MOV             R4, #3; Rd = Op2
sub_10C0EC 37 0010c4d4 MOV             R2, R3; Rd = Op2
sub_10C0EC 38 0010c4e8 LDR             R1, [R7,#0xF0]!; Load from Memory
sub_10C0EC 39 0010c500 MOV             R4, #5; Rd = Op2
sub_10C0EC 40 0010c508 LDR             R2, [R7,#0xF8]; Load from Memory
sub_10C0EC 41 0010c520 CMP             R1, #0; Set cond. codes on Op1 - Op2
sub_10C0EC 42 0010c528 CMP             R2, R0; Set cond. codes on Op1 - Op2
sub_10C0EC 43 0010c530 LDRB            R12, [R1,R0]; Load from Memory
sub_10C0EC 44 0010c540 ADD             R12, R0, #1; Rd = Op1 + Op2
sub_10C0EC 45 0010c554 ADD             R12, R0, #3; Rd = Op1 + Op2
sub_10C0EC 46 0010c568 ADD             R0, R0, R1; Rd = Op1 + Op2
sub_10C0EC 47 0010c580 MOV             R0, R8; Rd = Op2
sub_10C0EC 48 0010c584 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_10C0EC 49 0010c58c CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_10C0EC 50 0010c598 STR             R0, [R4,#0x24]!; Store to Memory
sub_10C0EC 51 0010c5ac MOV             R0, #0; Rd = Op2
sub_10C0EC 52 0010c5b4 ADD             R10, SP, #0x400; Rd = Op1 + Op2
sub_10C0EC 53 0010c5cc LDR             R2, [R7,#0xF8]!; Load from Memory
sub_10C0EC 54 0010c5e0 B               loc_10C6B8; Branch
sub_10C0EC 55 0010c5e4 LDR             R1, [R5,#0x18]; Load from Memory
sub_10C0EC 56 0010c600 LDR             R1, [R5,#0x18]; Load from Memory
sub_10C0EC 57 0010c614 B               loc_10C6B8; Branch
sub_10C0EC 58 0010c618 CMP             R6, #1; Set cond. codes on Op1 - Op2
sub_10C0EC 59 0010c624 CMP             R6, #2; Set cond. codes on Op1 - Op2
sub_10C0EC 60 0010c630 ADD             R5, SP, #0x800; Rd = Op1 + Op2
sub_10C0EC 61 0010c64c CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_10C0EC 62 0010c65c STR             R2, [R4,#0x24]!; Store to Memory
sub_10C0EC 63 0010c670 ADD             R5, SP, #0x400; Rd = Op1 + Op2
sub_10C0EC 64 0010c6a4 MOV             R1, #0; Rd = Op2
sub_10C0EC 65 0010c6b8 STR             R2, [R4,#0x30]; Store to Memory
sub_10C0EC 66 0010c6c8 CMP             R6, #1; Set cond. codes on Op1 - Op2
sub_10C0EC 67 0010c6d4 CMP             R6, #2; Set cond. codes on Op1 - Op2
sub_10C0EC 68 0010c6e0 BIC             R0, R0, #3; Rd = Op1 & ~Op2
sub_10C0EC 69 0010c6f0 LDR             R0, [SP,#0x438]; Load from Memory
sub_10C0EC 70 0010c708 MOV             R4, #0xC; Rd = Op2
sub_10C0EC 71 0010c70c LDR             R0, [SP,#0xAA0]; Load from Memory
sub_10C0EC 72 0010c718 ADD             SP, SP, #0xAB0; Rd = Op1 + Op2
sub_10C0EC 73 0010c724 CMP             R6, #1; Set cond. codes on Op1 - Op2
sub_10C0EC 74 0010c730 CMP             R6, #2; Set cond. codes on Op1 - Op2
sub_10C0EC 75 0010c73c MOV             R1, #0xFFFFFFFF
sub_10C0EC 76 0010c758 LDR             R3, [R5,R0,LSL#2]; Load from Memory
sub_10C0EC 77 0010c764 ADD             R0, R0, #1; Rd = Op1 + Op2
sub_10C0EC 78 0010c770 LDR             R3, [SP,#0xA24]; Load from Memory
sub_10C0EC 79 0010c77c LDR             R2, [R5,R0,LSL#2]; Load from Memory
sub_10C0EC 80 0010c78c STR             R2, [R4,#0x28]; Store to Memory
sub_10C0EC 81 0010c79c LDR             R0, [R5,R1,LSL#2]; Load from Memory
sub_10C0EC 82 0010c7ac CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_10C0EC 83 0010c7b8 B               loc_10C804; Branch
sub_10C0EC 84 0010c7bc CMP             R6, #1; Set cond. codes on Op1 - Op2
sub_10C0EC 85 0010c7c8 CMP             R6, #2; Set cond. codes on Op1 - Op2
sub_10C0EC 86 0010c7d4 MOV             R1, R5; Rd = Op2
sub_10C0EC 87 0010c7ec MOV             R1, #0; Rd = Op2
sub_10C0EC 88 0010c804 STR             R2, [R4,#0x30]; Store to Memory
sub_10C0EC 89 0010f0d4 B               loc_10F0D4; Branch
sub_10C81C 0 0010c81c STMFD           SP!, {R4-R7,LR}; Store Block to Memory
sub_10C81C 1 0010c85c MOV             R5, #0; Rd = Op2
sub_10C81C 2 0010c888 LDR             R6, [R1,#0x200]; Load from Memory
sub_10C81C 3 0010c8c0 LDR             R12, [R3,#0x200]; Load from Memory
sub_10C8F4 0 0010c8f4 STMFD           SP!, {R4,R5,LR}; Store Block to Memory
sub_10C8F4 1 0010c928 CMP             R2, #0x10; Set cond. codes on Op1 - Op2
sub_10C8F4 2 0010c930 MOV             R2, R1; Rd = Op2
sub_10C8F4 3 0010c94c MOV             R0, #8; Rd = Op2
sub_10C8F4 4 0010c950 MOV             R4, R0; Rd = Op2
sub_10C8F4 5 0010c954 LDR             R0, [SP,#0x208]; Load from Memory
sub_10C8F4 6 0010c960 ADD             SP, SP, #0x20C; Rd = Op1 + Op2
sub_10C8F4 7 0010c96c LDR             R2, [SP,#0]; Load from Memory
sub_10C8F4 8 0010c97c ADD             R1, SP, #8; Rd = Op1 + Op2
sub_10C8F4 9 0010f0d4 B               loc_10F0D4; Branch
sub_10C990 0 0010c990 STMFD           SP!, {R4-R8,LR}; Store Block to Memory
sub_10C990 1 0010c9b4 CMP             R7, #0x200; Set cond. codes on Op1 - Op2
sub_10C990 2 0010c9c0 MOV             R2, #0x200; Rd = Op2
sub_10C990 3 0010c9dc MOV             R2, #1; Rd = Op2
sub_10C990 4 0010c9ec LDRB            R1, [R6,R1]; Load from Memory
sub_10C990 5 0010ca00 SUB             R0, R7, R0; Rd = Op1 - Op2
sub_10C990 6 0010ca10 MOV             R12, R5,LSL#30; Rd = Op2
sub_10C990 7 0010ca64 ADD             R0, R7, #3; Rd = Op1 + Op2
sub_10C990 8 0010ca6c CMP             R0, #1; Set cond. codes on Op1 - Op2
sub_10C990 9 0010ca78 ADD             R1, R4, R0,LSL#2; Rd = Op1 + Op2
sub_10C990 10 0010ca8c MOV             R0, #0; Rd = Op2
sub_10C990 11 0010ca90 LDMFD           SP!, {R4-R8,PC}; Load Block from Memory
sub_10CAC4 0 0010cac4 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_10CAC4 1 0010caf4 LDRB            R2, [R1,R0]; Load from Memory
sub_10CAC4 2 0010cb00 ADD             R2, R1, R0; Rd = Op1 + Op2
sub_10CAC4 3 0010cb10 ADD             R0, R0, #1; Rd = Op1 + Op2
sub_10CAC4 4 0010cb18 ADD             R0, R0, #2; Rd = Op1 + Op2
sub_10CAC4 5 0010cb24 CMP             R4, #0x10; Set cond. codes on Op1 - Op2
sub_10CAC4 6 0010cb30 LDR             R12, [R5,#0]; Load from Memory
sub_10CAC4 7 0010cb44 RSB             R3, R0, #0x200; Rd = Op2 - Op1
sub_10CAC4 8 0010cb60 ADD             SP, SP, #0x208; Rd = Op1 + Op2
sub_10CB84 0 0010cb84 STMFD           SP!, {R4,R5,LR}; Store Block to Memory
sub_10CB84 1 0010cbb0 LDR             R0, [R4,#0x200]; Load from Memory
sub_10CB84 2 0010cbc8 ADD             SP, SP, #0x204; Rd = Op1 + Op2
sub_10CBD0 0 0010cbd0 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_10CBD0 1 0010cbdc CMP             R1, #0; Set cond. codes on Op1 - Op2
sub_10CBD0 2 0010cbe8 MOV             R12, #1; Rd = Op2
sub_10CBD0 3 0010cbfc BX              LR; Branch to/from Thumb mode
sub_10CBD0 4 0010cc00 MOV             R0, #6; Rd = Op2
sub_10CBD0 5 0010cc08 MOV             R12, R0; Rd = Op2
sub_10CBD0 6 0010cc14 LDRB            R1, [R2,#0]; Load from Memory
sub_10CBD0 7 0010cc54 ADD             R1, R0, R3,LSL#1; Rd = Op1 + Op2
sub_10CC68 0 0010cc68 SUBS            R2, R2, #1; Rd = Op1 - Op2
sub_10CC68 1 0010cc70 LDR             R3, [R0,R2,LSL#2]; Load from Memory
sub_10CC68 2 0010cc80 MOV             R0, #0xFFFFFFFF
sub_10CC68 3 0010cc88 BLS             loc_10CC94; Branch
sub_10CC68 4 0010cc8c MOV             R0, #1; Rd = Op2
sub_10CC68 5 0010cc94 SUBS            R2, R2, #1; Rd = Op1 - Op2
sub_10CC68 6 0010cc9c MOV             R0, #0; Rd = Op2
sub_10CCA4 0 0010cca4 STMFD           SP!, {R4-R10,LR}; Store Block to Memory
sub_10CCA4 1 0010ccc8 CMP             R7, #0; Set cond. codes on Op1 - Op2
sub_10CCA4 2 0010ccd4 MOV             R2, R1; Rd = Op2
sub_10CCA4 3 0010ccec LDRB            R3, [R0,#0]; Load from Memory
sub_10CCA4 4 0010ccf8 SUBS            R2, R2, #1; Rd = Op1 - Op2
sub_10CCA4 5 0010cd08 TST             R1, #1; Set cond. codes on Op1 & Op2
sub_10CCA4 6 0010cd14 MOV             R0, #6; Rd = Op2
sub_10CCA4 7 0010cd1c SUB             R1, R0, #0x30; Rd = Op1 - Op2
sub_10CCA4 8 0010cd2c SUB             R1, R0, #0x41; Rd = Op1 - Op2
sub_10CCA4 9 0010cd3c SUB             R1, R0, #0x61; Rd = Op1 - Op2
sub_10CCA4 10 0010cd4c SXTB            R0, R0; Signed extend byte to word
sub_10CCA4 11 0010cd50 CMP             R0, #0xF; Set cond. codes on Op1 - Op2
sub_10CCA4 12 0010cd5c TST             R4, #1; Set cond. codes on Op1 & Op2
sub_10CCA4 13 0010cd74 LDRB            R0, [R6,R5]; Load from Memory
sub_10CCA4 14 0010cd84 MOV             R0, R4,LSR#1; Rd = Op2
sub_10CCA4 15 0010cd94 MOV             R0, #1; Rd = Op2
sub_10CDC4 0 0010cdc4 MOV             R3, R0; Rd = Op2
sub_10CDC4 1 0010cddc LDR             R4, [R3,#0]; Load from Memory
sub_10CDC4 2 0010ce04 LDMFD           SP!, {R4,R5}; Load Block from Memory
memcpy 0 0010f000 STMFD           SP!, {R4-R10,LR}; Store Block to Memory
memcpy 1 0010f010 CMP             R10, #0x20; Set cond. codes on Op1 - Op2
memcpy 2 0010f018 CMP             R10, #4; Set cond. codes on Op1 - Op2
memcpy 3 0010f020 CMP             R10, #0; Set cond. codes on Op1 - Op2
memcpy 4 0010f028 MOV             R0, #1; Rd = Op2
memcpy 5 0010f030 LDMIA           R9!, {R0-R7}; Load Block from Memory
memcpy 6 0010f040 LDMIA           R9!, {R0}; Load Block from Memory
memcpy 7 0010f050 LDRB            R0, [R9],#1; Load from Memory
memcpy 8 0010f064 BLE             loc_10F028; Branch
memcpy 9 0010f068 STMFD           SP!, {R4-R9,LR}; Store Block to Memory
memzero 0 0010f068 STMFD           SP!, {R4-R9,LR}; Store Block to Memory
memzero 1 0010f09c CMP             R9, #0; Set cond. codes on Op1 - Op2
memzero 2 0010f0a4 MOV             R0, #1; Rd = Op2
memzero 3 0010f0ac STMIA           R8!, {R0-R7}; Store Block to Memory
memzero 4 0010f0bc BLT             loc_10F09C; Branch
memzero 5 0010f0c0 STRB            R0, [R8],#1; Store to Memory
memzero 6 0010f0d0 BLE             loc_10F0A4; Branch
memzero 7 0010f0d4 B               loc_10F0D4; Branch
sub_10F0D8 0 0010f0d8 CMP             R2, #0; Set cond. codes on Op1 - Op2
sub_10F0D8 1 0010f0e8 MOV             R12, R0; Rd = Op2
sub_10F0D8 2 0010f130 LDMFD           SP!, {R4,R5}; Load Block from Memory
sub_10F0D8 3 0010f13c ADD             R3, R3, #1; Rd = Op1 + Op2
sub_10F0D8 4 0010f148 LDMFD           SP!, {R4,R5}; Load Block from Memory
sub_10F154 0 0010f154 BIC             R1, R0, #3; Rd = Op1 & ~Op2
sub_10F170 0 0010f170 BIC             R2, R0, #3; Rd = Op1 & ~Op2
sub_10F1C8 0 0010f1c8 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_10F1C8 1 0010f1d4 SUB             R2, R0, #1; Rd = Op1 - Op2
sub_10F1C8 2 0010f1e4 MOV             R0, R1; Rd = Op2
sub_10F1EC 0 0010f1ec LDR             R0, =0xB123000; Load from Memory
sub_10F204 0 0010f204 MOV             R1, #0xA6000; Rd = Op2
timer_memory_stuff 0 0010f21c LDR             R0, =0x4A1000; Load from Memory
sub_10F288 0 0010f288 NOP; No Operation
get_timer 0 0010f2b0 LDR             R0, =0xB123000; Load from Memory
sub_10F2C0 0 0010f2c0 LDR             R0, =0xB123000; Load from Memory
sub_10F2C0 1 0010f2d4 LDR             R1, [R0,#0x2C]; Load from Memory
sub_10F2C0 2 0010f2e4 BX              LR; Branch to/from Thumb mode
sub_10F2EC 0 0010f2ec STMFD           SP!, {R4,LR}; Store Block to Memory
sub_10F2EC 1 0010f300 MOV             R3, R4; a4
sub_10F2EC 2 0010f314 LDR             R0, =0xB123000; Load from Memory
sub_10F364 0 0010f364 LDR             R0, =0xB121000; Load from Memory
sub_10F39C 0 0010f39c CMP             R0, #0xA; Set cond. codes on Op1 - Op2
sub_10F39C 1 0010f3b0 CMP             R4, #0x3E8; Set cond. codes on Op1 - Op2
sub_10F39C 2 0010f3bc MOV             R0, #0x1388; Rd = Op2
sub_10F39C 3 0010f3cc LDR             R0, =0x3531DEC; Load from Memory
sub_10F39C 4 0010f3d8 MOV             R3, R4; a4
sub_10F39C 5 0010f3ec MOV             R0, #0x4D; Rd = Op2
sub_10F39C 6 0010f3f8 LDR             R1, =0xB121000; Load from Memory
sub_10F39C 7 0010f410 LDR             R0, [R1,#0x2C]; Load from Memory
sub_10F39C 8 0010f41c LDR             R0, [R1,#0x2C]; Load from Memory
sub_10F450 0 0010f450 CMP             R2, #0; Set cond. codes on Op1 - Op2
sub_10F450 1 0010f458 CMP             R0, R1; Set cond. codes on Op1 - Op2
sub_10F450 2 0010f468 BCS             loc_10F56C; Branch
sub_10F450 3 0010f46c ORR             R3, R1, R0; Rd = Op1 | Op2
sub_10F450 4 0010f478 EOR             R3, R1, R0; Rd = Op1 ^ Op2
sub_10F450 5 0010f484 CMP             R2, #4; Set cond. codes on Op1 - Op2
sub_10F450 6 0010f494 MOV             R3, R2; Rd = Op2
sub_10F450 7 0010f498 CMP             R3, #0; Set cond. codes on Op1 - Op2
sub_10F450 8 0010f4a4 MOV             R4, R1; Rd = Op2
sub_10F450 9 0010f4f4 MOVS            R3, R2,LSR#2; Rd = Op2
sub_10F450 10 0010f4fc LDR             R12, [R1],#4; Load from Memory
sub_10F450 11 0010f50c ANDS            R12, R2, #3; Rd = Op1 & Op2
sub_10F450 12 0010f514 MOV             R3, R1; Rd = Op2
sub_10F450 13 0010f564 LDMFD           SP!, {R4-R7}; Load Block from Memory
sub_10F450 14 0010f56c ADD             R1, R1, R2; Rd = Op1 + Op2
sub_10F450 15 0010f580 EOR             R3, R1, R0; Rd = Op1 ^ Op2
sub_10F450 16 0010f58c CMP             R2, #4; Set cond. codes on Op1 - Op2
sub_10F450 17 0010f598 MOV             R3, R2; Rd = Op2
sub_10F450 18 0010f59c CMP             R3, #0; Set cond. codes on Op1 - Op2
sub_10F450 19 0010f5a8 SUB             R1, R1, #1; Rd = Op1 - Op2
sub_10F450 20 0010f5f0 MOVS            R3, R2,LSR#2; Rd = Op2
sub_10F450 21 0010f5f8 LDR             R12, [R1,#-4]!; Load from Memory
sub_10F450 22 0010f608 ANDS            R2, R2, #3; Rd = Op1 & Op2
sub_10F450 23 0010f610 SUB             R1, R1, #1; Rd = Op1 - Op2
sub_10F450 24 0010f658 LDMFD           SP!, {R4-R7}; Load Block from Memory
memset 0 0010f660 CMP             R2, #0; Set cond. codes on Op1 - Op2
memset 1 0010f668 ANDS            R3, R0, #3; Rd = Op1 & Op2
memset 2 0010f684 B               loc_10F6B8; Branch
memset 3 0010f688 MOV             R12, R0; Rd = Op2
memset 4 0010f6b8 CMP             R8, R3; Set cond. codes on Op1 - Op2
memset 5 0010f6c0 CMP             R2, #0; Set cond. codes on Op1 - Op2
memset 6 0010f6c8 LDMFD           SP!, {R4-R9}; Load Block from Memory
memset 7 0010f6d0 CMP             R2, #0; Set cond. codes on Op1 - Op2
memset 8 0010f6d8 AND             R3, R2, #3; Rd = Op1 & Op2
memset 9 0010f6e8 ORR             R12, R1, R1,LSL#8; Rd = Op1 | Op2
memset 10 0010f6f4 SUBS            R2, R2, #1; Rd = Op1 - Op2
memset 11 0010f700 CMP             R3, #0; Set cond. codes on Op1 - Op2
memset 12 0010f708 MOV             R1, R0; Rd = Op2
memset 13 0010f738 LDMFD           SP!, {R4-R9}; Load Block from Memory
sub_10F760 0 0010f760 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_10F760 1 0010f798 CMP             R3, #0; Set cond. codes on Op1 - Op2
sub_10F760 2 0010f7b4 RSBPLS          R0, R6, #4; Rd = Op2 - Op1
sub_10F760 3 0010f7bc SUB             R0, LR, #0x20; Rd = Op1 - Op2
sub_10F760 4 0010f7e4 UMULL           R0, R1, R12, R5; Unsigned Multiply long
sub_10F760 5 0010f82c UMULL           R0, R1, R12, R5; Unsigned Multiply long
sub_10F760 6 0010f84c UMULL           R1, R0, R12, R2; Unsigned Multiply long
sub_10F760 7 0010f880 UMULL           R4, R6, R12, R2; Unsigned Multiply long
sub_10F760 8 0010f8b8 ADDS            R0, R0, #1; Rd = Op1 + Op2
sub_10F760 9 0010f8e8 UMULL           R1, R0, R12, R5; Unsigned Multiply long
sub_10F760 10 0010f96c UMULL           R6, R1, R12, R2; Unsigned Multiply long
sub_10F760 11 0010f9a0 ADD             R0, R0, #1; Rd = Op1 + Op2
sub_10F760 12 0010f9b0 STMFD           SP!, {R2,R3}; Store Block to Memory
sub_10F760 13 0010f9c0 LDMFD           SP!, {R2-R6,PC}; Load Block from Memory
sub_10F760 14 0010f9c4 MOV             R1, #0; Rd = Op2
sub_10F760 15 0010f9d0 RSB             LR, R6, #0x20; Rd = Op2 - Op1
sub_10F760 16 0010f9e8 SUBS            LR, R2, R5; Rd = Op1 - Op2
sub_10F760 17 0010fa04 MOVS            R4, R4,LSR#1; Rd = Op2
sub_10FA50 0 0010fa50 SUBS            R3, R2, #0x20; Rd = Op1 - Op2
sub_10FA50 1 0010fa58 RSB             R3, R2, #0x20; Rd = Op2 - Op1
sub_10FA50 2 0010fa6c MOV             R1, R0,LSL R3; Rd = Op2
sub_10FA78 0 0010fa78 B               loc_10FA80; Branch
sub_10FA78 1 0010fa80 STMFD           SP!, {R0-R2,LR}; Store Block to Memory
sub_10FA7C 0 0010fa7c NOP; No Operation
sub_10FA7C 1 0010fa80 STMFD           SP!, {R0-R2,LR}; Store Block to Memory
sub_10FA90 0 0010fa90 MOVS            R1, R0; Rd = Op2
sub_10FA9C 0 0010fa9c CLZ             R2, R1; Count Leading Zeros
sub_10FA9C 1 0010fac0 SMLAWT          R1, R1, R12, R1; Wide signed multiply-accumulate (top)
sub_10FA9C 2 0010fad8 UMULL           R2, R12, R0, R1; Unsigned Multiply long
sub_10FA9C 3 0010fb00 RSB             R2, R2, #0; Rd = Op2 - Op1
sub_10FA9C 4 0010fb34 MOVCS           R0, R0; Rd = Op2
sub_10FA9C 5 0010fb40 STMFD           SP!, {R0,LR}; Store Block to Memory
sub_10FB50 0 0010fb50 STMFD           SP!, {LR}; Store Block to Memory
sub_10FB50 1 0010fb88 SMLAWT          R1, R1, R12, R1; Wide signed multiply-accumulate (top)
sub_10FB50 2 0010fba0 UMULL           R2, R12, R0, R1; Unsigned Multiply long
sub_10FB50 3 0010fbc4 MOVS            LR, LR,LSL#1; Rd = Op2
sub_10FB50 4 0010fbd4 RSB             R2, R2, #0; Rd = Op2 - Op1
sub_10FB50 5 0010fc14 MOVCS           R0, R0; Rd = Op2
sub_10FB50 6 0010fc20 STMFD           SP!, {R0,R4,LR}; Store Block to Memory
do_some_system_control 0 00110004 STMFD           SP!, {LR}; Store Block to Memory
do_some_system_control 1 00110038 MOV             R1, #0; Rd = Op2
do_some_system_control 2 0011003c ORR             R2, R1, R0; Rd = Op1 | Op2
do_some_system_control 3 00110050 ADD             R0, R0, #0x20; Rd = Op1 + Op2
do_some_system_control 4 0011005c MOV             R0, #0; Rd = Op2
reset_MMU_and_other_stuff 0 001100a4 LDR             R0, =off_110400; Load from Memory
reset_MMU_and_other_stuff 1 001100c4 BL              do_some_system_control; Branch with Link
reset_MMU_and_other_stuff 2 001100cc LDMFD           SP!, {R4,PC}; Load Block from Memory
sub_110414 0 00110414 MOV             R0, #0; Rd = Op2
sub_110420 0 00110420 MOV             R0, #0; Rd = Op2
sub_110420 1 00110424 MOV             R1, #0; Rd = Op2
sub_110420 2 00110428 ORR             R2, R1, R0; Rd = Op1 | Op2
sub_110420 3 0011043c ADD             R0, R0, #0x20; Rd = Op1 + Op2
sub_110420 4 00110448 BX              LR; Branch to/from Thumb mode
sub_11044C 0 0011044c STMFD           SP!, {R4-R12,LR}; Store Block to Memory
pbl_init_pt 0 00110478 STMFD           SP!, {R4-R12,LR}; Store Block to Memory
flush_tlb_and_sync 0 001104d0 DSB             SY; Data Synchronization Barrier
sub_1104E8 0 001104e8 MOV             R0, #2; Rd = Op2
l2cachecontrol 0 00110524 MRC             p15, 0, R0,c0,c0, 5; Move from Coprocessor to ARM Register
initialize_secondary_pt_for_sbl 0 00110534 CMP             R0, #0; Set cond. codes on Op1 - Op2
initialize_secondary_pt_for_sbl 1 00110540 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
initialize_secondary_pt_for_sbl 2 0011056c ADD             R5, R0, R3,LSL#8; Rd = Op1 + Op2
initialize_secondary_pt_for_sbl 3 00110588 MOV             R4, #0; Rd = Op2
pbl_init_pagetables_inner 0 0011059c STMFD           SP!, {R4-R8,LR}; Store Block to Memory
pbl_init_pagetables_inner 1 001105b0 LDR             R0, [R4,#0x38]; Load from Memory
pbl_init_pagetables_inner 2 001105bc BL              sub_1104E8; Branch with Link
pbl_init_pagetables_inner 3 001105d4 CMP             R0, #j_reset_real; Set cond. codes on Op1 - Op2
pbl_init_pagetables_inner 4 00110624 CMP             R0, #1; Set cond. codes on Op1 - Op2
pbl_init_pagetables_inner 5 00110630 B               loc_11064C; Branch
pbl_init_pagetables_inner 6 00110634 LDR             R1, =0xB110000; Load from Memory
pbl_init_pagetables_inner 7 0011064c LDR             R0, =0xB010000; Load from Memory
pbl_init_pagetables_inner 8 00110660 BL              sub_10F288; Branch with Link
pbl_init_pagetables_inner 9 00110668 CMP             R0, #0; Set cond. codes on Op1 - Op2
pbl_init_pagetables_inner 10 00110670 MOV             R1, #0x4000; Rd = Op2
pbl_init_pagetables_inner 11 00110688 MOV             R1, #0x1000; Rd = Op2
pbl_init_pagetables_inner 12 0011069c MOV             R0, #0; Rd = Op2
pbl_init_pagetables_inner 13 001106a8 ORR             R2, R1, R0,LSL#20; Rd = Op1 | Op2
pbl_init_pagetables_inner 14 001106bc MOV             R0, #0x81; Rd = Op2
pbl_init_pagetables_inner 15 001106c0 ORR             R2, R1, R0,LSL#20; Rd = Op1 | Op2
pbl_init_pagetables_inner 16 001106d4 MOV             R1, #j_reset_real; Rd = Op2
pbl_init_pagetables_inner 17 001106f0 ADD             R8, R0, R6,LSL#8; Rd = Op1 + Op2
pbl_init_pagetables_inner 18 0011070c LDR             R2, [R4,#8]; Load from Memory
pbl_init_pagetables_inner 19 0011072c ADD             R8, R0, LR,LSL#8; Rd = Op1 + Op2
pbl_init_pagetables_inner 20 00110748 MOV             R1, #pt_fl_head; Rd = Op2
pbl_init_pagetables_inner 21 00110760 ADD             R8, R0, LR,LSL#8; Rd = Op1 + Op2
pbl_init_pagetables_inner 22 0011077c BIC             R0, R12, #0x3FC; Rd = Op1 & ~Op2
pbl_init_pagetables_inner 23 001107ac MOVS            R5, R6; Rd = Op2
pbl_init_pagetables_inner 24 001107b8 BL              pbl_init_pt; Branch with Link
pbl_init_pagetables_inner 25 001107c4 MOV             R0, R5; Rd = Op2
pbl_init_pagetables_inner 26 001107c8 LDMFD           SP!, {R4-R8,PC}; Load Block from Memory
sub_1107F0 0 001107f0 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_1107F0 1 00110804 LDR             R2, =pt_fl_head; Load from Memory
sub_1107F0 2 0011081c BX              LR; Branch to/from Thumb mode
sub_110824 0 00110824 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_110824 1 00110830 STMFD           SP!, {R4,LR}; Store Block to Memory
sub_11101C 0 0011101c STMFD           SP!, {R4,LR}; Store Block to Memory
sub_111054 0 00111054 STMFD           SP!, {R4-R10,LR}; Store Block to Memory
sub_111054 1 00111070 CMP             R0, #1; Set cond. codes on Op1 - Op2
sub_111054 2 0011107c CMP             R0, #2; Set cond. codes on Op1 - Op2
sub_111054 3 00111084 B               loc_1113F8; Branch
sub_111054 4 00111088 LDRB            R2, [R1,#1]; Load from Memory
sub_111054 5 00111094 B               loc_1112D8; jumptable 00111090 default case
sub_111054 6 001110c0 LDRH            R1, [R1,#6]; jumptable 00111090 case 0
sub_111054 7 001110cc STRH            R9, [R0,#0x38]; Store to Memory
sub_111054 8 001110e8 LDRB            R2, [R0,#0x31]; jumptable 00111090 case 5
sub_111054 9 001110f4 LDRH            R1, [R1,#2]; Load from Memory
sub_111054 10 0011110c MOV             R8, R1; jumptable 00111090 case 6
sub_111054 11 0011112c B               loc_111158; jumptable 00111128 default case
sub_111054 12 00111150 LDR             R5, [R6,#0]; jumptable 00111128 case 1
sub_111054 13 00111154 LDRB            R4, [R5,#0]; Load from Memory
sub_111054 14 00111158 CMP             R5, #0; jumptable 00111128 default case
sub_111054 15 00111160 LDRH            R0, [R8,#6]; Load from Memory
sub_111054 16 00111184 MOV             R9, R4; Rd = Op2
sub_111054 17 0011118c LDR             R0, [R6,#4]; jumptable 00111128 case 2
sub_111054 18 001111a0 B               loc_111158; jumptable 00111128 default case
sub_111054 19 001111a4 LDRB            R2, [R0,#0]; jumptable 00111128 case 3
sub_111054 20 001111b8 LDRH            R3, [R0,#8]; Load from Memory
sub_111054 21 001111cc LDR             R0, [R0,#0]; Load from Memory
sub_111054 22 001111d8 MOV             R2, #0x97; Rd = Op2
sub_111054 23 001111ec CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_111054 24 001111f8 B               loc_111154; Branch
sub_111054 25 001111fc LDR             R0, [R6,#0x10]; jumptable 00111128 case 6
sub_111054 26 00111208 LDR             R5, [R0,#4]; Load from Memory
sub_111054 27 00111218 B               loc_11122C; Branch
sub_111054 28 0011121c MOV             R2, #0x178; Rd = Op2
sub_111054 29 0011122c MOV             R2, #0x180; Rd = Op2
sub_111054 30 00111240 LDR             R0, [R6,#0x24]; jumptable 00111128 case 7
sub_111054 31 00111250 LDR             R0, [R6,#0xC]; Load from Memory
sub_111054 32 0011125c LDR             R5, [R0,#4]; Load from Memory
sub_111054 33 00111268 LDRH            R4, [R5,#2]; Load from Memory
sub_111054 34 00111278 MOV             R2, #0x18F; Rd = Op2
sub_111054 35 00111288 MOV             R2, #0x198; Rd = Op2
sub_111054 36 0011129c LDRH            R1, [R1,#6]; jumptable 00111090 case 8
sub_111054 37 001112a8 LDRB            R1, [R0,#0x31]; Load from Memory
sub_111054 38 001112c8 LDRH            R1, [R1,#2]; jumptable 00111090 case 9
sub_111054 39 001112d8 LDR             R2, [R0,#0x1C]; jumptable 00111090 default case
sub_111054 40 001112e4 BLX             R2; Branch with Link and Exchange (register indirect)
sub_111054 41 001112e8 MOV             R9, R0; Rd = Op2
sub_111054 42 001112f0 MOV             R9, #0xFFFFFFFF; jumptable 00111090 cases 1,3,7
sub_111054 43 001112f8 MOVS            R5, R7; Rd = Op2
sub_111054 44 00111304 LDR             R0, [R5,#0x34]; Load from Memory
sub_111054 45 00111314 MOV             R2, #0x69; Rd = Op2
sub_111054 46 00111328 CMP             R2, #0; Set cond. codes on Op1 - Op2
sub_111054 47 00111338 BGE             loc_111350; Branch
sub_111054 48 0011133c CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_111054 49 00111344 CMP             R0, #1; Set cond. codes on Op1 - Op2
sub_111054 50 0011134c B               loc_111360; Branch
sub_111054 51 00111350 CMP             R0, #0xA; Set cond. codes on Op1 - Op2
sub_111054 52 00111358 CMP             R0, #0xB; Set cond. codes on Op1 - Op2
sub_111054 53 00111360 LDR             R3, [R2,#0x10]; Load from Memory
sub_111054 54 0011136c MOV             R1, R4; Rd = Op2
sub_111054 55 00111378 MOV             R6, R0; Rd = Op2
sub_111054 56 00111380 LDRH            R0, [R4,#6]; Load from Memory
sub_111054 57 0011138c STRH            R9, [R5,#0x38]; Store to Memory
sub_111054 58 001113a8 LDRH            R0, [R4,#6]; Load from Memory
sub_111054 59 001113b4 LDRB            R0, [R2,#0x14]; Load from Memory
sub_111054 60 001113d4 LDR             R0, [R5,#0x34]; Load from Memory
sub_111054 61 001113e0 LDRH            R1, [R4,#2]; Load from Memory
sub_111054 62 001113f8 MOVS            R5, R7; Rd = Op2
sub_111054 63 00111404 CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_111054 64 0011140c LDR             R0, [R5,#0x34]; Load from Memory
sub_111054 65 0011141c LDR             R0, [R0,#0xC]; Load from Memory
sub_111054 66 0011142c LDR             R2, [R0,#4]; Load from Memory
sub_111054 67 0011143c LDR             R0, [R0,#0]; Load from Memory
sub_111054 68 00111448 MOV             R2, #0x8A; Rd = Op2
sub_111054 69 0011145c CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_111054 70 00111464 LDRB            R1, [R4,#1]; Load from Memory
sub_111054 71 00111470 CMP             R1, #1; Set cond. codes on Op1 - Op2
sub_111054 72 00111478 CMP             R1, #3; Set cond. codes on Op1 - Op2
sub_111054 73 00111480 CMP             R1, #0xC; Set cond. codes on Op1 - Op2
sub_111054 74 00111490 MOV             R1, R4; Rd = Op2
sub_111054 75 0011149c MOV             R2, #0x227; Rd = Op2
sub_111054 76 001114b0 MOV             R2, #0x22E; Rd = Op2
sub_111054 77 001114c4 LDRH            R1, [R4,#6]; Load from Memory
sub_111054 78 001114d0 LDR             R0, [R0,#0x10]; Load from Memory
sub_111054 79 001114f4 LDRH            R1, [R4,#2]; Load from Memory
sub_111054 80 00111500 LDR             R1, [R0,#4]; Load from Memory
sub_111054 81 00111510 CMP             R5, #0; Set cond. codes on Op1 - Op2
sub_111054 82 00111518 LDRB            R2, [R1,#2]; Load from Memory
sub_111054 83 00111534 LDRH            R1, [R4,#2]; Load from Memory
sub_111054 84 00111540 LDR             R1, [R0,#4]; Load from Memory
sub_111054 85 00111550 CMP             R5, #0; Set cond. codes on Op1 - Op2
sub_111054 86 00111558 LDRB            R2, [R1,#2]; Load from Memory
sub_111054 87 00111570 MOV             R6, R9; Rd = Op2
sub_111054 88 00111578 MOV             R2, #0x20F; Rd = Op2
sub_111054 89 00111588 CMP             R6, #0; Set cond. codes on Op1 - Op2
sub_111054 90 00111590 ADD             R2, R7, #0x38; Rd = Op1 + Op2
sub_111054 91 001115a8 BNE             loc_1115C4; Branch
sub_111054 92 001115ac MOV             R0, R7; Rd = Op2
sub_111054 93 001115c4 BGE             locret_1115DC; Branch
sub_111054 94 001115c8 LDR             R0, [R7,#0x14]; Load from Memory
sub_111054 95 001115dc LDMFD           SP!, {R4-R10,PC}; Load Block from Memory
sub_111054 96 00111ec4 CMP             R1, #0; Set cond. codes on Op1 - Op2
sub_111054 97 00112c68 CMP             R1, #3; Set cond. codes on Op1 - Op2
sub_1115E0 0 001115e0 STMFD           SP!, {R4,R5,LR}; Store Block to Memory
sub_1115E0 1 001115f0 LDR             R0, [R5,#0xC]; Load from Memory
sub_1115E0 2 00111604 LDRB            R12, [R3,#2]; Load from Memory
sub_1115E0 3 0011161c LDR             R4, [R0,#0xC]; Load from Memory
sub_1115E0 4 00111628 LDR             R0, [R4,#4]; Load from Memory
sub_1115E0 5 00111634 LDRB            R1, [R0,#2]; Load from Memory
sub_1115E0 6 0011166c MOV             R0, #0; Rd = Op2
sub_1115E0 7 00111670 ADD             SP, SP, #0xC; Rd = Op1 + Op2
sub_1115E0 8 00111678 MOV             R2, #0xD3; Rd = Op2
sub_1115E0 9 00111694 MOV             R2, #0xDA; Rd = Op2
sub_1115E0 10 001116b0 MOV             R2, #0xE6; Rd = Op2
sub_1116CC 0 001116cc STR             R1, [R0,#0x28]; Store to Memory
sub_1116CC 1 001116e0 BX              R2; Branch to/from Thumb mode
sub_1116CC 2 001116e4 MOV             R2, #0xA3; Rd = Op2
sub_1116CC 3 001130d8 LDR             R3, =word_2092E8; Load from Memory
sub_1116F4 0 001116f4 LDR             R1, =0x1841000; Load from Memory
sub_1116F4 1 0011170c CMP             R0, #1; Set cond. codes on Op1 - Op2
sub_1116F4 2 0011171c CMP             R0, #2; Set cond. codes on Op1 - Op2
sub_1116F4 3 0011172c MOV             R2, R0; Rd = Op2
sub_1116F4 4 0011173c BX              LR; Branch to/from Thumb mode
sub_1116F4 5 001130d8 LDR             R3, =word_2092E8; Load from Memory
sub_111744 0 00111744 LDR             R1, =0x1841000; Load from Memory
sub_111744 1 0011175c CMP             R0, #1; Set cond. codes on Op1 - Op2
sub_111744 2 0011176c CMP             R0, #2; Set cond. codes on Op1 - Op2
sub_111744 3 0011177c MOV             R2, R0; Rd = Op2
sub_111744 4 0011178c BX              LR; Branch to/from Thumb mode
sub_111744 5 001130d8 LDR             R3, =word_2092E8; Load from Memory
sub_111794 0 00111794 STMFD           SP!, {R3-R11,LR}; Store Block to Memory
sub_111794 1 00111800 STRB            R10, [R5,#0xC4]; Store to Memory
sub_111794 2 0011184c MOV             R0, #2; Rd = Op2
sub_111794 3 00111860 MOV             R0, #0; Rd = Op2
sub_111794 4 0011187c STRB            R10, [R5,#0xC4]; Store to Memory
sub_111794 5 001118a4 BL              sub_112800; Branch with Link
sub_111794 6 001118f0 MOV             R3, #0xFF; Rd = Op2
sub_111794 7 00111908 LDR             R0, [R5,#0x8C]; Load from Memory
sub_111794 8 00111928 LDR             R0, [R6,#0xA0]; Load from Memory
sub_11195C 0 0011195c LDR             R1, =unk_209270; Load from Memory
sub_11195C 1 00111980 ADD             R2, R0, R0,LSL#1; Rd = Op1 + Op2
sub_11195C 2 00111994 ADD             R0, R0, #1; Rd = Op1 + Op2
sub_11195C 3 001119a0 LDMFD           SP!, {R4-R6,PC}; Load Block from Memory
sub_11195C 4 001119a4 MOV             R0, R4; Rd = Op2
sub_11195C 5 001119b4 LDR             R0, =dword_205768; Load from Memory
sub_11195C 6 001119c8 MOV             R0, R4; Rd = Op2
sub_11195C 7 001119d8 LDMFD           SP!, {R4-R6,PC}; Load Block from Memory
sub_1119E8 0 001119e8 STMFD           SP!, {R4,LR}; Store Block to Memory
sub_1119E8 1 001119f0 CMP             R1, #3; Set cond. codes on Op1 - Op2
sub_1119E8 2 001119f8 BL              sub_11195C; Branch with Link
sub_1119E8 3 00111a0c LDMFD           SP!, {R4,LR}; Load Block from Memory
sub_1119E8 4 00111a14 LDR             R0, [R0,#0x24]; Load from Memory
sub_1119E8 5 00111a2c CMP             R0, #0x1E0; Set cond. codes on Op1 - Op2
sub_1119E8 6 00111a34 B               loc_111A50; Branch
sub_1119E8 7 00111a38 MOV             R0, #0x200; Rd = Op2
sub_1119E8 8 00111a50 MOV             R0, #0x40; Rd = Op2
sub_1119E8 9 00111a64 LDR             R0, =unk_205708; Load from Memory
sub_1119E8 10 00111a78 LDMFD           SP!, {R4,PC}; Load Block from Memory
sub_111A88 0 00111a88 STMFD           SP!, {R4,LR}; Store Block to Memory
sub_111A88 1 00111aa8 MOV             R0, R4; Rd = Op2
sub_111A88 2 00111ab4 LDMFD           SP!, {R4,PC}; Load Block from Memory
sub_111AE0 0 00111ae0 STMFD           SP!, {R4,R5,LR}; Store Block to Memory
sub_111AE0 1 00111b50 MOV             R0, #0x3E8; Rd = Op2
sub_111AE0 2 00111b60 LDR             R0, [R5,#0x14]; Load from Memory
sub_111AE0 3 00111b6c CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_111AE0 4 00111b74 BL              sub_10F2C0; Branch with Link
sub_111AE0 5 00111b80 ADD             SP, SP, #0xC; Rd = Op1 + Op2
sub_111AE0 6 00111b8c LDR             R0, [R5,#0x10]; Load from Memory
sub_111AE0 7 00111ba0 BL              sub_10F1EC; Branch with Link
sub_111BE8 0 00111be8 LDR             R0, =dword_1135D4; Load from Memory
sub_111BE8 1 00111c00 LDR             R0, =dword_1135D0; Load from Memory
sub_111BE8 2 00111c10 LDR             R0, =dword_1135DC; Load from Memory
sub_111BE8 3 00111c20 LDR             R0, =dword_1135D8; Load from Memory
sub_111BE8 4 00111c30 MOV             R0, R4; Rd = Op2
sub_111C48 0 00111c48 LDR             R0, =dword_1135D4; Load from Memory
sub_111C48 1 00111c60 LDR             R0, =loc_1135CC; Load from Memory
sub_111C48 2 00111c78 LDR             R0, =dword_1135DC; Load from Memory
sub_111C48 3 00111c88 LDR             R0, =dword_1135D8; Load from Memory
sub_111C48 4 00111c98 MOV             R0, R4; Rd = Op2
sub_111CB4 0 00111cb4 STMFD           SP!, {R4-R10,LR}; Store Block to Memory
sub_111CB4 1 00111ce4 LDR             R0, [R9,#0x10]; Load from Memory
sub_111CB4 2 00111cf8 LDR             R0, [R0,#0x1C]; Load from Memory
sub_111CB4 3 00111d08 LDR             R0, [R9,#4]; Load from Memory
sub_111CB4 4 00111d28 LDR             R0, [R9,#0x10]; Load from Memory
sub_111CB4 5 00111d3c LDR             R0, [R0,#0x1C]; Load from Memory
sub_111CB4 6 00111d48 LDR             R1, [R9,#4]; Load from Memory
sub_111CB4 7 00111d5c LDR             R1, [R1,#0x14]; Load from Memory
sub_111CB4 8 00111d98 BL              sub_1132D4; Branch with Link
sub_111CB4 9 00111dac STR             R10, [R5,#0]; Store to Memory
sub_111CB4 10 00111db0 CMP             R7, #0; Set cond. codes on Op1 - Op2
sub_111CB4 11 00111db8 LDR             R1, [R5,#0]; Load from Memory
sub_111CB4 12 00111dc4 MOV             R0, R4; Rd = Op2
sub_111DD0 0 00111dd0 LDR             R1, [R0,#4]; Load from Memory
sub_111DD0 1 00111ddc LDR             R1, =dword_20563C; Load from Memory
sub_111DD0 2 00111df8 BX              LR; Branch to/from Thumb mode
sub_111E00 0 00111e00 CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_111E00 1 00111e08 B               loc_1132FC; Branch
sub_111E00 2 00111e0c LDR             R0, =dword_20563C; Load from Memory
sub_111E00 3 001130c0 LDR             R0, =0x78DB000; Load from Memory
sub_111E00 4 001132fc LDR             R0, =dword_205768; Load from Memory
sub_111E00 5 001122d8 STMFD           SP!, {R4,LR}; Store Block to Memory
sub_111E2C 0 00111e2c STMFD           SP!, {R4-R8,LR}; Store Block to Memory
sub_111E2C 1 00111e54 LDR             R0, [R7,#0x10]; Load from Memory
sub_111E2C 2 00111e68 LDR             R6, [R0,#0x1C]; Load from Memory
sub_111E2C 3 00111e88 LDR             R1, [R4,#0]; Load from Memory
sub_111E2C 4 00111e94 MOV             R0, R6; Rd = Op2
sub_111EA0 0 00111ea0 LDR             R1, =dword_20563C; Load from Memory
sub_111EB0 0 00111eb0 LDR             R1, =dword_20563C; Load from Memory
sub_111EC4 0 00111ec4 CMP             R1, #0; Set cond. codes on Op1 - Op2
sub_111EC4 1 00111ee8 STR             R2, [R0,#0x14]; Store to Memory
sub_111EC4 2 00111f10 LDR             R1, [R1,#0x14]; Load from Memory
sub_111EC4 3 00111f28 LDRB            R1, [R0,#0x10]; Load from Memory
sub_111EC4 4 00111f34 MOV             R1, #3; Rd = Op2
sub_111EC4 5 00111f40 CMP             R3, #0; Set cond. codes on Op1 - Op2
sub_111EC4 6 00111f4c MOV             R0, R3; Rd = Op2
sub_111EC4 7 00111f50 LDMFD           SP!, {R4,PC}; Load Block from Memory
sub_111EC4 8 00111f54 BL              sub_112D5C; Branch with Link
sub_111F64 0 00111f64 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_111F64 1 00112cb4 CMP             R1, #2; Set cond. codes on Op1 - Op2
sub_111F64 2 00112cc8 STR             R4, [SP,#-4]!; Store to Memory
sub_111F64 3 00112ce0 CMP             R2, #0; Set cond. codes on Op1 - Op2
sub_111F64 4 00112d14 LDR             R4, [SP],#4; Load from Memory
sub_111FDC 0 00111fdc STMFD           SP!, {R4,LR}; Store Block to Memory
sub_111FFC 0 00111ffc CMP             R0, #0; Set cond. codes on Op1 - Op2
sub_111FFC 1 00112004 LDR             R0, [R0,#0x14]; Load from Memory
sub_111FFC 2 0011200c BX              LR; Branch to/from Thumb mode
sub_111FFC 3 001128c8 STMFD           SP!, {R3-R11,LR}; Store Block to Memory
sub_112010 0 00112010 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_112010 1 00112034 CMP             R5, #0; Set cond. codes on Op1 - Op2
sub_112010 2 00112040 STR             R6, [R4,#0x2C]; Store to Memory
sub_112010 3 00112060 MOV             R1, #0x5DC; Rd = Op2
sub_112010 4 00112070 MOV             R1, #0; Rd = Op2
sub_112010 5 00112088 MOV             R1, #0; Rd = Op2
sub_112010 6 00112094 STR             R5, [R4,#0x20]; Store to Memory
sub_112010 7 001120ac BLX             R2; Branch with Link and Exchange (register indirect)
sub_112010 8 001120b4 MOV             R2, #0xA3; Rd = Op2
sub_112010 9 001120c4 LDR             R0, [R4,#0x14]; Load from Memory
sub_112010 10 001120dc CMP             R0, #2; Set cond. codes on Op1 - Op2
sub_112010 11 001120e8 LDR             R1, [R4,#0x24]; Load from Memory
sub_112010 12 001120f4 STR             R0, [R4,#0x24]; Store to Memory
sub_112010 13 00112110 BLX             R2; Branch with Link and Exchange (register indirect)
sub_112010 14 00112118 MOV             R2, #0xA3; Rd = Op2
sub_112010 15 00112128 LDR             R0, [R4,#0x14]; Load from Memory
sub_112010 16 00112140 CMP             R5, #0; Set cond. codes on Op1 - Op2
sub_112010 17 00112148 LDR             R0, [R4,#0x34]; Load from Memory
sub_112010 18 00112154 LDR             R0, [R0,#4]; Load from Memory
sub_112010 19 0011216c MOV             R1, #0; Rd = Op2
sub_112010 20 00112178 STR             R5, [R4,#0x2C]; Store to Memory
sub_112010 21 00112190 LDMFD           SP!, {R4-R6,LR}; Load Block from Memory
sub_112010 22 00112198 LDMFD           SP!, {R4-R6,LR}; Load Block from Memory
sub_112010 23 001121ac LDMFD           SP!, {R4-R6,PC}; Load Block from Memory
sub_112010 24 001130d8 LDR             R3, =word_2092E8; Load from Memory
sub_1121B0 0 001121b0 STMFD           SP!, {R4-R8,LR}; Store Block to Memory
sub_1121B0 1 001121d0 CMP             R0, R5; Set cond. codes on Op1 - Op2
sub_1121B0 2 001121d8 CMP             R5, #0; Set cond. codes on Op1 - Op2
sub_1121B0 3 001121e4 LDR             R6, [R4,#4]; Load from Memory
sub_1121B0 4 001121f0 LDR             R0, [R6,#0xC]; Load from Memory
sub_1121B0 5 00112210 MOV             R0, #0xFFFFFFFF
sub_1121B0 6 00112218 STRB            R5, [R4,#0x31]; Store to Memory
sub_1121B0 7 0011223c STRB            R7, [R4,#0x31]; Store to Memory
sub_1121B0 8 00112254 LDR             R0, [R4,#0x14]; Load from Memory
sub_1121B0 9 001122a4 LDR             R2, [R4,#0x18]; Load from Memory
sub_1121B0 10 001122b8 BLX             R2; Branch with Link and Exchange (register indirect)
sub_1121B0 11 001122c0 MOV             R2, #0xA3; Rd = Op2
sub_1121B0 12 001122d0 MOV             R0, #0; Rd = Op2
sub_1122D8 0 001122d8 STMFD           SP!, {R4,LR}; Store Block to Memory
sub_1122D8 1 001122ec CMP             R4, #0; Set cond. codes on Op1 - Op2
sub_1122D8 2 00112304 MOV             R1, #0; Rd = Op2
sub_11232C 0 0011232c CMP             R1, #3; Set cond. codes on Op1 - Op2
sub_11232C 1 00112340 ADD             R0, R1, R2,LSL#4; Rd = Op1 + Op2
sub_11232C 2 00112360 LDR             R0, =dword_206000; Load from Memory
sub_11232C 3 00112374 STR             R3, [R12,#0x1B4]; Store to Memory
sub_11232C 4 00112378 LDR             R1, [R12,#0x1B4]; Load from Memory
sub_11232C 5 00112384 LDR             R1, [R12,#0x1B8]; Load from Memory
sub_11232C 6 00112390 MOV             R1, #3; Rd = Op2
sub_11232C 7 001123a4 MOV             R0, #0; Rd = Op2
sub_1123B4 0 001123b4 STMFD           SP!, {R4-R6}; Store Block to Memory
sub_1123B4 1 001123d0 CMP             R1, #3; Set cond. codes on Op1 - Op2
sub_1123B4 2 001123e4 CMP             R2, #1; Set cond. codes on Op1 - Op2
sub_1123B4 3 00112444 LDMFD           SP!, {R4-R6}; Load Block from Memory
sub_112454 0 00112454 LDR             R1, =dword_2058B4; Load from Memory
sub_11247C 0 0011247c STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_11247C 1 0011248c MOV             R0, #0x3E8; Rd = Op2
sub_11247C 2 001124a0 LDMFD           SP!, {R4-R6,PC}; Load Block from Memory
sub_1124A4 0 001124a4 B               sub_10F39C; Branch
sub_1124A4 1 0010f39c CMP             R0, #0xA; Set cond. codes on Op1 - Op2
sub_112518 0 00112518 LDR             R0, =0x78DB000; Load from Memory
sub_112570 0 00112570 MOV             R0, #0xA6000; Rd = Op2
sub_112584 0 00112584 MOV             R2, #0xA6000; Rd = Op2
sub_112584 1 0011259c CMP             R0, #1; Set cond. codes on Op1 - Op2
sub_112584 2 001125a8 UXTH            R0, R1; Unsigned extend halfword to word
sub_1125B0 0 001125b0 STMFD           SP!, {R4-R10,LR}; Store Block to Memory
sub_1125B0 1 001125c8 LDR             R7, =byte_205670; Load from Memory
sub_1125B0 2 001125f0 ADD             R0, R2, R4,LSL#3; Rd = Op1 + Op2
sub_1125B0 3 00112600 CMN             R1, #1; Set cond. codes on Op1 + Op2
sub_1125B0 4 00112618 MOV             R2, R12; Rd = Op2
sub_1125B0 5 00112664 ADD             R0, R2, R4,LSL#3; Rd = Op1 + Op2
sub_1125B0 6 00112674 CMN             R1, #1; Set cond. codes on Op1 + Op2
sub_1125B0 7 0011268c MOV             R2, R12; Rd = Op2
sub_1125B0 8 001126dc MOV             R0, #0; Rd = Op2
sub_1125B0 9 001126e8 ADD             R10, R3, R0,LSL#6; Rd = Op1 + Op2
sub_1125B0 10 00112704 ADD             R1, R1, #1; Rd = Op1 + Op2
sub_1125B0 11 00112710 MOV             R0, #0x400000; Rd = Op2
sub_1125B0 12 00112764 B               loc_112780; Branch
sub_1125B0 13 00112768 MOV             R2, #0xC4; Rd = Op2
sub_1125B0 14 00112780 LDR             R0, [R5,#0x140]; Load from Memory
sub_1125B0 15 0011278c MOV             R0, R6; Rd = Op2
sub_1127AC 0 001127ac LDR             R0, =0x78DB000; Load from Memory
sub_1127E0 0 001127e0 LDR             R0, =0x78DB000; Load from Memory
sub_1127F8 0 001127f8 MOV             R0, #0; Rd = Op2
sub_112800 0 00112800 STMFD           SP!, {R4-R10,LR}; Store Block to Memory
sub_112800 1 00112828 CMP             R6, R4; Set cond. codes on Op1 - Op2
sub_112800 2 00112830 LDR             R1, [R7,R4,LSL#2]; Load from Memory
sub_112800 3 0011283c CMN             R1, #1; Set cond. codes on Op1 + Op2
sub_112800 4 00112844 CMP             R8, #0; Set cond. codes on Op1 - Op2
sub_112800 5 0011284c CMP             R8, #1; Set cond. codes on Op1 - Op2
sub_112800 6 00112860 MOV             R2, #0; Rd = Op2
sub_112800 7 00112870 ADD             R4, R4, #1; Rd = Op1 + Op2
sub_112800 8 0011287c MOV             R2, R9; Rd = Op2
sub_112800 9 001128a0 MOV             R2, R0; Rd = Op2
sub_112800 10 001128b4 LDRB            R2, [R5,R4]; Load from Memory
sub_112800 11 001130d8 LDR             R3, =word_2092E8; Load from Memory
sub_1128C8 0 001128c8 STMFD           SP!, {R3-R11,LR}; Store Block to Memory
sub_1128C8 1 001128f8 LDR             R1, =byte_205670; Load from Memory
sub_1128C8 2 00112910 BLX             R1; Branch with Link and Exchange (register indirect)
sub_1128C8 3 00112918 MOV             R2, #0x273; Rd = Op2
sub_1128C8 4 00112928 TST             R4, #0x100; Set cond. codes on Op1 & Op2
sub_1128C8 5 00112930 LDR             R0, =byte_205670; Load from Memory
sub_1128C8 6 00112944 LDR             R0, [R5,#8]; Load from Memory
sub_1128C8 7 00112950 MOV             R2, #0x294; Rd = Op2
sub_1128C8 8 00112960 TST             R4, #4; Set cond. codes on Op1 & Op2
sub_1128C8 9 00112968 LDR             R0, =byte_205670; Load from Memory
sub_1128C8 10 0011297c LDR             R0, [R5,#8]; Load from Memory
sub_1128C8 11 00112988 MOV             R2, #0x294; Rd = Op2
sub_1128C8 12 00112998 TST             R4, #1; Set cond. codes on Op1 & Op2
sub_1128C8 13 001129a4 LDR             R0, =0x78DB000; Load from Memory
sub_1128C8 14 001129bc LDR             R0, =unk_206180; Load from Memory
sub_1128C8 15 001129c8 ADD             R0, R5, R4,LSL#4; Rd = Op1 + Op2
sub_1128C8 16 001129d4 ADD             R0, R7, R4,LSL#5; Rd = Op1 + Op2
sub_1128C8 17 00112a08 ADD             R0, R4, #1; Rd = Op1 + Op2
sub_1128C8 18 00112a18 ADD             R0, R5, #1; Rd = Op1 + Op2
sub_1128C8 19 00112a28 LDR             R0, [SP,#0]; Load from Memory
sub_1128C8 20 00112a3c LDR             R0, [R4,#0x1AC]; Load from Memory
sub_1128C8 21 00112a48 LDR             R5, =dword_206000; Load from Memory
sub_1128C8 22 00112a4c LDR             R0, [R4,#0x140]; Load from Memory
sub_1128C8 23 00112a74 LDR             R0, [R4,#0x140]; Load from Memory
sub_1128C8 24 00112a94 ADD             R1, R8, R8,LSL#1; Rd = Op1 + Op2
sub_1128C8 25 00112ab4 LDMFD           SP!, {R3-R11,PC}; Load Block from Memory
sub_112B00 0 00112b00 LDR             R2, =0x78DB000; Load from Memory
sub_112B24 0 00112b24 LDR             R1, =byte_205670; Load from Memory
sub_112B4C 0 00112b4c STMFD           SP!, {R4-R12,LR}; Store Block to Memory
sub_112B4C 1 00112b68 MOV             R4, #0; Rd = Op2
sub_112B4C 2 00112b70 CMP             R5, #3; Set cond. codes on Op1 - Op2
sub_112B4C 3 00112b84 ADD             R0, R5, R1,LSL#4; Rd = Op1 + Op2
sub_112B4C 4 00112b98 ADD             R1, R7, R1,LSL#6; Rd = Op1 + Op2
sub_112B4C 5 00112ba4 STR             R0, [R8,#0x1B4]; Store to Memory
sub_112B4C 6 00112ba8 LDR             R1, [R8,#0x1B4]; Load from Memory
sub_112B4C 7 00112bb4 LDR             R1, [R8,#0x1B8]; Load from Memory
sub_112B4C 8 00112bc0 STR             R10, [R2,#4]; Store to Memory
sub_112B4C 9 00112bd4 ADD             R4, R4, #1; Rd = Op1 + Op2
sub_112B4C 10 00112be0 ADD             R0, R5, #1; Rd = Op1 + Op2
sub_112B4C 11 00112bf0 MOV             R2, #0; Rd = Op2
sub_112B4C 12 00112bf8 MOV             R0, #0; Rd = Op2
sub_112B4C 13 00112c04 CMP             R2, #3; Set cond. codes on Op1 - Op2
sub_112B4C 14 00112c18 STR             R4, [R12,R1,LSL#6]; Store to Memory
sub_112B4C 15 00112c24 LDR             R5, [R3,#0x1C0]; Load from Memory
sub_112B4C 16 00112c3c ADD             R0, R0, #1; Rd = Op1 + Op2
sub_112B4C 17 00112c48 ADD             R0, R2, #1; Rd = Op1 + Op2
sub_112B4C 18 00112c58 MOV             R0, #0; Rd = Op2
sub_112C68 0 00112c68 CMP             R1, #3; Set cond. codes on Op1 - Op2
sub_112C68 1 00112c78 CMP             R1, #0; Set cond. codes on Op1 - Op2
sub_112C68 2 00112c84 CMP             R2, #0; Set cond. codes on Op1 - Op2
sub_112C68 3 00112c90 LDR             R3, =0x78DB000; Load from Memory
sub_112C68 4 00112ca8 BX              LR; Branch to/from Thumb mode
sub_112D5C 0 00112d5c STMFD           SP!, {R4-R12,LR}; Store Block to Memory
sub_112D5C 1 00112d68 LDRB            R1, [R5,#0x10]; Load from Memory
sub_112D5C 2 00112d88 LDR             R2, =0x78DB000; Load from Memory
sub_112D5C 3 00112dac LDR             R3, =dword_206000; Load from Memory
sub_112D5C 4 00112ddc B               loc_112E08; Branch
sub_112D5C 5 00112de0 MOV             R2, #0x4BC; Rd = Op2
sub_112D5C 6 00112df4 LDMFD           SP!, {R4-R12,PC}; Load Block from Memory
sub_112D5C 7 00112df8 LDR             R0, [R2,#0x1AC]; Load from Memory
sub_112D5C 8 00112e08 CMP             R7, #0x4000; Set cond. codes on Op1 - Op2
sub_112D5C 9 00112e14 LDR             R0, =0x78DB000; Load from Memory
sub_112D5C 10 00112e28 MOV             R2, #0x20; Rd = Op2
sub_112D5C 11 00112e98 MOVS            R0, R4; Rd = Op2
sub_112D5C 12 00112ea8 MOV             R1, #1; Rd = Op2
sub_112ED0 0 00112ed0 STMFD           SP!, {R4-R8,LR}; Store Block to Memory
sub_112ED0 1 00112ef0 LDR             R5, [R7,#0x170]; Load from Memory
sub_112ED0 2 00112f08 MOV             R0, R4; Rd = Op2
sub_112ED0 3 00112f18 UBFX            R0, R5, #8, #8; Unsigned Bit Field Extract
sub_112F24 0 00112f24 STMFD           SP!, {R4-R12,LR}; Store Block to Memory
sub_112F24 1 00112f44 MOV             R1, #0x40000000; Rd = Op2
sub_112F24 2 00112f60 LDR             R0, =0x78DB000; Load from Memory
sub_112F24 3 00112f7c MOV             R0, R5; Rd = Op2
sub_112F24 4 00112f8c AND             R1, R9, R10; Rd = Op1 & Op2
sub_112F24 5 00112f9c LDR             R5, =0x78DB000; Load from Memory
sub_112F24 6 00112fb0 LDR             R0, [R5,#0x170]; Load from Memory
sub_112F24 7 00112fc0 CMP             R7, #0x40000000; Set cond. codes on Op1 - Op2
sub_112F24 8 00112fc8 MOV             R0, R4; Rd = Op2
sub_112F24 9 00112fd8 LDMFD           SP!, {R4-R12,PC}; Load Block from Memory
sub_112FE0 0 00112fe0 CMP             R1, #3; Set cond. codes on Op1 - Op2
sub_112FE0 1 00112ffc LDR             R12, =dword_206000; Load from Memory
sub_112FE0 2 00113014 CMP             R2, #1; Set cond. codes on Op1 - Op2
sub_112FE0 3 00113034 BX              LR; Branch to/from Thumb mode
sub_113040 0 00113040 CMP             R1, #3; Set cond. codes on Op1 - Op2
sub_113040 1 00113050 LDR             R3, =0x78DB000; Load from Memory
sub_113040 2 0011305c CMP             R2, #0; Set cond. codes on Op1 - Op2
sub_113040 3 00113084 BX              LR; Branch to/from Thumb mode
sub_113040 4 00113088 LDR             R1, [R3,#0x1C0]; Load from Memory
sub_1130D8 0 001130d8 LDR             R3, =word_2092E8; Load from Memory
sub_113134 0 00113134 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_113134 1 00113144 MOV             R0, #0; Rd = Op2
sub_113134 2 00113150 CMP             R5, #0; Set cond. codes on Op1 - Op2
sub_113134 3 00113158 MOV             R0, #1; Rd = Op2
sub_113134 4 00113164 LDMFD           SP!, {R4-R6,PC}; Load Block from Memory
sub_113168 0 00113168 STMFD           SP!, {R4-R10,LR}; Store Block to Memory
sub_113168 1 00113244 ADD             R0, R1, R1,LSL#1; Rd = Op1 + Op2
sub_113168 2 0011327c LDR             R0, =dword_205768; Load from Memory
sub_1132D4 0 001132d4 MOV             R1, #0; Rd = Op2
sub_1132D4 1 0011195c LDR             R1, =unk_209270; Load from Memory
sub_1132E4 0 001132e4 LDR             R1, =dword_205768; Load from Memory
sub_113308 0 00113308 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_113308 1 00113320 LDR             R0, =dword_205768; Load from Memory
sub_113308 2 00113334 LDR             R0, [R4,#0x18]; Load from Memory
sub_113308 3 00113350 LDR             R0, [R4,#0x18]; Load from Memory
sub_113308 4 0011335c LDR             R0, [R4,#0x18]; Load from Memory
sub_113308 5 00113368 MOV             R0, R4; Rd = Op2
sub_113308 6 00113374 LDMFD           SP!, {R4-R6,PC}; Load Block from Memory
sub_113308 7 001133fc LDR             R1, =0x42525551; Load from Memory
sub_113380 0 00113380 STMFD           SP!, {R4-R6,LR}; Store Block to Memory
sub_113380 1 0011339c LDR             R0, =dword_205768; Load from Memory
sub_113380 2 001133b0 CMP             R5, #0x1000; Set cond. codes on Op1 - Op2
sub_113380 3 001133fc LDR             R1, =0x42525551; Load from Memory
sub_1133E0 0 001133e0 LDR             R2, =unk_2056AC; Load from Memory
sub_1133FC 0 001133fc LDR             R1, =0x42525551; Load from Memory
sub_1133FC 1 0011341c LDR             R2, [R1,#0x14]; Load from Memory
sub_1133FC 2 00113430 LDRB            R1, [R0,#0x10]; Load from Memory
sub_1133FC 3 0011343c MOV             R1, #3; Rd = Op2
sub_1133FC 4 0011344c B               sub_112D5C; Branch
sub_1133FC 5 00112d5c STMFD           SP!, {R4-R12,LR}; Store Block to Memory